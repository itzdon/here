Savitribai Phule Pune University
S.Y.M.Sc(Comp. Sci.) Practical Examination 
Practical Paper(CSUP235) on Software Architecture and Design Patterns,Machine Learning and 
Web Frameworks
Duration : 3 Hours Maximum Marks: 70 
----------------------------------------------------------------------------------------------------------------------------------------------
18
Q.1 Write a JAVA Program to implement built-in support (java.util.Observable) Weather 
station with members temperature, humidity, pressure and methods 
mesurmentsChanged(), setMesurment(), getTemperature(), getHumidity(), 
getPressure() [20 M]
Q.2. Write a python program to implement Polynomial Linear Regression for given dataset 
[20 M]
Q.3 Create your Django app in which after running the server, you should see on the 
browser, the text “Hello! I am learning Django”, which you defined in the index view. 
 [20 M]
Q.4 Viva

----------------------------------------------------------------------------------------------------------------------------------------------------------------

Q1------

●	WeatherObservable
1)CurrentConditionsDisplay.java
package headfirst.observer.weatherobservable;
import java.util.Observable;
import java.util.Observer;
public class CurrentConditionsDisplay implements Observer, DisplayElement {
	Observable observable;
	private float temperature;
	private float humidity;
	public CurrentConditionsDisplay(Observable observable) {
		this.observable = observable;
		observable.addObserver(this);
	}
	public void update(Observable obs, Object arg) {
		if (obs instanceof WeatherData) {
			WeatherData weatherData = (WeatherData)obs;
			this.temperature = weatherData.getTemperature();
			this.humidity = weatherData.getHumidity();
			display();
		}
	}
	public void display() {
		System.out.println("Current conditions: " + temperature 
			+ "F degrees and " + humidity + "% humidity");
	}
}
2)DisplayElement.java
package headfirst.observer.weatherobservable;
public interface DisplayElement {
	public void display();
}
3)ForcastDisplay.java
package headfirst.observer.weatherobservable;
import java.util.Observable;
import java.util.Observer;
public class ForecastDisplay implements Observer, DisplayElement {
	private float currentPressure = 29.92f;  
	private float lastPressure;
	public ForecastDisplay(Observable observable) {
		observable.addObserver(this);
	}
public void update(Observable observable, Object arg) {
		if (observable instanceof WeatherData) {
			WeatherData weatherData = (WeatherData)observable;
			lastPressure = currentPressure;
			currentPressure = weatherData.getPressure();
			display();
		}
	}
	public void display() {
		System.out.print("Forecast: ");
		if (currentPressure > lastPressure) {
			System.out.println("Improving weather on the way!");
		} else if (currentPressure == lastPressure) {
			System.out.println("More of the same");
		} else if (currentPressure < lastPressure) {
		System.out.println("Watch out for cooler, rainy weather");
		}
	}
}
4)HeatIndexDisplay.java
package headfirst.observer.weatherobservable;
import java.util.Observable;
import java.util.Observer;
public class HeatIndexDisplay implements Observer, DisplayElement {
	float heatIndex = 0.0f;
	public HeatIndexDisplay(Observable observable) {
		observable.addObserver(this);
	}
	public void update(Observable observable, Object arg) {
		if (observable instanceof WeatherData) {
			WeatherData weatherData = (WeatherData)observable;
			float t = weatherData.getTemperature();
			float rh = weatherData.getHumidity();
			heatIndex = (float)
				(
				(16.923 + (0.185212 * t)) + 
				(5.37941 * rh) - 
				(0.100254 * t * rh) + 
				(0.00941695 * (t * t)) + 
				(0.00728898 * (rh * rh)) + 
				(0.000345372 * (t * t * rh)) - 
				(0.000814971 * (t * rh * rh)) +
				(0.0000102102 * (t * t * rh * rh)) - 
				(0.000038646 * (t * t * t)) + 
				(0.0000291583 * (rh * rh * rh)) +
				(0.00000142721 * (t * t * t * rh)) + 
				(0.000000197483 * (t * rh * rh * rh)) - 
				(0.0000000218429 * (t * t * t * rh * rh)) +
				(0.000000000843296 * (t * t * rh * rh * rh)) -
				(0.0000000000481975 * (t * t * t * rh * rh *rh)));
			display();
		}
	}
	public void display() {
		System.out.println("Heat index is " + heatIndex);
	}
}
5)StatisticsDisplay.java
package headfirst.observer.weatherobservable;
import java.util.Observable;
import java.util.Observer;
public class StatisticsDisplay implements Observer, DisplayElement {
	private float maxTemp = 0.0f;
	private float minTemp = 200;
	private float tempSum= 0.0f;
	private int numReadings;
	public StatisticsDisplay(Observable observable) {
		observable.addObserver(this);
	}
	public void update(Observable observable, Object arg) {
		if (observable instanceof WeatherData) {
			WeatherData weatherData = (WeatherData)observable;
			float temp = weatherData.getTemperature();
			tempSum += temp;
			numReadings++;
			if (temp > maxTemp) {
				maxTemp = temp;
			}
			if (temp < minTemp) {
				minTemp = temp;
			}
			display();
		}
	}
	public void display() {
		System.out.println("Avg/Max/Min temperature = " + (tempSum / numReadings)
			+ "/" + maxTemp + "/" + minTemp);
	}
}
6)WeatherData.java
package headfirst.observer.weatherobservable;
import java.util.Observable;
import java.util.Observer;
public class WeatherData extends Observable {
	private float temperature;
	private float humidity;
	private float pressure;
	public WeatherData() { }
	public void measurementsChanged() {
		setChanged();
		notifyObservers();
	}	
	public void setMeasurements(float temperature, float humidity, float pressure) {
		this.temperature = temperature;
		this.humidity = humidity;
		this.pressure = pressure;
		measurementsChanged();
	}
	public float getTemperature() {
		return temperature;
	}
	public float getHumidity() {
		return humidity;
	}
	public float getPressure() {
		return pressure;
	}
}
7)WeatherStation.java
package headfirst.observer.weatherobservable;
public class WeatherStation {
	public static void main(String[] args) {
		WeatherData weatherData = new WeatherData();
		CurrentConditionsDisplay currentConditions = new CurrentConditionsDisplay(weatherData);
		StatisticsDisplay statisticsDisplay = new StatisticsDisplay(weatherData);
		ForecastDisplay forecastDisplay = new ForecastDisplay(weatherData);
		weatherData.setMeasurements(80, 65, 30.4f);
		weatherData.setMeasurements(82, 70, 29.2f);
		weatherData.setMeasurements(78, 90, 29.2f);
	}
}
8)WeatherStationHeatIndex.java
package headfirst.observer.weatherobservable;
public class WeatherStationHeatIndex {
	public static void main(String[] args) {
		WeatherData weatherData = new WeatherData();
		CurrentConditionsDisplay currentConditions = new CurrentConditionsDisplay(weatherData);
		StatisticsDisplay statisticsDisplay = new StatisticsDisplay(weatherData);
		ForecastDisplay forecastDisplay = new ForecastDisplay(weatherData);
		HeatIndexDisplay heatIndexDisplay = new HeatIndexDisplay(weatherData);
          weatherData.setMeasurements(80, 65, 30.4f);
		weatherData.setMeasurements(82, 70, 29.2f);
		weatherData.setMeasurements(78, 90, 29.2f);
	}
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------

Q2-------

Write a python program to implement Polynomial Linear Regression for given dataset
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

x=np.arange(0,30)
y=[3,4,5,7,10,8,9,10,10,23,27,44,50,63,67,60,62,70,75,88,81,87,95,100,108,135,151,160,169,179]
plt.figure(figsize=(10,6))
plt.scatter(x,y)
plt.show()

from sklearn.preprocessing import PolynomialFeatures
poly=PolynomialFeatures(degree=2,include_bias=False)
poly_features=poly.fit_transform(x.reshape(-1,1))
from sklearn.linear_model import LinearRegression
poly_reg_model=LinearRegression()

poly_reg_model.fit(poly_features,y)
y_predicted=poly_reg_model.predict(poly_features)

plt.figure(figsize=(10,6))
plt.title("polynomial regression",size=16)
plt.scatter(x,y)
plt.plot(x,y_predicted,c="red")
plt.show()

y1=poly_reg_model.predict(poly.fit_transform(np.array([34]).reshape(-1,1)))
print(y1)


-------------------------------------------------------------------------------------------------------------------------

Q3---------



