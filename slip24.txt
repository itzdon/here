Savitribai Phule Pune University
S.Y.M.Sc(Comp. Sci.) Practical Examination 
Practical Paper(CSUP235) on Software Architecture and Design Patterns,Machine Learning and 
Web Frameworks
Duration : 3 Hours Maximum Marks: 70 
----------------------------------------------------------------------------------------------------------------------------------------------
24
Q.1 Write a Java Program to implement Iterator Pattern for Designing Menu like Breakfast, 
Lunch or Dinner Menu [20 M]
Q.2. Write a python program to make Categorical values in numeric format for a given 
dataset [20 M]
 
Q.3 Implement Login System using Django. [20 M]
Q.4 Viva 
-------------------------------------------------------------------------------------------------------------------------------------------------------------

Q1--------


           Iterator Pattern
●	DinerMergerCafe
1)AlternatingDinerMenuIterator.java
package headfirst.iterator.dinermergercafe;
import java.util.Iterator;
import java.util.Calendar;
public class AlternatingDinerMenuIterator implements Iterator {
	MenuItem[] items;
	int position;
	public AlternatingDinerMenuIterator(MenuItem[] items) {
		this.items = items;
		Calendar rightNow = Calendar.getInstance();
		position = rightNow.DAY_OF_WEEK % 2;
	}
	public Object next() {
		MenuItem menuItem = items[position];
		position = position + 2;
		return menuItem;
	}
	public boolean hasNext() {
		if (position >= items.length || items[position] == null) {
			return false;
		} else {
			return true;
		}
	}
	public void remove() {
		throw new UnsupportedOperationException(
		"Alternating Diner Menu Iterator does not support remove()");
	}
}
2)CafeMenu.java
package headfirst.iterator.dinermergercafe;
import java.util.*;
public class CafeMenu implements Menu {
	Hashtable menuItems = new Hashtable();
	public CafeMenu() {
	addItem("Veggie Burger and Air Fries","Veggie burger on a whole wheat bun, lettuce, tomato, and fries",true, 3.99);
	addItem("Soup of the day","A cup of the soup of the day, with a side salad",false, 3.69);
	addItem("Burrito","A large burrito, with whole pinto beans, salsa, guacamole",true, 4.29);
	}
	public void addItem(String name, String description, 
	    boolean vegetarian, double price) 
	{
MenuItem menuItem = new MenuItem(name, description, vegetarian, price);
		menuItems.put(menuItem.getName(), menuItem);
	} 
	public Hashtable getItems() {
		return menuItems;
	}
	public Iterator createIterator() {
		return menuItems.values().iterator();
	}
}
3)DinerMenu.java
package headfirst.iterator.dinermergercafe;
import java.util.Iterator;
public class DinerMenu implements Menu {
	static final int MAX_ITEMS = 6;
	int numberOfItems = 0;
	MenuItem[] menuItems;
	public DinerMenu() {
		menuItems = new MenuItem[MAX_ITEMS];
	addItem("Vegetarian BLT","(Fakin') Bacon with lettuce & tomato on whole wheat", true, 2.99);
	addItem("BLT","Bacon with lettuce & tomato on whole wheat", false, 2.99);
	addItem("Soup of the day","Soup of the day, with a side of potato salad", false, 3.29);
	addItem("Hotdog","A hot dog, with saurkraut, relish, onions, topped with cheese",false, 3.05);
	addItem("Steamed Veggies and Brown Rice","A medly of steamed vegetables over brown rice", true, 3.99);
	addItem("Pasta","Spaghetti with Marinara Sauce, and a slice of sourdough bread",true, 3.89);
	} 
	public void addItem(String name, String description, 
	                     boolean vegetarian, double price) 
	{
MenuItem menuItem = new MenuItem(name, description, vegetarian, price);
		if (numberOfItems >= MAX_ITEMS) {
	System.err.println("Sorry, menu is full!  Can't add item to menu");
		} else {
			menuItems[numberOfItems] = menuItem;
			numberOfItems = numberOfItems + 1;
		}
	}
	public MenuItem[] getMenuItems() {
		return menuItems;
	}
	public Iterator createIterator() {
		return new DinerMenuIterator(menuItems);
		//return new AlternatingDinerMenuIterator(menuItems);
	}
	// other menu methods here
}
4)DinerMenuIterator.java
package headfirst.iterator.dinermergercafe;
import java.util.Iterator;
public class DinerMenuIterator implements Iterator {
	MenuItem[] list;
	int position = 0;
	public DinerMenuIterator(MenuItem[] list) {
		this.list = list;
	}
public Object next() {
		MenuItem menuItem = list[position];
		position = position + 1;
		return menuItem;
	} 
	public boolean hasNext() {
		if (position >= list.length || list[position] == null) {
			return false;
		} else {
			return true;
		}
	}
	public void remove() {
		if (position <= 0) {
			throw new IllegalStateException
	("You can't remove an item until you've done at least one next()");
		}
		if (list[position-1] != null) {
			for (int i = position-1; i < (list.length-1); i++) {
				list[i] = list[i+1];
			}
			list[list.length-1] = null;
		}
	}
}
5)Menu.java
package headfirst.iterator.dinermergercafe;
import java.util.Iterator;
public interface Menu {
public Iterator createIterator();
}
6)MenuItem.java
package headfirst.iterator.dinermergercafe;
public class MenuItem {
	String name;
	String description;
	boolean vegetarian;
	double price;
	public MenuItem(String name, String description, 
	                boolean vegetarian,double price) 
	{
		this.name = name;
		this.description = description;
		this.vegetarian = vegetarian;
		this.price = price;
	}
	public String getName() {
		return name;
	}
	public String getDescription() {
		return description;
	}
	public double getPrice() {
		return price;
	}
	public boolean isVegetarian() {
		return vegetarian;
	}  }
7)MenuTestDrive.java
package headfirst.iterator.dinermergercafe;
import java.util.*;
public class MenuTestDrive {
	public static void main(String args[]) {
		PancakeHouseMenu pancakeHouseMenu = new PancakeHouseMenu();
		DinerMenu dinerMenu = new DinerMenu();
		CafeMenu cafeMenu = new CafeMenu();
		Waitress waitress = new Waitress(pancakeHouseMenu, dinerMenu, cafeMenu);
		waitress.printMenu();
		waitress.printVegetarianMenu();
	System.out.println("\nCustomer asks, is the Hotdog vegetarian?");
		System.out.print("Waitress says: ");
		if (waitress.isItemVegetarian("Hotdog")) {
			System.out.println("Yes");
		} else {
			System.out.println("No");
		}
	System.out.println("\nCustomer asks, are the Waffles vegetarian?");
		System.out.print("Waitress says: ");
		if (waitress.isItemVegetarian("Waffles")) {
			System.out.println("Yes");
		} else {
			System.out.println("No");
		}
	}
}
8)PancakehouseMenu.java
package headfirst.iterator.dinermergercafe;
import java.util.ArrayList;
import java.util.Iterator;
public class PancakeHouseMenu implements Menu {
	ArrayList menuItems;
	public PancakeHouseMenu() {
		menuItems = new ArrayList();
		addItem("K&B's Pancake Breakfast", "Pancakes with scrambled eggs, and toast",true,2.99);
		addItem("Regular Pancake Breakfast","Pancakes with fried eggs, sausage",false,2.99);
		addItem("Blueberry Pancakes","Pancakes made with fresh blueberries, and blueberry syrup",true,	3.49);
		addItem("Waffles","Waffles, with your choice of blueberries or strawberries",true,3.59);
	}
	public void addItem(String name, String description,
	                    boolean vegetarian, double price)
	{
		MenuItem menuItem = new MenuItem(name, description, vegetarian, price);
		menuItems.add(menuItem);
	}
	public ArrayList getMenuItems() {
		return menuItems;
	}
	public Iterator createIterator() {
		return menuItems.iterator();
	}
	// other menu methods here
}
9)Waitress.java
package headfirst.iterator.dinermergercafe;
import java.util.Iterator;
public class Waitress {
	Menu pancakeHouseMenu;
	Menu dinerMenu;
	Menu cafeMenu;
public Waitress(Menu pancakeHouseMenu, Menu dinerMenu, Menu cafeMenu) {
		this.pancakeHouseMenu = pancakeHouseMenu;
		this.dinerMenu = dinerMenu;
		this.cafeMenu = cafeMenu;
	} 
	public void printMenu() {
		Iterator pancakeIterator = pancakeHouseMenu.createIterator();
		Iterator dinerIterator = dinerMenu.createIterator();
		Iterator cafeIterator = cafeMenu.createIterator();
		System.out.println("MENU\n----\nBREAKFAST");
		printMenu(pancakeIterator);
		System.out.println("\nLUNCH");
		printMenu(dinerIterator);
		System.out.println("\nDINNER");
		printMenu(cafeIterator);
	}
	private void printMenu(Iterator iterator) {
		while (iterator.hasNext()) {
			MenuItem menuItem = (MenuItem)iterator.next();
			System.out.print(menuItem.getName() + ", ");
			System.out.print(menuItem.getPrice() + " -- ");
			System.out.println(menuItem.getDescription());
		}
	} 
	public void printVegetarianMenu() {
		System.out.println("\nVEGETARIAN MENU\n---------------");
		printVegetarianMenu(pancakeHouseMenu.createIterator());
		printVegetarianMenu(dinerMenu.createIterator());
		printVegetarianMenu(cafeMenu.createIterator());
	}
	public boolean isItemVegetarian(String name) {
		Iterator pancakeIterator = pancakeHouseMenu.createIterator();
		if (isVegetarian(name, pancakeIterator)) {
			return true;
		}
		Iterator dinerIterator = dinerMenu.createIterator();
		if (isVegetarian(name, dinerIterator)) {
			return true;
		}
		Iterator cafeIterator = cafeMenu.createIterator();
		if (isVegetarian(name, cafeIterator)) {
			return true;
		}
		return false;
	}
	private void printVegetarianMenu(Iterator iterator) {
		while (iterator.hasNext()) {
			MenuItem menuItem = (MenuItem)iterator.next();
			if (menuItem.isVegetarian()) {
				System.out.print(menuItem.getName() + ", ");
				System.out.print(menuItem.getPrice() + " -- ");
				System.out.println(menuItem.getDescription());
			}
		}
	}
	private boolean isVegetarian(String name, Iterator iterator) {
		while (iterator.hasNext()) {
			MenuItem menuItem = (MenuItem)iterator.next();
			if (menuItem.getName().equals(name)) {
				if (menuItem.isVegetarian()) {
					return true;
				}
			}
		}
		return false;
	}
}
//^^ WaitressCafeMain
//^^ WaitressCafe
—---------------------------------------------------------------------
●	Transition
1)Menu.java
package headfirst.iterator.transition;
import java.util.Iterator;
public interface Menu {
	public Iterator createIterator();
}
2)MenuItem.java
package headfirst.iterator.transition;
public class MenuItem {
	String name;
	String description;
	boolean vegetarian;
	double price; 
	public MenuItem(String name, String description, 
	                boolean vegetarian,double price) 
	{
		this.name = name;
		this.description = description;
		this.vegetarian = vegetarian;
		this.price = price;
	}
	public String getName() {
		return name;
	}
	public String getDescription() {
		return description;
	}
	public double getPrice() {
		return price;
	}
	public boolean isVegetarian() {
		return vegetarian;
	}
}
3)Waitress.java
package headfirst.iterator.transition;
import java.util.*;  
public class Waitress {
	ArrayList menus;  
	public Waitress(ArrayList menus) {
		this.menus = menus;
	}
	public void printMenu() {
		Iterator menuIterator = menus.iterator();
		while(menuIterator.hasNext()) {
			Menu menu = (Menu)menuIterator.next();
			printMenu(menu.createIterator());
		}
	}
	void printMenu(Iterator iterator) {
		while (iterator.hasNext()) {
			MenuItem menuItem = (MenuItem)iterator.next();
			System.out.print(menuItem.getName() + ", ");
			System.out.print(menuItem.getPrice() + " -- ");
			System.out.println(menuItem.getDescription());
		}
	}
}
—----------------------------------------------------------------------
●	DinerMerger1
1)AlternatingDinerMenuIterator.java
package headfirst.iterator.dinermergeri;
import java.util.Iterator;
import java.util.Calendar;
public class AlternatingDinerMenuIterator implements Iterator {
	MenuItem[] items;
	int position;

	public AlternatingDinerMenuIterator(MenuItem[] items) {
		this.items = items;
		Calendar rightNow = Calendar.getInstance();
		position = rightNow.DAY_OF_WEEK % 2;
	}
	public Object next() {
		MenuItem menuItem = items[position];
		position = position + 2;
		return menuItem;
	}
	public boolean hasNext() {
		if (position >= items.length || items[position] == null) {
			return false;
		} else {
			return true;
		}
	}
	public void remove() {
		throw new UnsupportedOperationException(
		"Alternating Diner Menu Iterator does not support remove()");
	}
}
2)DinerMenu.java
package headfirst.iterator.dinermergeri;
import java.util.Iterator;
public class DinerMenu implements Menu {
	static final int MAX_ITEMS = 6;
	int numberOfItems = 0;
	MenuItem[] menuItems;
	public DinerMenu() {
		menuItems = new MenuItem[MAX_ITEMS];
		addItem("Vegetarian BLT","(Fakin') Bacon with lettuce & tomato on whole wheat", true, 2.99);
		addItem("BLT","Bacon with lettuce & tomato on whole wheat", false, 2.99);
		addItem("Soup of the day","Soup of the day, with a side of potato salad", false, 3.29);
		addItem("Hotdog","A hot dog, with saurkraut, relish, onions, topped with cheese",false, 3.05);
		addItem("Steamed Veggies and Brown Rice","Steamed vegetables over brown rice", true, 3.99);
		addItem("Pasta","Spaghetti with Marinara Sauce, and a slice of sourdough bread",true, 3.89);
	}
	public void addItem(String name, String description, 
	                     boolean vegetarian, double price) 
	{
		MenuItem menuItem = new MenuItem(name, description, vegetarian, price);
		if (numberOfItems >= MAX_ITEMS) {
	System.err.println("Sorry, menu is full!  Can't add item to menu");
		} else {
			menuItems[numberOfItems] = menuItem;
			numberOfItems = numberOfItems + 1;
		}
	}
	public MenuItem[] getMenuItems() {
		return menuItems;
	}
	public Iterator createIterator() {
		return new DinerMenuIterator(menuItems);
		//return new AlternatingDinerMenuIterator(menuItems);
	}
	// other menu methods here
}
3)DinerMenuIterator.java
package headfirst.iterator.dinermergeri; 
import java.util.Iterator;
public class DinerMenuIterator implements Iterator {
	MenuItem[] list;
	int position = 0;
	public DinerMenuIterator(MenuItem[] list) {
		this.list = list;
	}
	public Object next() {
		MenuItem menuItem = list[position];
		position = position + 1;
		return menuItem;
	}
	public boolean hasNext() {
		if (position >= list.length || list[position] == null) {
			return false;
		} else {
			return true;
		}
	}
	public void remove() {
		if (position <= 0) {
			throw new IllegalStateException
	("You can't remove an item until you've done at least one next()");
		}
		if (list[position-1] != null) {
			for (int i = position-1; i < (list.length-1); i++) {
				list[i] = list[i+1];
			}
			list[list.length-1] = null;
		}
	}
}
4)Menu.java
package headfirst.iterator.dinermergeri;
import java.util.Iterator;
public interface Menu {
	public Iterator createIterator();
}
5)MenuItem.java
package headfirst.iterator.dinermergeri;
public class MenuItem {
	String name;
	String description;
	boolean vegetarian;
	double price;
	public MenuItem(String name,String description, 
	                boolean vegetarian,double price) 
	{
		this.name = name;
		this.description = description;
		this.vegetarian = vegetarian;
		this.price = price;
	}
	public String getName() {
		return name;
	}
	public String getDescription() {
		return description;
	}
	public double getPrice() {
		return price;
	}
	public boolean isVegetarian() {
		return vegetarian;
	}
}
6)MenuTestDrive.java
package headfirst.iterator.dinermergeri;
import java.util.*;
public class MenuTestDrive {
	public static void main(String args[]) {
		PancakeHouseMenu pancakeHouseMenu = new PancakeHouseMenu();
		DinerMenu dinerMenu = new DinerMenu();
	Waitress waitress = new Waitress(pancakeHouseMenu, dinerMenu);
		waitress.printMenu();
		waitress.printVegetarianMenu();
	System.out.println("\nCustomer asks, is the Hotdog vegetarian?");
		System.out.print("Waitress says: ");
		if (waitress.isItemVegetarian("Hotdog")) {
			System.out.println("Yes");
		} else {
			System.out.println("No");
		}
	System.out.println("\nCustomer asks, are the Waffles vegetarian?");
		System.out.print("Waitress says: ");
		if (waitress.isItemVegetarian("Waffles")) {
			System.out.println("Yes");
		} else {
			System.out.println("No");
		}
	}
}
7)PancakeHouseMenu.java
package headfirst.iterator.dinermergeri;
import java.util.ArrayList;
import java.util.Iterator;
public class PancakeHouseMenu implements Menu {
	ArrayList menuItems;
	public PancakeHouseMenu() {
		menuItems = new ArrayList();
		addItem("K&B's Pancake Breakfast", "Pancakes with scrambled eggs, and toast",true,2.99);
		addItem("Regular Pancake Breakfast","Pancakes with fried eggs, sausage",false,2.99);
		addItem("Blueberry Pancakes","Pancakes made with fresh blueberries, and blueberry syrup",true,	3.49);
		addItem("Waffles","Waffles, with your choice of blueberries or strawberries",true,3.59);
	}
	public void addItem(String name, String description,
	                    boolean vegetarian, double price)
	{
		MenuItem menuItem = new MenuItem(name, description, vegetarian, price);
		menuItems.add(menuItem);
	}
	public ArrayList getMenuItems() {
		return menuItems;
	}
	public Iterator createIterator() {
		return menuItems.iterator();
	}
	// other menu methods here
}
8)Waitress.java
package headfirst.iterator.dinermergeri;
import java.util.Iterator;
public class Waitress {
	Menu pancakeHouseMenu;
	Menu dinerMenu;
	public Waitress(Menu pancakeHouseMenu, Menu dinerMenu) {
		this.pancakeHouseMenu = pancakeHouseMenu;
		this.dinerMenu = dinerMenu;
	}
	public void printMenu() {
		Iterator pancakeIterator = pancakeHouseMenu.createIterator();
		Iterator dinerIterator = dinerMenu.createIterator();

		System.out.println("MENU\n----\nBREAKFAST");
		printMenu(pancakeIterator);
		System.out.println("\nLUNCH");
		printMenu(dinerIterator);
	}
	private void printMenu(Iterator iterator) {
		while (iterator.hasNext()) {
			MenuItem menuItem = (MenuItem)iterator.next();
			System.out.print(menuItem.getName() + ", ");
			System.out.print(menuItem.getPrice() + " -- ");
			System.out.println(menuItem.getDescription());
		}
	}
	public void printVegetarianMenu() {
		System.out.println("\nVEGETARIAN MENU\n----\nBREAKFAST");
		printVegetarianMenu(pancakeHouseMenu.createIterator());
		System.out.println("\nLUNCH");
		printVegetarianMenu(dinerMenu.createIterator());
	}
	public boolean isItemVegetarian(String name) {
		Iterator pancakeIterator = pancakeHouseMenu.createIterator();
		if (isVegetarian(name, pancakeIterator)) {
			return true;
		}
		Iterator dinerIterator = dinerMenu.createIterator();
		if (isVegetarian(name, dinerIterator)) {
			return true;
		}
		return false;
	}
	private void printVegetarianMenu(Iterator iterator) {
		while (iterator.hasNext()) {
			MenuItem menuItem = (MenuItem)iterator.next();
			if (menuItem.isVegetarian()) {
				System.out.print(menuItem.getName());
				System.out.println("\t\t" + menuItem.getPrice());
			System.out.println("\t" + menuItem.getDescription());
			}
		}
	}
private boolean isVegetarian(String name, Iterator iterator) {
		while (iterator.hasNext()) {
			MenuItem menuItem = (MenuItem)iterator.next();
			if (menuItem.getName().equals(name)) {
				if (menuItem.isVegetarian()) {
					return true;
				}
			}
		}
		return false;
	}
}
—-----------------------------------------------------------------------
●	Transition1
1)Menu.java
//package headfirst.iterator.transition;
import java.util.Iterator;
public interface Menu {
	public Iterator createIterator();   }
2)MenuItem.java
//package headfirst.iterator.transition;
public class MenuItem {
	String name;
	String description;
	boolean vegetarian;
	double price;
	public MenuItem(String name,String description, 
	                boolean vegetarian,double price) 
	{
		this.name = name;
		this.description = description;
		this.vegetarian = vegetarian;
		this.price = price;
	}
	public String getName() {
		return name;
	}
	public String getDescription() {
		return description;
	}
	public double getPrice() {
		return price;
	}
	public boolean isVegetarian() {
		return vegetarian;
	}
}

3)Waitress.java
//package headfirst.iterator.transition;
import java.util.*;   
public class Waitress {
	ArrayList menus;
	public Waitress(ArrayList menus) {
		this.menus = menus;
	}
	public void printMenu() {
		Iterator menuIterator = menus.iterator();
		while(menuIterator.hasNext()) {
			Menu menu = (Menu)menuIterator.next();
			printMenu(menu.createIterator());
		}
	}
	void printMenu(Iterator iterator) {
		while (iterator.hasNext()) {
			MenuItem menuItem = (MenuItem)iterator.next();
			System.out.print(menuItem.getName() + ", ");
			System.out.print(menuItem.getPrice() + " -- ");
			System.out.println(menuItem.getDescription());
		}
	}
} 


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Q2---------

Write a python program to make Categorical values in numeric format for a given dataset
import pandas as pd
df=pd.read_csv('categorical.csv')
df1=pd.get_dummies(df['Purchased'])
df
df1
df=pd.concat([df,df1],axis=1).reindex(df.index)
df
df.drop('Purchased',axis=1,inplace=True)
df

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Q3-----------

