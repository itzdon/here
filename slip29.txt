Savitribai Phule Pune University
S.Y.M.Sc(Comp. Sci.) Practical Examination 
Practical Paper(CSUP235) on Software Architecture and Design Patterns,Machine Learning and 
Web Frameworks
Duration : 3 Hours Maximum Marks: 70 
----------------------------------------------------------------------------------------------------------------------------------------------
29
Q. 1 Write a Java Program to implement State Pattern for Gumball Machine.
Create instance variable that holds current state from there, we just need to handle all 
actions, behaviors and state transition that can happen [20 M]
Q.2. Write a python program to implement Decision Tree whether or not to play Tennis.
[20 M]
Q.3 Create a clone of the “Hacker News” website. [20 M]
Q.4 Viv
-----------------------------------------------------------------------------------------------------------------------------------------------------------------

Q1------

State Pattern
●	GumBallState
1)GumBallMachine.java
package headfirst.state.gumballstate;
public class GumballMachine {
	State soldOutState;
	State noQuarterState;
	State hasQuarterState;
	State soldState;
	State state = soldOutState;
	int count = 0;
	public GumballMachine(int numberGumballs) {
		soldOutState = new SoldOutState(this);
		noQuarterState = new NoQuarterState(this);
		hasQuarterState = new HasQuarterState(this);
		soldState = new SoldState(this);
		this.count = numberGumballs;
 		if (numberGumballs > 0) {
			state = noQuarterState;
		} 
	}
	public void insertQuarter() {
		state.insertQuarter();
	}
	public void ejectQuarter() {
		state.ejectQuarter();
	}
	public void turnCrank() {
		state.turnCrank();
		state.dispense();
	}
	void setState(State state) {
		this.state = state;
	}
	void releaseBall() {
		System.out.println("A gumball comes rolling out the slot...");
		if (count != 0) {
			count = count - 1;
		}
	} 
	int getCount() {
		return count;
	}
	void refill(int count) {
		this.count = count;
		state = noQuarterState;
	}
    public State getState() {
        return state;
    }
    public State getSoldOutState() {
        return soldOutState;
    }
    public State getNoQuarterState() {
        return noQuarterState;
    }
    public State getHasQuarterState() {
        return hasQuarterState;
    }
    public State getSoldState() {
        return soldState;
    }
	public String toString() {
		StringBuffer result = new StringBuffer();
		result.append("\nMighty Gumball, Inc.");
		result.append("\nJava-enabled Standing Gumball Model #2004");
		result.append("\nInventory: " + count + " gumball");
		if (count != 1) {
			result.append("s");
		}
		result.append("\n");
		result.append("Machine is " + state + "\n");
		return result.toString();
	}
}
2)GumBallMachineStateDrive.java
package headfirst.state.gumballstate;
public class GumballMachineTestDrive {
	public static void main(String[] args) {
		GumballMachine gumballMachine = new GumballMachine(5);
		System.out.println(gumballMachine);
		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();
		System.out.println(gumballMachine);
		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();
		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();
		System.out.println(gumballMachine);
	}
}
3)HasQuarterState.java
package headfirst.state.gumballstate;
import java.util.Random;
public class HasQuarterState implements State {
	GumballMachine gumballMachine;
	public HasQuarterState(GumballMachine gumballMachine) {
		this.gumballMachine = gumballMachine;
	}
	public void insertQuarter() {
		System.out.println("You can't insert another quarter");
	}
	public void ejectQuarter() {
		System.out.println("Quarter returned");
		gumballMachine.setState(gumballMachine.getNoQuarterState());
	}
	public void turnCrank() {
		System.out.println("You turned...");
		gumballMachine.setState(gumballMachine.getSoldState());
	}
    public void dispense() {
        System.out.println("No gumball dispensed");
    }
	public String toString() {
		return "waiting for turn of crank";
	}
}
4)NoQuarterState.java
package headfirst.state.gumballstate;
public class NoQuarterState implements State {
    GumballMachine gumballMachine;
    public NoQuarterState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }
	public void insertQuarter() {
		System.out.println("You inserted a quarter");
		gumballMachine.setState(gumballMachine.getHasQuarterState());
	}
	public void ejectQuarter() {
		System.out.println("You haven't inserted a quarter");
	}
	public void turnCrank() {
		System.out.println("You turned, but there's no quarter");
	 }
	public void dispense() {
		System.out.println("You need to pay first");
	} 
	public String toString() {
		return "waiting for quarter";
	}
}
5)SoldOutState.java
package headfirst.state.gumballstate;
public class SoldOutState implements State {
    GumballMachine gumballMachine;
    public SoldOutState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }
	public void insertQuarter() {
		System.out.println("You can't insert a quarter, the machine is sold out");
	}
	public void ejectQuarter() {
		System.out.println("You can't eject, you haven't inserted a quarter yet");
	}
	public void turnCrank() {
		System.out.println("You turned, but there are no gumballs");
	}
	public void dispense() {
		System.out.println("No gumball dispensed");
	}
	public String toString() {
		return "sold out";
	}
}
6)SoldState.java
package headfirst.state.gumballstate;
public class SoldState implements State {
    GumballMachine gumballMachine;
    public SoldState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }
	public void insertQuarter() {
		System.out.println("Please wait, we're already giving you a gumball");
	}
	public void ejectQuarter() {
		System.out.println("Sorry, you already turned the crank");
	}
	public void turnCrank() {
		System.out.println("Turning twice doesn't get you another gumball!");
	}
	public void dispense() {
		gumballMachine.releaseBall();
		if (gumballMachine.getCount() > 0) {
			gumballMachine.setState(gumballMachine.getNoQuarterState());
		} else {
			System.out.println("Oops, out of gumballs!");
			gumballMachine.setState(gumballMachine.getSoldOutState());
		}
	}
	public String toString() {
		return "dispensing a gumball";
	}
}
7)State.java
package headfirst.state.gumballstate;
public interface State { 
public void insertQuarter();
	public void ejectQuarter();
	public void turnCrank();
	public void dispense();
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Q2-----

Write a python program to implement Decision Tree whether or not to play Tennis
PlayTennis.csv
outtlook, temp, humidity, windy, play
sunny, hot, high, false, no
sunny, hot, high, false, no
overcast, hot, high, false, yes
rainy, mild, high, false, yes
rainy, cool, normal, false, yes
rainy, cool, normal, true. no
overcast, cool, normal, true, yes
sunny, mild, high, false, no
sunny, cool, normal, false, yes
rainy, mild, normal, false, yes
sunny, mild, normal, true, yes
overcast, mild, high, true, yes
overcast, hot, normal, false, yes
rainy, mild, high, true, no

-----------
import numpy as np
import pandas as pd

data=pd.read_csv("PlayTennis.csv")
data
from sklearn.preprocessing import LabelEncoder

outlook=LabelEncoder()
temp=LabelEncoder()
humidity=LabelEncoder()
windy=LabelEncoder()
play=LabelEncoder()
data['outlook']=outlook.fit_transform(data['outlook'])
data['temp']=outlook.fit_transform(data['temp'])
data['humidity']=outlook.fit_transform(data['humidity'])
data['windy']=outlook.fit_transform(data['windy'])
data['play']=outlook.fit_transform(data['play'])

data

features_cols=['outlook','temp','humidity','windy']
x=data[features_cols]
y=data.play

x
y
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)
from sklearn.tree import DecisionTreeClassifier
classifier=DecisionTreeClassifier(criterion='gini')
classifier.fit(x_train,y_train)
classifier.predict(x_test)
x_test
y_test

classifier.score(x_test,y_test)

from sklearn import tree
tree.plot_tree(classifier)

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Q3------

class Post(models.Model):
    title = models.CharField("HeadLine", max_length=256, unique=True)
    creator = models.ForeignKey(User, on_delete= models.SET_NULL, null=True)
    created_on = models.DateTimeField(auto_now_add=True)
    url = models.URLField("URL", max_length=256,blank=True)
    description = models.TextField("Description", blank=True)
    votes = models.IntegerField(null=True)
    comments = models.IntegerField(null=True)    

    def __unicode__(self):
        return self.title

    def count_votes(self):
        self.votes = Vote.objects.filter(post = self).count()
    
    def count_comments(self):
        self.comments = Comment.objects.filter(post = self).count()


urls.py:

path('',PostListView, name='home'),

