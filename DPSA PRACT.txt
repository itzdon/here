           Strategy Pattern
1)DecoyDuck.java
package headfirst.strategy;
public class DecoyDuck extends Duck {
	public DecoyDuck() {
		setFlyBehavior(new FlyNoWay());
		setQuackBehavior(new MuteQuack());
	}
	public void display() {
		System.out.println("I'm a duck Decoy");
	}
}
2)Duck.java
  package headfirst.strategy;
public abstract class Duck {
	FlyBehavior flyBehavior;
	QuackBehavior quackBehavior;
	public Duck() {
	}
	public void setFlyBehavior (FlyBehavior fb) {
		flyBehavior = fb;
	}
	public void setQuackBehavior(QuackBehavior qb) {
		quackBehavior = qb;
	}
	abstract void display();
	public void performFly() {
		flyBehavior.fly();
	}
     public void performQuack() {
	quackBehavior.quack();
	} 
	public void swim() {
		System.out.println("All ducks float, even decoys!");
	}
}
3)FakeQuack.java
package headfirst.strategy;
public class FakeQuack implements QuackBehavior {
	public void quack() {
		System.out.println("Qwak");
	}
}
4)FlyBehaviour.java
package headfirst.strategy;

public interface FlyBehavior {
	public void fly();
}
5)FlyNoWay.java
package headfirst.strategy;
public class FlyNoWay implements FlyBehavior {
	public void fly() {
		System.out.println("I can't fly");
	}
}
6)FlyRocketPowered.java
package headfirst.strategy;
public class FlyRocketPowered implements FlyBehavior {
	public void fly() {
		System.out.println("I'm flying with a rocket");  
  }  }
7)FlyWithWings.java
package headfirst.strategy;
public class FlyWithWings implements FlyBehavior {
	public void fly() {
		System.out.println("I'm flying!!");
	}
}
8)MallardDuck.java
package headfirst.strategy;
public class MallardDuck extends Duck {
	public MallardDuck() {
		quackBehavior = new Quack();
                flyBehavior = new FlyWithWings();
	}
	public void display() {
		System.out.println("I'm a real Mallard duck");
	}
}
9)MiniDuckSimulator.java
package headfirst.strategy;
public class MiniDuckSimulator {
	public static void main(String[] args) {
		MallardDuck	mallard = new MallardDuck();
		RubberDuck	rubberDuckie = new RubberDuck();
		DecoyDuck	decoy = new DecoyDuck();
		ModelDuck	model = new ModelDuck();

		mallard.performQuack();
		rubberDuckie.performQuack();
		decoy.performQuack();
		model.performFly();	
		model.setFlyBehavior(new FlyRocketPowered());
		model.performFly();
	}
}
10)MiniDuckSimulator1.java
package headfirst.strategy;
public class MiniDuckSimulator1 {
	public static void main(String[] args) {
		Duck mallard = new MallardDuck();
		mallard.performQuack();
		mallard.performFly();
   
		Duck model = new ModelDuck();
		model.performFly();
		model.setFlyBehavior(new FlyRocketPowered());
		model.performFly();
	}
}
11)ModelDuck.java
package headfirst.strategy;
public class ModelDuck extends Duck {
	public ModelDuck() {
		flyBehavior = new FlyNoWay();
		quackBehavior = new Quack();
	}
	public void display() {
		System.out.println("I'm a model duck");
	}
}
12)MuteQuack.java
package headfirst.strategy;
public class MuteQuack implements QuackBehavior {
	public void quack() {
		System.out.println("<< Silence >>");
	}
}
13)Quack.java
package headfirst.strategy;
public class Quack implements QuackBehavior {
	public void quack() {
		System.out.println("Quack");
	}
}
14)QuackBehaviour.java
package headfirst.strategy;
public interface QuackBehavior {
	public void quack();
}
15)RedHeadDuck.java
package headfirst.strategy;
public class RedHeadDuck extends Duck {
	public RedHeadDuck() {
		flyBehavior = new FlyWithWings();
		quackBehavior = new Quack();
	}
	public void display() {
		System.out.println("I'm a real Red Headed duck");
	}
}
16)RubberDuck.java
package headfirst.strategy;
public class RubberDuck extends Duck {
	public RubberDuck() {
		flyBehavior = new FlyNoWay();
		quackBehavior = new Squeak();
	}
	public void display() {
		System.out.println("I'm a rubber duckie");
	}
}
17)Squeak.java
package headfirst.strategy;
public class Squeak implements QuackBehavior {
	public void quack() {
		System.out.println("Squeak");
	}
}
             State Pattern
●	GumBallState
1)GumBallMachine.java
package headfirst.state.gumballstate;
public class GumballMachine {
	State soldOutState;
	State noQuarterState;
	State hasQuarterState;
	State soldState;
	State state = soldOutState;
	int count = 0;
	public GumballMachine(int numberGumballs) {
		soldOutState = new SoldOutState(this);
		noQuarterState = new NoQuarterState(this);
		hasQuarterState = new HasQuarterState(this);
		soldState = new SoldState(this);
		this.count = numberGumballs;
 		if (numberGumballs > 0) {
			state = noQuarterState;
		} 
	}
	public void insertQuarter() {
		state.insertQuarter();
	}
	public void ejectQuarter() {
		state.ejectQuarter();
	}
	public void turnCrank() {
		state.turnCrank();
		state.dispense();
	}
	void setState(State state) {
		this.state = state;
	}
	void releaseBall() {
		System.out.println("A gumball comes rolling out the slot...");
		if (count != 0) {
			count = count - 1;
		}
	} 
	int getCount() {
		return count;
	}
	void refill(int count) {
		this.count = count;
		state = noQuarterState;
	}
    public State getState() {
        return state;
    }
    public State getSoldOutState() {
        return soldOutState;
    }
    public State getNoQuarterState() {
        return noQuarterState;
    }
    public State getHasQuarterState() {
        return hasQuarterState;
    }
    public State getSoldState() {
        return soldState;
    }
	public String toString() {
		StringBuffer result = new StringBuffer();
		result.append("\nMighty Gumball, Inc.");
		result.append("\nJava-enabled Standing Gumball Model #2004");
		result.append("\nInventory: " + count + " gumball");
		if (count != 1) {
			result.append("s");
		}
		result.append("\n");
		result.append("Machine is " + state + "\n");
		return result.toString();
	}
}
2)GumBallMachineStateDrive.java
package headfirst.state.gumballstate;
public class GumballMachineTestDrive {
	public static void main(String[] args) {
		GumballMachine gumballMachine = new GumballMachine(5);
		System.out.println(gumballMachine);
		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();
		System.out.println(gumballMachine);
		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();
		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();
		System.out.println(gumballMachine);
	}
}
3)HasQuarterState.java
package headfirst.state.gumballstate;
import java.util.Random;
public class HasQuarterState implements State {
	GumballMachine gumballMachine;
	public HasQuarterState(GumballMachine gumballMachine) {
		this.gumballMachine = gumballMachine;
	}
	public void insertQuarter() {
		System.out.println("You can't insert another quarter");
	}
	public void ejectQuarter() {
		System.out.println("Quarter returned");
		gumballMachine.setState(gumballMachine.getNoQuarterState());
	}
	public void turnCrank() {
		System.out.println("You turned...");
		gumballMachine.setState(gumballMachine.getSoldState());
	}
    public void dispense() {
        System.out.println("No gumball dispensed");
    }
	public String toString() {
		return "waiting for turn of crank";
	}
}
4)NoQuarterState.java
package headfirst.state.gumballstate;
public class NoQuarterState implements State {
    GumballMachine gumballMachine;
    public NoQuarterState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }
	public void insertQuarter() {
		System.out.println("You inserted a quarter");
		gumballMachine.setState(gumballMachine.getHasQuarterState());
	}
	public void ejectQuarter() {
		System.out.println("You haven't inserted a quarter");
	}
	public void turnCrank() {
		System.out.println("You turned, but there's no quarter");
	 }
	public void dispense() {
		System.out.println("You need to pay first");
	} 
	public String toString() {
		return "waiting for quarter";
	}
}
5)SoldOutState.java
package headfirst.state.gumballstate;
public class SoldOutState implements State {
    GumballMachine gumballMachine;
    public SoldOutState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }
	public void insertQuarter() {
		System.out.println("You can't insert a quarter, the machine is sold out");
	}
	public void ejectQuarter() {
		System.out.println("You can't eject, you haven't inserted a quarter yet");
	}
	public void turnCrank() {
		System.out.println("You turned, but there are no gumballs");
	}
	public void dispense() {
		System.out.println("No gumball dispensed");
	}
	public String toString() {
		return "sold out";
	}
}
6)SoldState.java
package headfirst.state.gumballstate;
public class SoldState implements State {
    GumballMachine gumballMachine;
    public SoldState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }
	public void insertQuarter() {
		System.out.println("Please wait, we're already giving you a gumball");
	}
	public void ejectQuarter() {
		System.out.println("Sorry, you already turned the crank");
	}
	public void turnCrank() {
		System.out.println("Turning twice doesn't get you another gumball!");
	}
	public void dispense() {
		gumballMachine.releaseBall();
		if (gumballMachine.getCount() > 0) {
			gumballMachine.setState(gumballMachine.getNoQuarterState());
		} else {
			System.out.println("Oops, out of gumballs!");
			gumballMachine.setState(gumballMachine.getSoldOutState());
		}
	}
	public String toString() {
		return "dispensing a gumball";
	}
}
7)State.java
package headfirst.state.gumballstate;
public interface State { 
public void insertQuarter();
	public void ejectQuarter();
	public void turnCrank();
	public void dispense();
}
—---------------------------------------------------------------------
●	GumBallStateWinner
1)GumBallMachine.java
package headfirst.state.gumballstatewinner;
public class GumballMachine {
	State soldOutState;
	State noQuarterState;
	State hasQuarterState;
	State soldState;
	State winnerState;
	State state = soldOutState;
	int count = 0;
	public GumballMachine(int numberGumballs) {
		soldOutState = new SoldOutState(this);
		noQuarterState = new NoQuarterState(this);
		hasQuarterState = new HasQuarterState(this);
		soldState = new SoldState(this);
		winnerState = new WinnerState(this);
		this.count = numberGumballs;
 		if (numberGumballs > 0) {
			state = noQuarterState;
		} 
	}
 public void insertQuarter() {
		state.insertQuarter();
	} 
	public void ejectQuarter() {
		state.ejectQuarter();
	}
	public void turnCrank() {
		state.turnCrank();
		state.dispense();
	}
	void setState(State state) {
		this.state = state;
	}
	void releaseBall() {
		System.out.println("A gumball comes rolling out the slot...");
		if (count != 0) {
			count = count - 1;
		}
	}
	int getCount() {
		return count;
	}
	void refill(int count) {
		this.count = count;
		state = noQuarterState;
	}
    public State getState() {
        return state;
    }
    public State getSoldOutState() {
   return soldOutState;
    }
    public State getNoQuarterState() {
        return noQuarterState;
    }
    public State getHasQuarterState() {
        return hasQuarterState;
    }
    public State getSoldState() {
        return soldState;
    }
    public State getWinnerState() {
        return winnerState;
    }
	public String toString() {
		StringBuffer result = new StringBuffer();
		result.append("\nMighty Gumball, Inc.");
		result.append("\nJava-enabled Standing Gumball Model #2004");
		result.append("\nInventory: " + count + " gumball");
		if (count != 1) {
			result.append("s");
		}
		result.append("\n");
		result.append("Machine is " + state + "\n");
		return result.toString();
	}
}
2)GumBallMachineTestDrive.java
package headfirst.state.gumballstatewinner;
public class GumballMachineTestDrive {
	public static void main(String[] args) {
		GumballMachine gumballMachine = 
			new GumballMachine(10);
		System.out.println(gumballMachine);
		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();
		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();
		System.out.println(gumballMachine);
		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();
		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();
		System.out.println(gumballMachine);
		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();
		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();
		System.out.println(gumballMachine);
		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();
		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();
		System.out.println(gumballMachine);
		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();
		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();
		System.out.println(gumballMachine);
	}
}
3)HasQuarterState.java
package headfirst.state.gumballstatewinner;
import java.util.Random;
public class HasQuarterState implements State {
	Random randomWinner = new Random(System.currentTimeMillis());
	GumballMachine gumballMachine;
	public HasQuarterState(GumballMachine gumballMachine) {
		this.gumballMachine = gumballMachine;
	}
	public void insertQuarter() {
		System.out.println("You can't insert another quarter");
	}
	public void ejectQuarter() {
		System.out.println("Quarter returned");
		gumballMachine.setState(gumballMachine.getNoQuarterState());
	}
	public void turnCrank() {
		System.out.println("You turned...");
		int winner = randomWinner.nextInt(10);
		if ((winner == 0) && (gumballMachine.getCount() > 1)) {
			gumballMachine.setState(gumballMachine.getWinnerState());
		} else {
			gumballMachine.setState(gumballMachine.getSoldState());
		}
	}
public void dispense() {
        System.out.println("No gumball dispensed");
    } 
	public String toString() {
		return "waiting for turn of crank";
	}
}
4)NoQuarterState.java
package headfirst.state.gumballstatewinner;
public class NoQuarterState implements State {
    GumballMachine gumballMachine;
    public NoQuarterState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }
	public void insertQuarter() {
		System.out.println("You inserted a quarter");
		gumballMachine.setState(gumballMachine.getHasQuarterState());
	}
	public void ejectQuarter() {
		System.out.println("You haven't inserted a quarter");
	}
	public void turnCrank() {
		System.out.println("You turned, but there's no quarter");
	 }
	public void dispense() {
		System.out.println("You need to pay first");
	} 
	public String toString() {
		return "waiting for quarter";
	}
}
5)SoldOutState.java
package headfirst.state.gumballstatewinner;
public class SoldOutState implements State {
    GumballMachine gumballMachine;
    public SoldOutState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }
	public void insertQuarter() {
		System.out.println("You can't insert a quarter, the machine is sold out");
	}
	public void ejectQuarter() {
		System.out.println("You can't eject, you haven't inserted a quarter yet");
	}
	public void turnCrank() {
		System.out.println("You turned, but there are no gumballs");
	}
	public void dispense() {
		System.out.println("No gumball dispensed");
	}
	public String toString() {
		return "sold out";
	}
}
6)SoldState.java
package headfirst.state.gumballstatewinner;
public class SoldState implements State {
    GumballMachine gumballMachine;
 
public SoldState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }       
	public void insertQuarter() {
		System.out.println("Please wait, we're already giving you a gumball");
	}
	public void ejectQuarter() {
		System.out.println("Sorry, you already turned the crank");
	}
	public void turnCrank() {
		System.out.println("Turning twice doesn't get you another gumball!");
	}
	public void dispense() {
		gumballMachine.releaseBall();
		if (gumballMachine.getCount() > 0) {
			gumballMachine.setState(gumballMachine.getNoQuarterState());
		} else {
			System.out.println("Oops, out of gumballs!");
		gumballMachine.setState(gumballMachine.getSoldOutState());
		}
	} 
	public String toString() {
		return "dispensing a gumball";
	}
}
7)State.java
package headfirst.state.gumballstatewinner;
public interface State {
	public void insertQuarter();
	public void ejectQuarter();
	public void turnCrank();
	public void dispense();
}
8)WinnerState.java
package headfirst.state.gumballstatewinner;
public class WinnerState implements State {
    GumballMachine gumballMachine;
    public WinnerState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }
	public void insertQuarter() {
System.out.println("Please wait, we're already giving you a Gumball");
	}
	public void ejectQuarter() {
System.out.println("Please wait, we're already giving you a Gumball");
	}
	public void turnCrank() {
System.out.println("Turning again doesn't get you another gumball!");
	}
	public void dispense() {
System.out.println("YOU'RE A WINNER! You get two gumballs for your quarter");
		gumballMachine.releaseBall();
		if (gumballMachine.getCount() == 0) {
		gumballMachine.setState(gumballMachine.getSoldOutState());
		} else {
			gumballMachine.releaseBall();
			if (gumballMachine.getCount() > 0) {
		gumballMachine.setState(gumballMachine.getNoQuarterState());
			} else {
            	System.out.println("Oops, out of gumballs!");
		gumballMachine.setState(gumballMachine.getSoldOutState());
			}
		}
	} 
	public String toString() {
		return "despensing two gumballs for your quarter, because YOU'RE A WINNER!";
	}
}

       Singleton Pattern
●	Chocolate
1)ChocolateBoiler.java
package headfirst.singleton.chocolate;
public class ChocolateBoiler {
	private boolean empty;
	private boolean boiled;
	private static ChocolateBoiler uniqueInstance;
	private ChocolateBoiler() {
		empty = true;
		boiled = false;
	}
	public static ChocolateBoiler getInstance() {
		if (uniqueInstance == null) {
	System.out.println("Creating unique instance of Chocolate Boiler");
			uniqueInstance = new ChocolateBoiler();
		}
		System.out.println("Returning instance of Chocolate Boiler");
		return uniqueInstance;
	}
	public void fill() {
		if (isEmpty()) {
			empty = false;
			boiled = false;
			// fill the boiler with a milk/chocolate mixture
		}
	}
	public void drain() {
		if (!isEmpty() && isBoiled()) {
			// drain the boiled milk and chocolate
			empty = true;
		}
	}
	public void boil() {
		if (!isEmpty() && !isBoiled()) {
			// bring the contents to a boil
			boiled = true;
		}
	}
	public boolean isEmpty() {
		return empty;
	}
    public boolean isBoiled() {
	return boiled;
	}
}
2)ChocolateController.java
package headfirst.singleton.chocolate;
public class ChocolateController {
	public static void main(String args[]) {
		ChocolateBoiler boiler = ChocolateBoiler.getInstance();
		boiler.fill();
		boiler.boil();
		boiler.drain();
		// will return the existing instance
		ChocolateBoiler boiler2 = ChocolateBoiler.getInstance();
	}
}
—---------------------------------------------------------------------
●	DCL
1)Singleton.java
package headfirst.singleton.dcl;
//
// Danger!  This implementation of Singleton not
// guaranteed to work prior to Java 5
//
public class Singleton {
	private volatile static Singleton uniqueInstance;
	private Singleton() {}
	public static Singleton getInstance() {
		if (uniqueInstance == null) {
			synchronized (Singleton.class) {
			if (uniqueInstance == null) {
					uniqueInstance = new Singleton();
				}
			}
		}
		return uniqueInstance;
	}
}
2)SingletonClient.java
package headfirst.singleton.dcl;
public class SingletonClient {
	public static void main(String[] args) {
		Singleton singleton = Singleton.getInstance();
	}
}
—-------------------------------------------------------------------
●	ThreadSafe
1)Singleton.java
package headfirst.singleton.threadsafe;
public class Singleton {
	private static Singleton uniqueInstance;
	// other useful instance variables here
	private Singleton() {}
	public static synchronized Singleton getInstance() {
		if (uniqueInstance == null) {
			uniqueInstance = new Singleton();
		}
		return uniqueInstance;
	}// other useful methods here     }
—--------------------------------------------------------------------
●	Classic
1)Singleton.java
package headfirst.singleton.classic;
// NOTE: This is not thread safe!
public class Singleton {
	private static Singleton uniqueInstance;
	// other useful instance variables here
	private Singleton() {}
	public static Singleton getInstance() {
		if (uniqueInstance == null) {
			uniqueInstance = new Singleton();
		}
		return uniqueInstance;
	}
	// other useful methods here
}
—----------------------------------------------------------------------
●	Stat
1)Singleton.java
package headfirst.singleton.stat;
public class Singleton {
	private static Singleton uniqueInstance = new Singleton();
	private Singleton() {}
	public static Singleton getInstance() {
		return uniqueInstance;

	}
}
2)SingletonClient.java
package headfirst.singleton.stat;
public class SingletonClient {
	public static void main(String[] args) {
		Singleton singleton = Singleton.getInstance();
	}
}
           Iterator Pattern
●	DinerMergerCafe
1)AlternatingDinerMenuIterator.java
package headfirst.iterator.dinermergercafe;
import java.util.Iterator;
import java.util.Calendar;
public class AlternatingDinerMenuIterator implements Iterator {
	MenuItem[] items;
	int position;
	public AlternatingDinerMenuIterator(MenuItem[] items) {
		this.items = items;
		Calendar rightNow = Calendar.getInstance();
		position = rightNow.DAY_OF_WEEK % 2;
	}
	public Object next() {
		MenuItem menuItem = items[position];
		position = position + 2;
		return menuItem;
	}
	public boolean hasNext() {
		if (position >= items.length || items[position] == null) {
			return false;
		} else {
			return true;
		}
	}
	public void remove() {
		throw new UnsupportedOperationException(
		"Alternating Diner Menu Iterator does not support remove()");
	}
}
2)CafeMenu.java
package headfirst.iterator.dinermergercafe;
import java.util.*;
public class CafeMenu implements Menu {
	Hashtable menuItems = new Hashtable();
	public CafeMenu() {
	addItem("Veggie Burger and Air Fries","Veggie burger on a whole wheat bun, lettuce, tomato, and fries",true, 3.99);
	addItem("Soup of the day","A cup of the soup of the day, with a side salad",false, 3.69);
	addItem("Burrito","A large burrito, with whole pinto beans, salsa, guacamole",true, 4.29);
	}
	public void addItem(String name, String description, 
	    boolean vegetarian, double price) 
	{
MenuItem menuItem = new MenuItem(name, description, vegetarian, price);
		menuItems.put(menuItem.getName(), menuItem);
	} 
	public Hashtable getItems() {
		return menuItems;
	}
	public Iterator createIterator() {
		return menuItems.values().iterator();
	}
}
3)DinerMenu.java
package headfirst.iterator.dinermergercafe;
import java.util.Iterator;
public class DinerMenu implements Menu {
	static final int MAX_ITEMS = 6;
	int numberOfItems = 0;
	MenuItem[] menuItems;
	public DinerMenu() {
		menuItems = new MenuItem[MAX_ITEMS];
	addItem("Vegetarian BLT","(Fakin') Bacon with lettuce & tomato on whole wheat", true, 2.99);
	addItem("BLT","Bacon with lettuce & tomato on whole wheat", false, 2.99);
	addItem("Soup of the day","Soup of the day, with a side of potato salad", false, 3.29);
	addItem("Hotdog","A hot dog, with saurkraut, relish, onions, topped with cheese",false, 3.05);
	addItem("Steamed Veggies and Brown Rice","A medly of steamed vegetables over brown rice", true, 3.99);
	addItem("Pasta","Spaghetti with Marinara Sauce, and a slice of sourdough bread",true, 3.89);
	} 
	public void addItem(String name, String description, 
	                     boolean vegetarian, double price) 
	{
MenuItem menuItem = new MenuItem(name, description, vegetarian, price);
		if (numberOfItems >= MAX_ITEMS) {
	System.err.println("Sorry, menu is full!  Can't add item to menu");
		} else {
			menuItems[numberOfItems] = menuItem;
			numberOfItems = numberOfItems + 1;
		}
	}
	public MenuItem[] getMenuItems() {
		return menuItems;
	}
	public Iterator createIterator() {
		return new DinerMenuIterator(menuItems);
		//return new AlternatingDinerMenuIterator(menuItems);
	}
	// other menu methods here
}
4)DinerMenuIterator.java
package headfirst.iterator.dinermergercafe;
import java.util.Iterator;
public class DinerMenuIterator implements Iterator {
	MenuItem[] list;
	int position = 0;
	public DinerMenuIterator(MenuItem[] list) {
		this.list = list;
	}
public Object next() {
		MenuItem menuItem = list[position];
		position = position + 1;
		return menuItem;
	} 
	public boolean hasNext() {
		if (position >= list.length || list[position] == null) {
			return false;
		} else {
			return true;
		}
	}
	public void remove() {
		if (position <= 0) {
			throw new IllegalStateException
	("You can't remove an item until you've done at least one next()");
		}
		if (list[position-1] != null) {
			for (int i = position-1; i < (list.length-1); i++) {
				list[i] = list[i+1];
			}
			list[list.length-1] = null;
		}
	}
}
5)Menu.java
package headfirst.iterator.dinermergercafe;
import java.util.Iterator;
public interface Menu {
public Iterator createIterator();
}
6)MenuItem.java
package headfirst.iterator.dinermergercafe;
public class MenuItem {
	String name;
	String description;
	boolean vegetarian;
	double price;
	public MenuItem(String name, String description, 
	                boolean vegetarian,double price) 
	{
		this.name = name;
		this.description = description;
		this.vegetarian = vegetarian;
		this.price = price;
	}
	public String getName() {
		return name;
	}
	public String getDescription() {
		return description;
	}
	public double getPrice() {
		return price;
	}
	public boolean isVegetarian() {
		return vegetarian;
	}  }
7)MenuTestDrive.java
package headfirst.iterator.dinermergercafe;
import java.util.*;
public class MenuTestDrive {
	public static void main(String args[]) {
		PancakeHouseMenu pancakeHouseMenu = new PancakeHouseMenu();
		DinerMenu dinerMenu = new DinerMenu();
		CafeMenu cafeMenu = new CafeMenu();
		Waitress waitress = new Waitress(pancakeHouseMenu, dinerMenu, cafeMenu);
		waitress.printMenu();
		waitress.printVegetarianMenu();
	System.out.println("\nCustomer asks, is the Hotdog vegetarian?");
		System.out.print("Waitress says: ");
		if (waitress.isItemVegetarian("Hotdog")) {
			System.out.println("Yes");
		} else {
			System.out.println("No");
		}
	System.out.println("\nCustomer asks, are the Waffles vegetarian?");
		System.out.print("Waitress says: ");
		if (waitress.isItemVegetarian("Waffles")) {
			System.out.println("Yes");
		} else {
			System.out.println("No");
		}
	}
}
8)PancakehouseMenu.java
package headfirst.iterator.dinermergercafe;
import java.util.ArrayList;
import java.util.Iterator;
public class PancakeHouseMenu implements Menu {
	ArrayList menuItems;
	public PancakeHouseMenu() {
		menuItems = new ArrayList();
		addItem("K&B's Pancake Breakfast", "Pancakes with scrambled eggs, and toast",true,2.99);
		addItem("Regular Pancake Breakfast","Pancakes with fried eggs, sausage",false,2.99);
		addItem("Blueberry Pancakes","Pancakes made with fresh blueberries, and blueberry syrup",true,	3.49);
		addItem("Waffles","Waffles, with your choice of blueberries or strawberries",true,3.59);
	}
	public void addItem(String name, String description,
	                    boolean vegetarian, double price)
	{
		MenuItem menuItem = new MenuItem(name, description, vegetarian, price);
		menuItems.add(menuItem);
	}
	public ArrayList getMenuItems() {
		return menuItems;
	}
	public Iterator createIterator() {
		return menuItems.iterator();
	}
	// other menu methods here
}
9)Waitress.java
package headfirst.iterator.dinermergercafe;
import java.util.Iterator;
public class Waitress {
	Menu pancakeHouseMenu;
	Menu dinerMenu;
	Menu cafeMenu;
public Waitress(Menu pancakeHouseMenu, Menu dinerMenu, Menu cafeMenu) {
		this.pancakeHouseMenu = pancakeHouseMenu;
		this.dinerMenu = dinerMenu;
		this.cafeMenu = cafeMenu;
	} 
	public void printMenu() {
		Iterator pancakeIterator = pancakeHouseMenu.createIterator();
		Iterator dinerIterator = dinerMenu.createIterator();
		Iterator cafeIterator = cafeMenu.createIterator();
		System.out.println("MENU\n----\nBREAKFAST");
		printMenu(pancakeIterator);
		System.out.println("\nLUNCH");
		printMenu(dinerIterator);
		System.out.println("\nDINNER");
		printMenu(cafeIterator);
	}
	private void printMenu(Iterator iterator) {
		while (iterator.hasNext()) {
			MenuItem menuItem = (MenuItem)iterator.next();
			System.out.print(menuItem.getName() + ", ");
			System.out.print(menuItem.getPrice() + " -- ");
			System.out.println(menuItem.getDescription());
		}
	} 
	public void printVegetarianMenu() {
		System.out.println("\nVEGETARIAN MENU\n---------------");
		printVegetarianMenu(pancakeHouseMenu.createIterator());
		printVegetarianMenu(dinerMenu.createIterator());
		printVegetarianMenu(cafeMenu.createIterator());
	}
	public boolean isItemVegetarian(String name) {
		Iterator pancakeIterator = pancakeHouseMenu.createIterator();
		if (isVegetarian(name, pancakeIterator)) {
			return true;
		}
		Iterator dinerIterator = dinerMenu.createIterator();
		if (isVegetarian(name, dinerIterator)) {
			return true;
		}
		Iterator cafeIterator = cafeMenu.createIterator();
		if (isVegetarian(name, cafeIterator)) {
			return true;
		}
		return false;
	}
	private void printVegetarianMenu(Iterator iterator) {
		while (iterator.hasNext()) {
			MenuItem menuItem = (MenuItem)iterator.next();
			if (menuItem.isVegetarian()) {
				System.out.print(menuItem.getName() + ", ");
				System.out.print(menuItem.getPrice() + " -- ");
				System.out.println(menuItem.getDescription());
			}
		}
	}
	private boolean isVegetarian(String name, Iterator iterator) {
		while (iterator.hasNext()) {
			MenuItem menuItem = (MenuItem)iterator.next();
			if (menuItem.getName().equals(name)) {
				if (menuItem.isVegetarian()) {
					return true;
				}
			}
		}
		return false;
	}
}
//^^ WaitressCafeMain
//^^ WaitressCafe
—---------------------------------------------------------------------
●	Transition
1)Menu.java
package headfirst.iterator.transition;
import java.util.Iterator;
public interface Menu {
	public Iterator createIterator();
}
2)MenuItem.java
package headfirst.iterator.transition;
public class MenuItem {
	String name;
	String description;
	boolean vegetarian;
	double price; 
	public MenuItem(String name, String description, 
	                boolean vegetarian,double price) 
	{
		this.name = name;
		this.description = description;
		this.vegetarian = vegetarian;
		this.price = price;
	}
	public String getName() {
		return name;
	}
	public String getDescription() {
		return description;
	}
	public double getPrice() {
		return price;
	}
	public boolean isVegetarian() {
		return vegetarian;
	}
}
3)Waitress.java
package headfirst.iterator.transition;
import java.util.*;  
public class Waitress {
	ArrayList menus;  
	public Waitress(ArrayList menus) {
		this.menus = menus;
	}
	public void printMenu() {
		Iterator menuIterator = menus.iterator();
		while(menuIterator.hasNext()) {
			Menu menu = (Menu)menuIterator.next();
			printMenu(menu.createIterator());
		}
	}
	void printMenu(Iterator iterator) {
		while (iterator.hasNext()) {
			MenuItem menuItem = (MenuItem)iterator.next();
			System.out.print(menuItem.getName() + ", ");
			System.out.print(menuItem.getPrice() + " -- ");
			System.out.println(menuItem.getDescription());
		}
	}
}
—----------------------------------------------------------------------
●	DinerMerger1
1)AlternatingDinerMenuIterator.java
package headfirst.iterator.dinermergeri;
import java.util.Iterator;
import java.util.Calendar;
public class AlternatingDinerMenuIterator implements Iterator {
	MenuItem[] items;
	int position;

	public AlternatingDinerMenuIterator(MenuItem[] items) {
		this.items = items;
		Calendar rightNow = Calendar.getInstance();
		position = rightNow.DAY_OF_WEEK % 2;
	}
	public Object next() {
		MenuItem menuItem = items[position];
		position = position + 2;
		return menuItem;
	}
	public boolean hasNext() {
		if (position >= items.length || items[position] == null) {
			return false;
		} else {
			return true;
		}
	}
	public void remove() {
		throw new UnsupportedOperationException(
		"Alternating Diner Menu Iterator does not support remove()");
	}
}
2)DinerMenu.java
package headfirst.iterator.dinermergeri;
import java.util.Iterator;
public class DinerMenu implements Menu {
	static final int MAX_ITEMS = 6;
	int numberOfItems = 0;
	MenuItem[] menuItems;
	public DinerMenu() {
		menuItems = new MenuItem[MAX_ITEMS];
		addItem("Vegetarian BLT","(Fakin') Bacon with lettuce & tomato on whole wheat", true, 2.99);
		addItem("BLT","Bacon with lettuce & tomato on whole wheat", false, 2.99);
		addItem("Soup of the day","Soup of the day, with a side of potato salad", false, 3.29);
		addItem("Hotdog","A hot dog, with saurkraut, relish, onions, topped with cheese",false, 3.05);
		addItem("Steamed Veggies and Brown Rice","Steamed vegetables over brown rice", true, 3.99);
		addItem("Pasta","Spaghetti with Marinara Sauce, and a slice of sourdough bread",true, 3.89);
	}
	public void addItem(String name, String description, 
	                     boolean vegetarian, double price) 
	{
		MenuItem menuItem = new MenuItem(name, description, vegetarian, price);
		if (numberOfItems >= MAX_ITEMS) {
	System.err.println("Sorry, menu is full!  Can't add item to menu");
		} else {
			menuItems[numberOfItems] = menuItem;
			numberOfItems = numberOfItems + 1;
		}
	}
	public MenuItem[] getMenuItems() {
		return menuItems;
	}
	public Iterator createIterator() {
		return new DinerMenuIterator(menuItems);
		//return new AlternatingDinerMenuIterator(menuItems);
	}
	// other menu methods here
}
3)DinerMenuIterator.java
package headfirst.iterator.dinermergeri; 
import java.util.Iterator;
public class DinerMenuIterator implements Iterator {
	MenuItem[] list;
	int position = 0;
	public DinerMenuIterator(MenuItem[] list) {
		this.list = list;
	}
	public Object next() {
		MenuItem menuItem = list[position];
		position = position + 1;
		return menuItem;
	}
	public boolean hasNext() {
		if (position >= list.length || list[position] == null) {
			return false;
		} else {
			return true;
		}
	}
	public void remove() {
		if (position <= 0) {
			throw new IllegalStateException
	("You can't remove an item until you've done at least one next()");
		}
		if (list[position-1] != null) {
			for (int i = position-1; i < (list.length-1); i++) {
				list[i] = list[i+1];
			}
			list[list.length-1] = null;
		}
	}
}
4)Menu.java
package headfirst.iterator.dinermergeri;
import java.util.Iterator;
public interface Menu {
	public Iterator createIterator();
}
5)MenuItem.java
package headfirst.iterator.dinermergeri;
public class MenuItem {
	String name;
	String description;
	boolean vegetarian;
	double price;
	public MenuItem(String name,String description, 
	                boolean vegetarian,double price) 
	{
		this.name = name;
		this.description = description;
		this.vegetarian = vegetarian;
		this.price = price;
	}
	public String getName() {
		return name;
	}
	public String getDescription() {
		return description;
	}
	public double getPrice() {
		return price;
	}
	public boolean isVegetarian() {
		return vegetarian;
	}
}
6)MenuTestDrive.java
package headfirst.iterator.dinermergeri;
import java.util.*;
public class MenuTestDrive {
	public static void main(String args[]) {
		PancakeHouseMenu pancakeHouseMenu = new PancakeHouseMenu();
		DinerMenu dinerMenu = new DinerMenu();
	Waitress waitress = new Waitress(pancakeHouseMenu, dinerMenu);
		waitress.printMenu();
		waitress.printVegetarianMenu();
	System.out.println("\nCustomer asks, is the Hotdog vegetarian?");
		System.out.print("Waitress says: ");
		if (waitress.isItemVegetarian("Hotdog")) {
			System.out.println("Yes");
		} else {
			System.out.println("No");
		}
	System.out.println("\nCustomer asks, are the Waffles vegetarian?");
		System.out.print("Waitress says: ");
		if (waitress.isItemVegetarian("Waffles")) {
			System.out.println("Yes");
		} else {
			System.out.println("No");
		}
	}
}
7)PancakeHouseMenu.java
package headfirst.iterator.dinermergeri;
import java.util.ArrayList;
import java.util.Iterator;
public class PancakeHouseMenu implements Menu {
	ArrayList menuItems;
	public PancakeHouseMenu() {
		menuItems = new ArrayList();
		addItem("K&B's Pancake Breakfast", "Pancakes with scrambled eggs, and toast",true,2.99);
		addItem("Regular Pancake Breakfast","Pancakes with fried eggs, sausage",false,2.99);
		addItem("Blueberry Pancakes","Pancakes made with fresh blueberries, and blueberry syrup",true,	3.49);
		addItem("Waffles","Waffles, with your choice of blueberries or strawberries",true,3.59);
	}
	public void addItem(String name, String description,
	                    boolean vegetarian, double price)
	{
		MenuItem menuItem = new MenuItem(name, description, vegetarian, price);
		menuItems.add(menuItem);
	}
	public ArrayList getMenuItems() {
		return menuItems;
	}
	public Iterator createIterator() {
		return menuItems.iterator();
	}
	// other menu methods here
}
8)Waitress.java
package headfirst.iterator.dinermergeri;
import java.util.Iterator;
public class Waitress {
	Menu pancakeHouseMenu;
	Menu dinerMenu;
	public Waitress(Menu pancakeHouseMenu, Menu dinerMenu) {
		this.pancakeHouseMenu = pancakeHouseMenu;
		this.dinerMenu = dinerMenu;
	}
	public void printMenu() {
		Iterator pancakeIterator = pancakeHouseMenu.createIterator();
		Iterator dinerIterator = dinerMenu.createIterator();

		System.out.println("MENU\n----\nBREAKFAST");
		printMenu(pancakeIterator);
		System.out.println("\nLUNCH");
		printMenu(dinerIterator);
	}
	private void printMenu(Iterator iterator) {
		while (iterator.hasNext()) {
			MenuItem menuItem = (MenuItem)iterator.next();
			System.out.print(menuItem.getName() + ", ");
			System.out.print(menuItem.getPrice() + " -- ");
			System.out.println(menuItem.getDescription());
		}
	}
	public void printVegetarianMenu() {
		System.out.println("\nVEGETARIAN MENU\n----\nBREAKFAST");
		printVegetarianMenu(pancakeHouseMenu.createIterator());
		System.out.println("\nLUNCH");
		printVegetarianMenu(dinerMenu.createIterator());
	}
	public boolean isItemVegetarian(String name) {
		Iterator pancakeIterator = pancakeHouseMenu.createIterator();
		if (isVegetarian(name, pancakeIterator)) {
			return true;
		}
		Iterator dinerIterator = dinerMenu.createIterator();
		if (isVegetarian(name, dinerIterator)) {
			return true;
		}
		return false;
	}
	private void printVegetarianMenu(Iterator iterator) {
		while (iterator.hasNext()) {
			MenuItem menuItem = (MenuItem)iterator.next();
			if (menuItem.isVegetarian()) {
				System.out.print(menuItem.getName());
				System.out.println("\t\t" + menuItem.getPrice());
			System.out.println("\t" + menuItem.getDescription());
			}
		}
	}
private boolean isVegetarian(String name, Iterator iterator) {
		while (iterator.hasNext()) {
			MenuItem menuItem = (MenuItem)iterator.next();
			if (menuItem.getName().equals(name)) {
				if (menuItem.isVegetarian()) {
					return true;
				}
			}
		}
		return false;
	}
}
—-----------------------------------------------------------------------
●	Transition1
1)Menu.java
//package headfirst.iterator.transition;
import java.util.Iterator;
public interface Menu {
	public Iterator createIterator();   }
2)MenuItem.java
//package headfirst.iterator.transition;
public class MenuItem {
	String name;
	String description;
	boolean vegetarian;
	double price;
	public MenuItem(String name,String description, 
	                boolean vegetarian,double price) 
	{
		this.name = name;
		this.description = description;
		this.vegetarian = vegetarian;
		this.price = price;
	}
	public String getName() {
		return name;
	}
	public String getDescription() {
		return description;
	}
	public double getPrice() {
		return price;
	}
	public boolean isVegetarian() {
		return vegetarian;
	}
}

3)Waitress.java
//package headfirst.iterator.transition;
import java.util.*;   
public class Waitress {
	ArrayList menus;
	public Waitress(ArrayList menus) {
		this.menus = menus;
	}
	public void printMenu() {
		Iterator menuIterator = menus.iterator();
		while(menuIterator.hasNext()) {
			Menu menu = (Menu)menuIterator.next();
			printMenu(menu.createIterator());
		}
	}
	void printMenu(Iterator iterator) {
		while (iterator.hasNext()) {
			MenuItem menuItem = (MenuItem)iterator.next();
			System.out.print(menuItem.getName() + ", ");
			System.out.print(menuItem.getPrice() + " -- ");
			System.out.println(menuItem.getDescription());
		}
	}
} 

  			Observer Pattern
●	Weather
1)CurrentConditionsDisplay.java
package headfirst.observer.weather;
public class CurrentConditionsDisplay implements Observer,DisplayElement {
	private float temperature;
	private float humidity;
	private Subject weatherData;
	public CurrentConditionsDisplay(Subject weatherData) {
		this.weatherData = weatherData;
		weatherData.registerObserver(this);
	}
	public void update(float temperature, float humidity, float pressure) {
		this.temperature = temperature;
		this.humidity = humidity;
		display();
	}
	public void display() {
		System.out.println("Current conditions: " + temperature 
			+ "F degrees and " + humidity + "% humidity");
	}
}
2)DisplayElement.java
package headfirst.observer.weather;
public interface DisplayElement {
	public void display();
}
3)ForcastDisplay.java
package headfirst.observer.weather;
import java.util.*;
public class ForecastDisplay implements n, DisplayElement {
	private float currentPressure = 29.92f;  
	private float lastPressure;
	private WeatherData weatherData;
	public ForecastDisplay(WeatherData weatherData) {
		this.weatherData = weatherData;
		weatherData.registerObserver(this);
	}
	public void update(float temp, float humidity, float pressure) {
                lastPressure = currentPressure;
		currentPressure = pressure;
		display();
	}
	public void display() {
		System.out.print("Forecast: ");
		if (currentPressure > lastPressure) {
			System.out.println("Improving weather on the way!");
		} else if (currentPressure == lastPressure) {
			System.out.println("More of the same");
		} else if (currentPressure < lastPressure) {
			System.out.println("Watch out for cooler, rainy weather");
		}
	}
}
4)HeatIndexDisplay.java
package headfirst.observer.weather;
public class HeatIndexDisplay implements Observer, DisplayElement {
	float heatIndex = 0.0f;
	private WeatherData weatherData;
	public HeatIndexDisplay(WeatherData weatherData) {
		this.weatherData = weatherData;
		weatherData.registerObserver(this);
	}
	public void update(float t, float rh, float pressure) {
		heatIndex = computeHeatIndex(t, rh);
		display();
	}
	private float computeHeatIndex(float t, float rh) {
		float index = (float)((16.923 + (0.185212 * t) + (5.37941 *           rh) - (0.100254 * t * rh) 
			+ (0.00941695 * (t * t)) + (0.00728898 * (rh * rh)) 
			+ (0.000345372 * (t * t * rh)) - (0.000814971 * (t * rh * rh)) +
			(0.0000102102 * (t * t * rh * rh)) - (0.000038646 * (t * t * t)) + (0.0000291583 * 
			(rh * rh * rh)) + (0.00000142721 * (t * t * t * rh)) + 
			(0.000000197483 * (t * rh * rh * rh)) - (0.0000000218429 * (t * t * t * rh * rh)) +
			0.000000000843296 * (t * t * rh * rh * rh)) -
			(0.0000000000481975 * (t * t * t * rh * rh * rh)));
		return index;
	}
	public void display() {
		System.out.println("Heat index is " + heatIndex);
	}
}
5)Observer.java
package headfirst.observer.weather;
public interface Observer {
	public void update(float temp, float humidity, float pressure);
}
6)StatisticsDisplay.java
package headfirst.observer.weather;
import java.util.*;
public class StatisticsDisplay implements Observer, DisplayElement {
	private float maxTemp = 0.0f;
	private float minTemp = 200;
	private float tempSum= 0.0f;
	private int numReadings;
	private WeatherData weatherData;
	public StatisticsDisplay(WeatherData weatherData) {
		this.weatherData = weatherData;
		weatherData.registerObserver(this);
	}
	public void update(float temp, float humidity, float pressure) {
		tempSum += temp;
		numReadings++;
		if (temp > maxTemp) {
			maxTemp = temp;
		}
		if (temp < minTemp) {
			minTemp = temp;
		}
		display();
	}
	public void display() {
System.out.println("Avg/Max/Min temperature = " + (tempSum / numReadings)
			+ "/" + maxTemp + "/" + minTemp);
	}
}
7)Subject.java
package headfirst.observer.weather;
public interface Subject {
	public void registerObserver(Observer o);
	public void removeObserver(Observer o);
	public void notifyObservers();
}
8)WeatherData.java
package headfirst.observer.weather;
import java.util.*;
public class WeatherData implements Subject {
	private ArrayList observers;
	private float temperature;
	private float humidity;
	private float pressure;
	public WeatherData() {
		observers = new ArrayList();
	}
	public void registerObserver(Observer o) {
		observers.add(o);
	}
	public void removeObserver(Observer o) {
		int i = observers.indexOf(o);
		if (i >= 0) {
			observers.remove(i);
		}
	}
	public void notifyObservers() {
		for (int i = 0; i < observers.size(); i++) {
			Observer observer = (Observer)observers.get(i);
			observer.update(temperature, humidity, pressure);
		}
	}
	public void measurementsChanged() {
		notifyObservers();
	}
	public void setMeasurements(float temperature, float humidity, float pressure) {
		this.temperature = temperature;
		this.humidity = humidity;
		this.pressure = pressure;
		measurementsChanged();
	}
	public float getTemperature() {
		return temperature;
	}
	public float getHumidity() {
		return humidity;
	}
	public float getPressure() {
		return pressure;
	}
}
9)WeatherStation.java
package headfirst.observer.weather;
import java.util.*;
public class WeatherStation {
	public static void main(String[] args) {
		WeatherData weatherData = new WeatherData();
		CurrentConditionsDisplay currentDisplay = 
			new CurrentConditionsDisplay(weatherData);
		StatisticsDisplay statisticsDisplay = new StatisticsDisplay(weatherData);
		ForecastDisplay forecastDisplay = new ForecastDisplay(weatherData);
		weatherData.setMeasurements(80, 65, 30.4f);
		weatherData.setMeasurements(82, 70, 29.2f);
		weatherData.setMeasurements(78, 90, 29.2f);
	}
}
10)WeatherStationHeatIndex.java
package headfirst.observer.weather;
import java.util.*;
public class WeatherStationHeatIndex {
	public static void main(String[] args) {
		WeatherData weatherData = new WeatherData();
		CurrentConditionsDisplay currentDisplay = new CurrentConditionsDisplay(weatherData);
		StatisticsDisplay statisticsDisplay = new StatisticsDisplay(weatherData);
		ForecastDisplay forecastDisplay = new ForecastDisplay(weatherData);
		HeatIndexDisplay heatIndexDisplay = new HeatIndexDisplay(weatherData);
		weatherData.setMeasurements(80, 65, 30.4f);
		weatherData.setMeasurements(82, 70, 29.2f);
		weatherData.setMeasurements(78, 90, 29.2f);
	}
}
—-----------------------------------------------------------------------

Factory Pattern
●	PizzaFm
1)ChicagoPizzaStore.java
package headfirst.factory.pizzafm;
public class ChicagoPizzaStore extends PizzaStore {
	Pizza createPizza(String item) {
        	if (item.equals("cheese")) {
            		return new ChicagoStyleCheesePizza();
        	} else if (item.equals("veggie")) {
        	    	return new ChicagoStyleVeggiePizza();
        	} else if (item.equals("clam")) {
        	    	return new ChicagoStyleClamPizza();
        	} else if (item.equals("pepperoni")) {
            		return new ChicagoStylePepperoniPizza();
        	} else return null;
	}
}
2)ChicagoStyleCheesePizza.java
package headfirst.factory.pizzafm;
public class ChicagoStyleCheesePizza extends Pizza {
	public ChicagoStyleCheesePizza() { 
		name = "Chicago Style Deep Dish Cheese Pizza";
		dough = "Extra Thick Crust Dough";
		sauce = "Plum Tomato Sauce";
		toppings.add("Shredded Mozzarella Cheese");
	}
	void cut() {
		System.out.println("Cutting the pizza into square slices");
	}
}
3)ChicagoStyleClamPizza.java
package headfirst.factory.pizzafm;
public class ChicagoStyleClamPizza extends Pizza {
	public ChicagoStyleClamPizza() {
		name = "Chicago Style Clam Pizza";
		dough = "Extra Thick Crust Dough";
		sauce = "Plum Tomato Sauce";
		toppings.add("Shredded Mozzarella Cheese");
		toppings.add("Frozen Clams from Chesapeake Bay");
	}
	void cut() {
		System.out.println("Cutting the pizza into square slices");
	}
}
4)ChicagoStylePepperoniPizza.java
package headfirst.factory.pizzafm;
public class ChicagoStylePepperoniPizza extends Pizza {
	public ChicagoStylePepperoniPizza() {
		name = "Chicago Style Pepperoni Pizza";
		dough = "Extra Thick Crust Dough";
		sauce = "Plum Tomato Sauce";
		toppings.add("Shredded Mozzarella Cheese");
		toppings.add("Black Olives");
		toppings.add("Spinach");
		toppings.add("Eggplant");
		toppings.add("Sliced Pepperoni");
	}
	void cut() {
		System.out.println("Cutting the pizza into square slices");
	}
}
5)ChicagoStyleVeggiePizza.java
package headfirst.factory.pizzafm;
public class ChicagoStyleVeggiePizza extends Pizza {
	public ChicagoStyleVeggiePizza() {
		name = "Chicago Deep Dish Veggie Pizza";
		dough = "Extra Thick Crust Dough";
		sauce = "Plum Tomato Sauce";
		toppings.add("Shredded Mozzarella Cheese");
		toppings.add("Black Olives");
		toppings.add("Spinach");
		toppings.add("Eggplant");
	}
	void cut() {
		System.out.println("Cutting the pizza into square slices");
	}
}
6)DependentPizzaStore.java
package headfirst.factory.pizzafm;
public class DependentPizzaStore {
	public Pizza createPizza(String style, String type) {
		Pizza pizza = null;
		if (style.equals("NY")) {
			if (type.equals("cheese")) {
				pizza = new NYStyleCheesePizza();
			} else if (type.equals("veggie")) {
				pizza = new NYStyleVeggiePizza();
			} else if (type.equals("clam")) {
				pizza = new NYStyleClamPizza();
			} else if (type.equals("pepperoni")) {
				pizza = new NYStylePepperoniPizza();
			}
		} else if (style.equals("Chicago")) {
			if (type.equals("cheese")) {
				pizza = new ChicagoStyleCheesePizza();
			} else if (type.equals("veggie")) {
				pizza = new ChicagoStyleVeggiePizza();
			} else if (type.equals("clam")) {
				pizza = new ChicagoStyleClamPizza();
			} else if (type.equals("pepperoni")) {
				pizza = new ChicagoStylePepperoniPizza();
			}
		} else {
			System.out.println("Error: invalid type of pizza");
			return null;
		}
		pizza.prepare();
		pizza.bake();
		pizza.cut();
		pizza.box();
		return pizza;
	}
}
7)NYPizzaStore.java
package headfirst.factory.pizzafm;
public class NYPizzaStore extends PizzaStore {
	Pizza createPizza(String item) {
		if (item.equals("cheese")) {
			return new NYStyleCheesePizza();
		} else if (item.equals("veggie")) {
			return new NYStyleVeggiePizza();
		} else if (item.equals("clam")) {
			return new NYStyleClamPizza();
		} else if (item.equals("pepperoni")) {
			return new NYStylePepperoniPizza();
		} else return null;
	}
}
8)NYStyleCheesePizza.java
package headfirst.factory.pizzafm;
public class NYStyleCheesePizza extends Pizza {
	public NYStyleCheesePizza() { 
		name = "NY Style Sauce and Cheese Pizza";
		dough = "Thin Crust Dough";
		sauce = "Marinara Sauce";
		toppings.add("Grated Reggiano Cheese");
	}
}
9)NYStyleClamPizza.java
package headfirst.factory.pizzafm;
public class NYStyleClamPizza extends Pizza {
	public NYStyleClamPizza() {
		name = "NY Style Clam Pizza";
		dough = "Thin Crust Dough";
		sauce = "Marinara Sauce";
		toppings.add("Grated Reggiano Cheese");
		toppings.add("Fresh Clams from Long Island Sound");
	}
}
10)NYStylePepperoniPizza.java
package headfirst.factory.pizzafm;
public class NYStylePepperoniPizza extends Pizza {
	public NYStylePepperoniPizza() {
		name = "NY Style Pepperoni Pizza";
		dough = "Thin Crust Dough";
		sauce = "Marinara Sauce";
		toppings.add("Grated Reggiano Cheese");
		toppings.add("Sliced Pepperoni");
		toppings.add("Garlic");
		toppings.add("Onion");
		toppings.add("Mushrooms");
		toppings.add("Red Pepper");
	}
}
11)NYStyleVeggiePizza.java
package headfirst.factory.pizzafm;
public class NYStyleVeggiePizza extends Pizza {
	public NYStyleVeggiePizza() {
		name = "NY Style Veggie Pizza";
		dough = "Thin Crust Dough";
		sauce = "Marinara Sauce";
		toppings.add("Grated Reggiano Cheese");
		toppings.add("Garlic");
		toppings.add("Onion");
		toppings.add("Mushrooms");
		toppings.add("Red Pepper");
	}
}
12)Pizza.java
package headfirst.factory.pizzafm;
import java.util.ArrayList;
public abstract class Pizza {
	String name;
	String dough;
	String sauce;
	ArrayList toppings = new ArrayList();
	void prepare() {
		System.out.println("Preparing " + name);
		System.out.println("Tossing dough...");
		System.out.println("Adding sauce...");
		System.out.println("Adding toppings: ");
		for (int i = 0; i < toppings.size(); i++) {
			System.out.println("   " + toppings.get(i));
		}
	}
	void bake() {
		System.out.println("Bake for 25 minutes at 350");
	}
	void cut() {
		System.out.println("Cutting the pizza into diagonal slices");
	}
	void box() {
		System.out.println("Place pizza in official PizzaStore box");
	}
 
	public String getName() {
		return name;
	}
	public String toString() {
		StringBuffer display = new StringBuffer();
		display.append("---- " + name + " ----\n");
		display.append(dough + "\n");
		display.append(sauce + "\n");
		for (int i = 0; i < toppings.size(); i++) {
			display.append((String )toppings.get(i) + "\n");
		}
		return display.toString();
	}
}
13)PizzaStore.java
package headfirst.factory.pizzafm;
public abstract class PizzaStore {
	abstract Pizza createPizza(String item);
	public Pizza orderPizza(String type) {
		Pizza pizza = createPizza(type);
	System.out.println("--- Making a " + pizza.getName() + " ---");
		pizza.prepare();
		pizza.bake();
		pizza.cut();
		pizza.box();
		return pizza;
	}
}
14)PizzaTestDrive.java
package headfirst.factory.pizzafm;
public class PizzaTestDrive {
	public static void main(String[] args) {
		PizzaStore nyStore = new NYPizzaStore();
		PizzaStore chicagoStore = new ChicagoPizzaStore();
		Pizza pizza = nyStore.orderPizza("cheese");
	System.out.println("Ethan ordered a " + pizza.getName() + "\n");
		pizza = chicagoStore.orderPizza("cheese");
	System.out.println("Joel ordered a " + pizza.getName() + "\n");
		pizza = nyStore.orderPizza("clam");
	System.out.println("Ethan ordered a " + pizza.getName() + "\n"); 
		pizza = chicagoStore.orderPizza("clam");
	System.out.println("Joel ordered a " + pizza.getName() + "\n");
		pizza = nyStore.orderPizza("pepperoni");
	System.out.println("Ethan ordered a " + pizza.getName() + "\n");
		pizza = chicagoStore.orderPizza("pepperoni");
	System.out.println("Joel ordered a " + pizza.getName() + "\n");
		pizza = nyStore.orderPizza("veggie");
	System.out.println("Ethan ordered a " + pizza.getName() + "\n");
		pizza = chicagoStore.orderPizza("veggie");
	System.out.println("Joel ordered a " + pizza.getName() + "\n");
	}
}
—---------------------------------------------------------------------
●	Pizzas
1)CheesePizza.java
package headfirst.factory.pizzas;
public class CheesePizza extends Pizza {
	public CheesePizza() {
		name = "Cheese Pizza";
		dough = "Regular Crust";
		sauce = "Marinara Pizza Sauce";
		toppings.add("Fresh Mozzarella");
		toppings.add("Parmesan");
	}
}
2)ClamPizza.java
package headfirst.factory.pizzas;
public class ClamPizza extends Pizza {
	public ClamPizza() {
		name = "Clam Pizza";
		dough = "Thin crust";
		sauce = "White garlic sauce";
		toppings.add("Clams");
		toppings.add("Grated parmesan cheese");
	}
}
3)PepperoniPizza.java
package headfirst.factory.pizzas;
public class PepperoniPizza extends Pizza {
	public PepperoniPizza() {
		name = "Pepperoni Pizza";
		dough = "Crust";
		sauce = "Marinara sauce";
		toppings.add("Sliced Pepperoni");
		toppings.add("Sliced Onion");
		toppings.add("Grated parmesan cheese");
	}
}
4)Pizza.java
package headfirst.factory.pizzas;
import java.util.ArrayList;
abstract public class Pizza {
	String name;
	String dough;
	String sauce;
	ArrayList toppings = new ArrayList();
	public String getName() {
		return name;
	}
	public void prepare() {
		System.out.println("Preparing " + name);
	}
	public void bake() {
		System.out.println("Baking " + name);
	}
	public void cut() {
		System.out.println("Cutting " + name);
	}
	public void box() {
		System.out.println("Boxing " + name);
	}
	public String toString() {
		// code to display pizza name and ingredients
		StringBuffer display = new StringBuffer();
		display.append("---- " + name + " ----\n");
		display.append(dough + "\n");
		display.append(sauce + "\n");
		for (int i = 0; i < toppings.size(); i++) {
			display.append((String )toppings.get(i) + "\n");
		}
		return display.toString();
	}
}
5)PizzaStore.java
package headfirst.factory.pizzas;
public class PizzaStore {
	SimplePizzaFactory factory;
	public PizzaStore(SimplePizzaFactory factory) { 
		this.factory = factory;
	}
	public Pizza orderPizza(String type) {
		Pizza pizza;
		pizza = factory.createPizza(type);
		pizza.prepare();
		pizza.bake();
		pizza.cut();
		pizza.box();
		return pizza;
	}

}
6)PizzaTestDrive.java
package headfirst.factory.pizzas;
public class PizzaTestDrive {
	public static void main(String[] args) {
		SimplePizzaFactory factory = new SimplePizzaFactory();
		PizzaStore store = new PizzaStore(factory);
		Pizza pizza = store.orderPizza("cheese");
		System.out.println("We ordered a " + pizza.getName() + "\n");
		pizza = store.orderPizza("veggie");
		System.out.println("We ordered a " + pizza.getName() + "\n");
	}
}
7)SimplePizzaFactory.java
package headfirst.factory.pizzas;
public class SimplePizzaFactory {
	public Pizza createPizza(String type) {
		Pizza pizza = null;
		if (type.equals("cheese")) {
			pizza = new CheesePizza();
		} else if (type.equals("pepperoni")) {
			pizza = new PepperoniPizza();
		} else if (type.equals("clam")) {
			pizza = new ClamPizza();
		} else if (type.equals("veggie")) {
			pizza = new VeggiePizza();
		}
		return pizza;
	}
}
8)VeggiePizza.java
package headfirst.factory.pizzas;
public class VeggiePizza extends Pizza {
	public VeggiePizza() {
		name = "Veggie Pizza";
		dough = "Crust";
		sauce = "Marinara sauce";
		toppings.add("Shredded mozzarella");
		toppings.add("Grated parmesan");
		toppings.add("Diced onion");
		toppings.add("Sliced mushrooms");
		toppings.add("Sliced red pepper");
		toppings.add("Sliced black olives");
	}
}
•	SHAPE INTERFACE
•	Shape.java
•	
•	public interface Shape {
•	   void draw();
•	}
•	RoundedRectangle.java
•	public class RoundedRectangle implements Shape {
•	   @Override
•	   public void draw() {
•	      System.out.println("Inside RoundedRectangle::draw() method.");
•	   }
•	}
•	RoundedSquare.java
•	public class RoundedSquare implements Shape {
•	   @Override
•	   public void draw() {
•	      System.out.println("Inside RoundedSquare::draw() method.");
•	   }
•	}

Rectangle.java
public class Rectangle implements Shape {
   @Override
   public void draw() {
      System.out.println("Inside Rectangle::draw() method.");
   }
}
.
AbstractFactory.java
public abstract class AbstractFactory {
   abstract Shape getShape(String shapeType) ;
}
ShapeFactory.java
public class ShapeFactory extends AbstractFactory {
   @Override
   public Shape getShape(String shapeType){    
      if(shapeType.equalsIgnoreCase("RECTANGLE")){
         return new Rectangle();         
      }else if(shapeType.equalsIgnoreCase("SQUARE")){
         return new Square();
      }	 
      return null;
   }
}

RoundedShapeFactory.java
public class RoundedShapeFactory extends AbstractFactory {
   @Override
   public Shape getShape(String shapeType){    
      if(shapeType.equalsIgnoreCase("RECTANGLE")){
         return new RoundedRectangle();         
      }else if(shapeType.equalsIgnoreCase("SQUARE")){
         return new RoundedSquare();
      }	 
      return null;
   }
}

FactoryProducer.java
public class FactoryProducer {
   public static AbstractFactory getFactory(boolean rounded){   
      if(rounded){
         return new RoundedShapeFactory();         
      }else{
         return new ShapeFactory();
      }
   }
}

AbstractFactoryPatternDemo.java
public class AbstractFactoryPatternDemo {
   public static void main(String[] args) {
      //get shape factory
      AbstractFactory shapeFactory = FactoryProducer.getFactory(false);
      //get an object of Shape Rectangle
      Shape shape1 = shapeFactory.getShape("RECTANGLE");
      //call draw method of Shape Rectangle
      shape1.draw();
      //get an object of Shape Square 
      Shape shape2 = shapeFactory.getShape("SQUARE");
      //call draw method of Shape Square
      shape2.draw();
      //get shape factory
      AbstractFactory shapeFactory1 = FactoryProducer.getFactory(true);
      //get an object of Shape Rectangle
      Shape shape3 = shapeFactory1.getShape("RECTANGLE");
      //call draw method of Shape Rectangle
      shape3.draw();
      //get an object of Shape Square 
      Shape shape4 = shapeFactory1.getShape("SQUARE");
      //call draw method of Shape Square
      shape4.draw();
      
   }
}

Verify the output.
Inside Rectangle::draw() method.
Inside Square::draw() method.
Inside RoundedRectangle::draw() method.
Inside RoundedSquare::draw() method.


			Facade Pattern
●	HomeTheatre
1)Amplifier.java
package headfirst.facade.hometheater;
public class Amplifier {
	String description;
	Tuner tuner;
	DvdPlayer dvd;
	CdPlayer cd;
	public Amplifier(String description) {
		this.description = description;
	}
	public void on() {
		System.out.println(description + " on");
	}
	public void off() {
		System.out.println(description + " off");
	}
	public void setStereoSound() {
		System.out.println(description + " stereo mode on");
	}
	public void setSurroundSound() {
 System.out.println(description + " surround sound on (5 speakers, 1 subwoofer)");
	}
	public void setVolume(int level) {
	System.out.println(description + " setting volume to " + level);
	}
	public void setTuner(Tuner tuner) {
		System.out.println(description + " setting tuner to " + dvd);
		this.tuner = tuner;
	}
	public void setDvd(DvdPlayer dvd) {
	System.out.println(description + " setting DVD player to " + dvd);
		this.dvd = dvd;
	}
	public void setCd(CdPlayer cd) {
	System.out.println(description + " setting CD player to " + cd);
		this.cd = cd;
	}
	public String toString() {
		return description;
	}
}
2)CdPlayer.java
package headfirst.facade.hometheater;
public class CdPlayer {
	String description;
	int currentTrack;
	Amplifier amplifier;
	String title;
	public CdPlayer(String description, Amplifier amplifier) {
		this.description = description;
		this.amplifier = amplifier;
	}
	public void on() {
		System.out.println(description + " on");
	}
	public void off() {
		System.out.println(description + " off");
	}
	public void eject() {
		title = null;
		System.out.println(description + " eject");
	}
	public void play(String title) {
		this.title = title;
		currentTrack = 0;
	System.out.println(description + " playing \"" + title + "\"");
	}
	public void play(int track) {
		if (title == null) {
	System.out.println(description + " can't play track " + currentTrack + ", no cd inserted");
		} else {
			currentTrack = track;
	System.out.println(description + " playing track " + currentTrack);
		}
	}
	public void stop() {
		currentTrack = 0;
		System.out.println(description + " stopped");
	}
	public void pause() {
	System.out.println(description + " paused \"" + title + "\"");
	}
	public String toString() {
		return description;
	}
}
3)DvdPlayer.java
package headfirst.facade.hometheater;
public class DvdPlayer {
	String description;
	int currentTrack;
	Amplifier amplifier;
	String movie;
	public DvdPlayer(String description, Amplifier amplifier) {
		this.description = description;
		this.amplifier = amplifier;
	}
	public void on() {
		System.out.println(description + " on");
	}
	public void off() {
		System.out.println(description + " off");
	}
        public void eject() {
		movie = null;
                System.out.println(description + " eject");
        }
	public void play(String movie) {
		this.movie = movie;
		currentTrack = 0;
	System.out.println(description + " playing \"" + movie + "\"");
	}
	public void play(int track) {
		if (movie == null) {
			System.out.println(description + " can't play track " + track + " no dvd inserted");
		} else {
			currentTrack = track;
			System.out.println(description + " playing track " + currentTrack + " of \"" + movie + "\"");
		}
	}
	public void stop() {
		currentTrack = 0;
	System.out.println(description + " stopped \"" + movie + "\"");
	}
	public void pause() {
	System.out.println(description + " paused \"" + movie + "\"");
	}
	public void setTwoChannelAudio() {
		System.out.println(description + " set two channel audio");
	}
 
	public void setSurroundAudio() {
		System.out.println(description + " set surround audio");
	}
	public String toString() {
		return description;
	}
}
4)HomeTheatreFacade.java
package headfirst.facade.hometheater;
public class HomeTheaterFacade {
	Amplifier amp;
	Tuner tuner;
	DvdPlayer dvd;
	CdPlayer cd;
	Projector projector;
	TheaterLights lights;
	Screen screen;
	PopcornPopper popper;
	public HomeTheaterFacade(Amplifier amp, 
				 Tuner tuner, 
				 DvdPlayer dvd, 
				 CdPlayer cd, 
				 Projector projector, 
				 Screen screen,
				 TheaterLights lights,
				 PopcornPopper popper) {
		this.amp = amp;
		this.tuner = tuner;
		this.dvd = dvd;
		this.cd = cd;
		this.projector = projector;
		this.screen = screen;
		this.lights = lights;
		this.popper = popper;
	}
	public void watchMovie(String movie) {
		System.out.println("Get ready to watch a movie...");
		popper.on();
		popper.pop();
		lights.dim(10);
		screen.down();
		projector.on();
		projector.wideScreenMode();
		amp.on();
		amp.setDvd(dvd);
		amp.setSurroundSound();
		amp.setVolume(5);
		dvd.on();
		dvd.play(movie);
	}
	public void endMovie() {
		System.out.println("Shutting movie theater down...");
		popper.off();
		lights.on();
		screen.up();
		projector.off();
		amp.off();
		dvd.stop();
		dvd.eject();
		dvd.off();
	}
	public void listenToCd(String cdTitle) {
	System.out.println("Get ready for an audiopile experence...");
		lights.on();
		amp.on();
		amp.setVolume(5);
		amp.setCd(cd);
		amp.setStereoSound();
		cd.on();
		cd.play(cdTitle);
	}
	public void endCd() {
		System.out.println("Shutting down CD...");
		amp.off();
		amp.setCd(cd);
		cd.eject();
		cd.off();
	}
	public void listenToRadio(double frequency) {
		System.out.println("Tuning in the airwaves...");
		tuner.on();
		tuner.setFrequency(frequency);
		amp.on();
		amp.setVolume(5);
		amp.setTuner(tuner);
	}

	public void endRadio() {
		System.out.println("Shutting down the tuner...");
		tuner.off();
		amp.off();
	}
}
5)HomeTheatreTestDrive.java
package headfirst.facade.hometheater;
public class HomeTheaterTestDrive {
	public static void main(String[] args) {
		Amplifier amp = new Amplifier("Top-O-Line Amplifier");
		Tuner tuner = new Tuner("Top-O-Line AM/FM Tuner", amp);
		DvdPlayer dvd = new DvdPlayer("Top-O-Line DVD Player", amp);
		CdPlayer cd = new CdPlayer("Top-O-Line CD Player", amp);
	Projector projector = new Projector("Top-O-Line Projector", dvd);
	TheaterLights lights = new TheaterLights("Theater Ceiling Lights");
		Screen screen = new Screen("Theater Screen");
		PopcornPopper popper = new PopcornPopper("Popcorn Popper");
		HomeTheaterFacade homeTheater = 
				new HomeTheaterFacade(amp, tuner, dvd, cd, 
						projector, screen, lights, popper);
		homeTheater.watchMovie("Raiders of the Lost Ark");
		homeTheater.endMovie();
	}
}
6)PopcornPopper.java
package headfirst.facade.hometheater;
public class PopcornPopper {
	String description;
	public PopcornPopper(String description) {
		this.description = description;
	}
	public void on() {
		System.out.println(description + " on");
	}
	public void off() {
		System.out.println(description + " off");
	}
	public void pop() {
		System.out.println(description + " popping popcorn!");
	}
        public String toString() {
                return description;
        }
}
7)Projector.java
package headfirst.facade.hometheater;
public class Projector {
	String description;
	DvdPlayer dvdPlayer;
	public Projector(String description, DvdPlayer dvdPlayer) {
		this.description = description;
		this.dvdPlayer = dvdPlayer;
	}
	public void on() {
		System.out.println(description + " on");
	}
	public void off() {
		System.out.println(description + " off");
	}
	public void wideScreenMode() {
		System.out.println(description + " in widescreen mode (16x9 aspect ratio)");
	}
	public void tvMode() {
		System.out.println(description + " in tv mode (4x3 aspect ratio)");
	}
        public String toString() {
                return description;
        }
}
8)Screen.java
package headfirst.facade.hometheater;
public class Screen {
	String description;
	public Screen(String description) {
		this.description = description;
	}
	public void up() {
		System.out.println(description + " going up");
	}
	public void down() {
		System.out.println(description + " going down");
	}
        public String toString() {
                return description;
        }
}
9)TheatreLights.java
package headfirst.facade.hometheater;
public class TheaterLights {
	String description;
	public TheaterLights(String description) {
		this.description = description;
	}
	public void on() {
		System.out.println(description + " on");
	}
	public void off() {
		System.out.println(description + " off");
	}
	public void dim(int level) {
		System.out.println(description + " dimming to " + level  + "%");
	}
        public String toString() {
                return description;
        }
}
10)Tuner.java
package headfirst.facade.hometheater;
public class Tuner {
	String description;
	Amplifier amplifier;
	double frequency;
	public Tuner(String description, Amplifier amplifier) {
		this.description = description;
	}
	public void on() {
		System.out.println(description + " on");
	}
	public void off() {
		System.out.println(description + " off");
	}
	public void setFrequency(double frequency) {
System.out.println(description + " setting frequency to " + frequency);
		this.frequency = frequency;
	} 
	public void setAm() {
		System.out.println(description + " setting AM mode");
	}
	public void setFm() {
		System.out.println(description + " setting FM mode");
	}
        public String toString() {
                return description;
        }
}
Decorator Pattern
●	Io
1)InputTest.java
package headfirst.decorator.io;
import java.io.*;
public class InputTest {
	public static void main(String[] args) throws IOException {
		int c;
		try {
			InputStream in = 
				new LowerCaseInputStream(
					new BufferedInputStream(
						new FileInputStream("test.txt")));
			while((c = in.read()) >= 0) {
				System.out.print((char)c);
			}
			in.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
2)LowerCaseInputStream.java
package headfirst.decorator.io;
import java.io.*;
public class LowerCaseInputStream extends FilterInputStream {
	public LowerCaseInputStream(InputStream in) {
		super(in);
	}
	public int read() throws IOException {
		int c = super.read();
		return (c == -1 ? c : Character.toLowerCase((char)c));
	}	
	public int read(byte[] b, int offset, int len) throws IOException {
		int result = super.read(b, offset, len);
		for (int i = offset; i < offset+result; i++) {
			b[i] = (byte)Character.toLowerCase((char)b[i]);
		}
		return result;
	}
}
—----------------------------------------------------------------------
●	StarBuzz
1)Beverage.java
package headfirst.decorator.starbuzz;
public abstract class Beverage {
	String description = "Unknown Beverage";
	public String getDescription() {
		return description;
	}
	public abstract double cost();
}
2)CondimentDecorator.java
package headfirst.decorator.starbuzz;
public abstract class CondimentDecorator extends Beverage {
	public abstract String getDescription();
}
3)DarkRoast.java
package headfirst.decorator.starbuzz;
public class DarkRoast extends Beverage {
	public DarkRoast() {
		description = "Dark Roast Coffee";
	}
	public double cost() {
		return .99;
	}
}
4)Decaf.java
package headfirst.decorator.starbuzz;
public class Decaf extends Beverage {
	public Decaf() {
		description = "Decaf Coffee";
	}
	public double cost() {
		return 1.05;
	}
}
5)Espresso.java
package headfirst.decorator.starbuzz;
public class Espresso extends Beverage {
	public Espresso() {
		description = "Espresso";
	}
	public double cost() {
		return 1.99;
	}
}
6)HouseBlend.java
package headfirst.decorator.starbuzz;
public class HouseBlend extends Beverage {
	public HouseBlend() {
		description = "House Blend Coffee";
	}
	public double cost() {
		return .89;
	}
}
7)Milk.java
package headfirst.decorator.starbuzz;
public class Milk extends CondimentDecorator {
	Beverage beverage;
	public Milk(Beverage beverage) {
		this.beverage = beverage;
	}
	public String getDescription() {
		return beverage.getDescription() + ", Milk";
	}
	public double cost() {
		return .10 + beverage.cost();
	}
}
8)Mocha.java
package headfirst.decorator.starbuzz;
public class Mocha extends CondimentDecorator {
	Beverage beverage;
	public Mocha(Beverage beverage) {
		this.beverage = beverage;
	}
	public String getDescription() {
		return beverage.getDescription() + ", Mocha";
	}
	public double cost() {
		return .20 + beverage.cost();
	}
}
9)Soy.java
package headfirst.decorator.starbuzz;
public class Soy extends CondimentDecorator {
	Beverage beverage;
	public Soy(Beverage beverage) {
		this.beverage = beverage;
	}
	public String getDescription() {
		return beverage.getDescription() + ", Soy";
	}
	public double cost() {
		return .15 + beverage.cost();
	}
}
10)StarbuzzCoffee.java
package headfirst.decorator.starbuzz;
public class StarbuzzCoffee {
	public static void main(String args[]) {
		Beverage beverage = new Espresso();
System.out.println(beverage.getDescription() + " $" + beverage.cost());
		Beverage beverage2 = new DarkRoast();
		beverage2 = new Mocha(beverage2);
		beverage2 = new Mocha(beverage2);
		beverage2 = new Whip(beverage2);
System.out.println(beverage2.getDescription() + " $" +beverage2.cost());
		Beverage beverage3 = new HouseBlend();
		beverage3 = new Soy(beverage3);
		beverage3 = new Mocha(beverage3);
		beverage3 = new Whip(beverage3);
System.out.println(beverage3.getDescription() + " $" +beverage3.cost());
	}
}
11)Whip.java
package headfirst.decorator.starbuzz;
public class Whip extends CondimentDecorator {
	Beverage beverage;
	public Whip(Beverage beverage) {
		this.beverage = beverage;
	}
	public String getDescription() {
		return beverage.getDescription() + ", Whip";
	}
	public double cost() {
		return .10 + beverage.cost();
	}
}

—----------------------------------------------------------------------

Adapter Pattern
●	Ducks
1)Duck.java
package headfirst.adapter.ducks;
public interface Duck {
	public void quack();
	public void fly();
}
2)DuckAdapter.java
package headfirst.adapter.ducks;
import java.util.Random;
public class DuckAdapter implements Turkey {
	Duck duck;
	Random rand;
	public DuckAdapter(Duck duck) {
		this.duck = duck;
		rand = new Random();
	}
	public void gobble() {
		duck.quack();
	}
	public void fly() {
		if (rand.nextInt(5)  == 0) {
		     duck.fly();
		}
	}
}
3)DuckTestDrive.java
package headfirst.adapter.ducks;
public class DuckTestDrive {
	public static void main(String[] args) {
		MallardDuck duck = new MallardDuck();
		WildTurkey turkey = new WildTurkey();
		Duck turkeyAdapter = new TurkeyAdapter(turkey);
		System.out.println("The Turkey says...");
		turkey.gobble();
		turkey.fly();
		System.out.println("\nThe Duck says...");
		testDuck(duck); 
		System.out.println("\nThe TurkeyAdapter says...");
		testDuck(turkeyAdapter);
	}
 static void testDuck(Duck duck) {
		duck.quack();
		duck.fly();
	}
}
4)MallardDuck.java
package headfirst.adapter.ducks;
public class MallardDuck implements Duck {
	public void quack() {
		System.out.println("Quack");
	}
	public void fly() {
		System.out.println("I'm flying");
	}
}
5)Turkey.java
package headfirst.adapter.ducks;
public interface Turkey {
	public void gobble();
	public void fly();
}
6)TurkeyAdapter.java
package headfirst.adapter.ducks;
public class TurkeyAdapter implements Duck {
	Turkey turkey;
	public TurkeyAdapter(Turkey turkey) {
		this.turkey = turkey;
	}
	public void quack() {
		turkey.gobble();
	}
	public void fly() {
		for(int i=0; i < 5; i++) {
			turkey.fly();
		}
	}
}
7)TurkeyTestDrive.java
package headfirst.adapter.ducks;
public class TurkeyTestDrive {
	public static void main(String[] args) {
		MallardDuck duck = new MallardDuck();
		Turkey duckAdapter = new DuckAdapter(duck);
		for(int i=0;i<10;i++) {
			System.out.println("The DuckAdapter says...");
			duckAdapter.gobble();
			duckAdapter.fly();
		}
	}
}
8)WildTurkey.java
package headfirst.adapter.ducks;
public class WildTurkey implements Turkey {
	public void gobble() {
		System.out.println("Gobble gobble");
	}
	public void fly() {
		System.out.println("I'm flying a short distance");
	}
}
●	Iterenum
1)EI.java
package headfirst.adapter.iterenum;
import java.util.*;
public class EI {
	public static void main (String args[]) {
		Vector v = new Vector(Arrays.asList(args));
		Enumeration enumeration = v.elements();
		while (enumeration.hasMoreElements()) {
			System.out.println(enumeration.nextElement());
		}
		Iterator iterator = v.iterator();
		while (iterator.hasNext()) {
			System.out.println(iterator.next());
		}
	}
}
2)EnumerationIterator.java
package headfirst.adapter.iterenum;
import java.util.*;
public class EnumerationIterator implements Iterator {
	Enumeration enumeration;
	public EnumerationIterator(Enumeration enumeration) {
		this.enumeration = enumeration;
	}
	public boolean hasNext() {
		return enumeration.hasMoreElements();
	}
	public Object next() {
		return enumeration.nextElement();
	}
	public void remove() {
		throw new UnsupportedOperationException();
	}
}
3)EnumerationIteratorTestDrive.java
package headfirst.adapter.iterenum;
import java.util.*;
public class EnumerationIteratorTestDrive {
	public static void main (String args[]) {
		Vector v = new Vector(Arrays.asList(args));
		Iterator iterator = new EnumerationIterator(v.elements());
		while (iterator.hasNext()) {
			System.out.println(iterator.next());
		}
	}
}
4)IteratorEnumeration.java
package headfirst.adapter.iterenum;
import java.util.*;
public class IteratorEnumeration implements Enumeration {
	Iterator iterator;
	public IteratorEnumeration(Iterator iterator) {
		this.iterator = iterator;
	}
	public boolean hasMoreElements() {
		return iterator.hasNext();
	}
	public Object nextElement() {
		return iterator.next();
	}
}
5)IteratorEnumerationTestDrive.java
package headfirst.adapter.iterenum;
import java.util.*;
public class IteratorEnumerationTestDrive {
	public static void main (String args[]) {
		ArrayList l = new ArrayList(Arrays.asList(args));
	Enumeration enumeration = new IteratorEnumeration(l.iterator());
		while (enumeration.hasMoreElements()) {
			System.out.println(enumeration.nextElement());
		}
	}
}
































           Strategy Pattern
1)DecoyDuck.java
package headfirst.strategy;
public class DecoyDuck extends Duck {
	public DecoyDuck() {
		setFlyBehavior(new FlyNoWay());
		setQuackBehavior(new MuteQuack());
	}
	public void display() {
		System.out.println("I'm a duck Decoy");
	}
}
2)Duck.java
  package headfirst.strategy;
public abstract class Duck {
	FlyBehavior flyBehavior;
	QuackBehavior quackBehavior;
	public Duck() {
	}
	public void setFlyBehavior (FlyBehavior fb) {
		flyBehavior = fb;
	}
	public void setQuackBehavior(QuackBehavior qb) {
		quackBehavior = qb;
	}
	abstract void display();
	public void performFly() {
		flyBehavior.fly();
	}
     public void performQuack() {
	quackBehavior.quack();
	} 
	public void swim() {
		System.out.println("All ducks float, even decoys!");
	}
}
3)FakeQuack.java
package headfirst.strategy;
public class FakeQuack implements QuackBehavior {
	public void quack() {
		System.out.println("Qwak");
	}
}
4)FlyBehaviour.java
package headfirst.strategy;

public interface FlyBehavior {
	public void fly();
}
5)FlyNoWay.java
package headfirst.strategy;
public class FlyNoWay implements FlyBehavior {
	public void fly() {
		System.out.println("I can't fly");
	}
}
6)FlyRocketPowered.java
package headfirst.strategy;
public class FlyRocketPowered implements FlyBehavior {
	public void fly() {
		System.out.println("I'm flying with a rocket");  
  }  }
7)FlyWithWings.java
package headfirst.strategy;
public class FlyWithWings implements FlyBehavior {
	public void fly() {
		System.out.println("I'm flying!!");
	}
}
8)MallardDuck.java
package headfirst.strategy;
public class MallardDuck extends Duck {
	public MallardDuck() {
		quackBehavior = new Quack();
                flyBehavior = new FlyWithWings();
	}
	public void display() {
		System.out.println("I'm a real Mallard duck");
	}
}
9)MiniDuckSimulator.java
package headfirst.strategy;
public class MiniDuckSimulator {
	public static void main(String[] args) {
		MallardDuck	mallard = new MallardDuck();
		RubberDuck	rubberDuckie = new RubberDuck();
		DecoyDuck	decoy = new DecoyDuck();
		ModelDuck	model = new ModelDuck();

		mallard.performQuack();
		rubberDuckie.performQuack();
		decoy.performQuack();
		model.performFly();	
		model.setFlyBehavior(new FlyRocketPowered());
		model.performFly();
	}
}
10)MiniDuckSimulator1.java
package headfirst.strategy;
public class MiniDuckSimulator1 {
	public static void main(String[] args) {
		Duck mallard = new MallardDuck();
		mallard.performQuack();
		mallard.performFly();
   
		Duck model = new ModelDuck();
		model.performFly();
		model.setFlyBehavior(new FlyRocketPowered());
		model.performFly();
	}
}
11)ModelDuck.java
package headfirst.strategy;
public class ModelDuck extends Duck {
	public ModelDuck() {
		flyBehavior = new FlyNoWay();
		quackBehavior = new Quack();
	}
	public void display() {
		System.out.println("I'm a model duck");
	}
}
12)MuteQuack.java
package headfirst.strategy;
public class MuteQuack implements QuackBehavior {
	public void quack() {
		System.out.println("<< Silence >>");
	}
}
13)Quack.java
package headfirst.strategy;
public class Quack implements QuackBehavior {
	public void quack() {
		System.out.println("Quack");
	}
}
14)QuackBehaviour.java
package headfirst.strategy;
public interface QuackBehavior {
	public void quack();
}
15)RedHeadDuck.java
package headfirst.strategy;
public class RedHeadDuck extends Duck {
	public RedHeadDuck() {
		flyBehavior = new FlyWithWings();
		quackBehavior = new Quack();
	}
	public void display() {
		System.out.println("I'm a real Red Headed duck");
	}
}
16)RubberDuck.java
package headfirst.strategy;
public class RubberDuck extends Duck {
	public RubberDuck() {
		flyBehavior = new FlyNoWay();
		quackBehavior = new Squeak();
	}
	public void display() {
		System.out.println("I'm a rubber duckie");
	}
}
17)Squeak.java
package headfirst.strategy;
public class Squeak implements QuackBehavior {
	public void quack() {
		System.out.println("Squeak");
	}
}
             State Pattern
●	GumBallState
1)GumBallMachine.java
package headfirst.state.gumballstate;
public class GumballMachine {
	State soldOutState;
	State noQuarterState;
	State hasQuarterState;
	State soldState;
	State state = soldOutState;
	int count = 0;
	public GumballMachine(int numberGumballs) {
		soldOutState = new SoldOutState(this);
		noQuarterState = new NoQuarterState(this);
		hasQuarterState = new HasQuarterState(this);
		soldState = new SoldState(this);
		this.count = numberGumballs;
 		if (numberGumballs > 0) {
			state = noQuarterState;
		} 
	}
	public void insertQuarter() {
		state.insertQuarter();
	}
	public void ejectQuarter() {
		state.ejectQuarter();
	}
	public void turnCrank() {
		state.turnCrank();
		state.dispense();
	}
	void setState(State state) {
		this.state = state;
	}
	void releaseBall() {
		System.out.println("A gumball comes rolling out the slot...");
		if (count != 0) {
			count = count - 1;
		}
	} 
	int getCount() {
		return count;
	}
	void refill(int count) {
		this.count = count;
		state = noQuarterState;
	}
    public State getState() {
        return state;
    }
    public State getSoldOutState() {
        return soldOutState;
    }
    public State getNoQuarterState() {
        return noQuarterState;
    }
    public State getHasQuarterState() {
        return hasQuarterState;
    }
    public State getSoldState() {
        return soldState;
    }
	public String toString() {
		StringBuffer result = new StringBuffer();
		result.append("\nMighty Gumball, Inc.");
		result.append("\nJava-enabled Standing Gumball Model #2004");
		result.append("\nInventory: " + count + " gumball");
		if (count != 1) {
			result.append("s");
		}
		result.append("\n");
		result.append("Machine is " + state + "\n");
		return result.toString();
	}
}
2)GumBallMachineStateDrive.java
package headfirst.state.gumballstate;
public class GumballMachineTestDrive {
	public static void main(String[] args) {
		GumballMachine gumballMachine = new GumballMachine(5);
		System.out.println(gumballMachine);
		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();
		System.out.println(gumballMachine);
		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();
		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();
		System.out.println(gumballMachine);
	}
}
3)HasQuarterState.java
package headfirst.state.gumballstate;
import java.util.Random;
public class HasQuarterState implements State {
	GumballMachine gumballMachine;
	public HasQuarterState(GumballMachine gumballMachine) {
		this.gumballMachine = gumballMachine;
	}
	public void insertQuarter() {
		System.out.println("You can't insert another quarter");
	}
	public void ejectQuarter() {
		System.out.println("Quarter returned");
		gumballMachine.setState(gumballMachine.getNoQuarterState());
	}
	public void turnCrank() {
		System.out.println("You turned...");
		gumballMachine.setState(gumballMachine.getSoldState());
	}
    public void dispense() {
        System.out.println("No gumball dispensed");
    }
	public String toString() {
		return "waiting for turn of crank";
	}
}
4)NoQuarterState.java
package headfirst.state.gumballstate;
public class NoQuarterState implements State {
    GumballMachine gumballMachine;
    public NoQuarterState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }
	public void insertQuarter() {
		System.out.println("You inserted a quarter");
		gumballMachine.setState(gumballMachine.getHasQuarterState());
	}
	public void ejectQuarter() {
		System.out.println("You haven't inserted a quarter");
	}
	public void turnCrank() {
		System.out.println("You turned, but there's no quarter");
	 }
	public void dispense() {
		System.out.println("You need to pay first");
	} 
	public String toString() {
		return "waiting for quarter";
	}
}
5)SoldOutState.java
package headfirst.state.gumballstate;
public class SoldOutState implements State {
    GumballMachine gumballMachine;
    public SoldOutState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }
	public void insertQuarter() {
		System.out.println("You can't insert a quarter, the machine is sold out");
	}
	public void ejectQuarter() {
		System.out.println("You can't eject, you haven't inserted a quarter yet");
	}
	public void turnCrank() {
		System.out.println("You turned, but there are no gumballs");
	}
	public void dispense() {
		System.out.println("No gumball dispensed");
	}
	public String toString() {
		return "sold out";
	}
}
6)SoldState.java
package headfirst.state.gumballstate;
public class SoldState implements State {
    GumballMachine gumballMachine;
    public SoldState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }
	public void insertQuarter() {
		System.out.println("Please wait, we're already giving you a gumball");
	}
	public void ejectQuarter() {
		System.out.println("Sorry, you already turned the crank");
	}
	public void turnCrank() {
		System.out.println("Turning twice doesn't get you another gumball!");
	}
	public void dispense() {
		gumballMachine.releaseBall();
		if (gumballMachine.getCount() > 0) {
			gumballMachine.setState(gumballMachine.getNoQuarterState());
		} else {
			System.out.println("Oops, out of gumballs!");
			gumballMachine.setState(gumballMachine.getSoldOutState());
		}
	}
	public String toString() {
		return "dispensing a gumball";
	}
}
7)State.java
package headfirst.state.gumballstate;
public interface State { 
public void insertQuarter();
	public void ejectQuarter();
	public void turnCrank();
	public void dispense();
}
—---------------------------------------------------------------------
●	GumBallStateWinner
1)GumBallMachine.java
package headfirst.state.gumballstatewinner;
public class GumballMachine {
	State soldOutState;
	State noQuarterState;
	State hasQuarterState;
	State soldState;
	State winnerState;
	State state = soldOutState;
	int count = 0;
	public GumballMachine(int numberGumballs) {
		soldOutState = new SoldOutState(this);
		noQuarterState = new NoQuarterState(this);
		hasQuarterState = new HasQuarterState(this);
		soldState = new SoldState(this);
		winnerState = new WinnerState(this);
		this.count = numberGumballs;
 		if (numberGumballs > 0) {
			state = noQuarterState;
		} 
	}
 public void insertQuarter() {
		state.insertQuarter();
	} 
	public void ejectQuarter() {
		state.ejectQuarter();
	}
	public void turnCrank() {
		state.turnCrank();
		state.dispense();
	}
	void setState(State state) {
		this.state = state;
	}
	void releaseBall() {
		System.out.println("A gumball comes rolling out the slot...");
		if (count != 0) {
			count = count - 1;
		}
	}
	int getCount() {
		return count;
	}
	void refill(int count) {
		this.count = count;
		state = noQuarterState;
	}
    public State getState() {
        return state;
    }
    public State getSoldOutState() {
   return soldOutState;
    }
    public State getNoQuarterState() {
        return noQuarterState;
    }
    public State getHasQuarterState() {
        return hasQuarterState;
    }
    public State getSoldState() {
        return soldState;
    }
    public State getWinnerState() {
        return winnerState;
    }
	public String toString() {
		StringBuffer result = new StringBuffer();
		result.append("\nMighty Gumball, Inc.");
		result.append("\nJava-enabled Standing Gumball Model #2004");
		result.append("\nInventory: " + count + " gumball");
		if (count != 1) {
			result.append("s");
		}
		result.append("\n");
		result.append("Machine is " + state + "\n");
		return result.toString();
	}
}
2)GumBallMachineTestDrive.java
package headfirst.state.gumballstatewinner;
public class GumballMachineTestDrive {
	public static void main(String[] args) {
		GumballMachine gumballMachine = 
			new GumballMachine(10);
		System.out.println(gumballMachine);
		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();
		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();
		System.out.println(gumballMachine);
		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();
		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();
		System.out.println(gumballMachine);
		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();
		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();
		System.out.println(gumballMachine);
		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();
		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();
		System.out.println(gumballMachine);
		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();
		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();
		System.out.println(gumballMachine);
	}
}
3)HasQuarterState.java
package headfirst.state.gumballstatewinner;
import java.util.Random;
public class HasQuarterState implements State {
	Random randomWinner = new Random(System.currentTimeMillis());
	GumballMachine gumballMachine;
	public HasQuarterState(GumballMachine gumballMachine) {
		this.gumballMachine = gumballMachine;
	}
	public void insertQuarter() {
		System.out.println("You can't insert another quarter");
	}
	public void ejectQuarter() {
		System.out.println("Quarter returned");
		gumballMachine.setState(gumballMachine.getNoQuarterState());
	}
	public void turnCrank() {
		System.out.println("You turned...");
		int winner = randomWinner.nextInt(10);
		if ((winner == 0) && (gumballMachine.getCount() > 1)) {
			gumballMachine.setState(gumballMachine.getWinnerState());
		} else {
			gumballMachine.setState(gumballMachine.getSoldState());
		}
	}
public void dispense() {
        System.out.println("No gumball dispensed");
    } 
	public String toString() {
		return "waiting for turn of crank";
	}
}
4)NoQuarterState.java
package headfirst.state.gumballstatewinner;
public class NoQuarterState implements State {
    GumballMachine gumballMachine;
    public NoQuarterState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }
	public void insertQuarter() {
		System.out.println("You inserted a quarter");
		gumballMachine.setState(gumballMachine.getHasQuarterState());
	}
	public void ejectQuarter() {
		System.out.println("You haven't inserted a quarter");
	}
	public void turnCrank() {
		System.out.println("You turned, but there's no quarter");
	 }
	public void dispense() {
		System.out.println("You need to pay first");
	} 
	public String toString() {
		return "waiting for quarter";
	}
}
5)SoldOutState.java
package headfirst.state.gumballstatewinner;
public class SoldOutState implements State {
    GumballMachine gumballMachine;
    public SoldOutState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }
	public void insertQuarter() {
		System.out.println("You can't insert a quarter, the machine is sold out");
	}
	public void ejectQuarter() {
		System.out.println("You can't eject, you haven't inserted a quarter yet");
	}
	public void turnCrank() {
		System.out.println("You turned, but there are no gumballs");
	}
	public void dispense() {
		System.out.println("No gumball dispensed");
	}
	public String toString() {
		return "sold out";
	}
}
6)SoldState.java
package headfirst.state.gumballstatewinner;
public class SoldState implements State {
    GumballMachine gumballMachine;
 
public SoldState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }       
	public void insertQuarter() {
		System.out.println("Please wait, we're already giving you a gumball");
	}
	public void ejectQuarter() {
		System.out.println("Sorry, you already turned the crank");
	}
	public void turnCrank() {
		System.out.println("Turning twice doesn't get you another gumball!");
	}
	public void dispense() {
		gumballMachine.releaseBall();
		if (gumballMachine.getCount() > 0) {
			gumballMachine.setState(gumballMachine.getNoQuarterState());
		} else {
			System.out.println("Oops, out of gumballs!");
		gumballMachine.setState(gumballMachine.getSoldOutState());
		}
	} 
	public String toString() {
		return "dispensing a gumball";
	}
}
7)State.java
package headfirst.state.gumballstatewinner;
public interface State {
	public void insertQuarter();
	public void ejectQuarter();
	public void turnCrank();
	public void dispense();
}
8)WinnerState.java
package headfirst.state.gumballstatewinner;
public class WinnerState implements State {
    GumballMachine gumballMachine;
    public WinnerState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }
	public void insertQuarter() {
System.out.println("Please wait, we're already giving you a Gumball");
	}
	public void ejectQuarter() {
System.out.println("Please wait, we're already giving you a Gumball");
	}
	public void turnCrank() {
System.out.println("Turning again doesn't get you another gumball!");
	}
	public void dispense() {
System.out.println("YOU'RE A WINNER! You get two gumballs for your quarter");
		gumballMachine.releaseBall();
		if (gumballMachine.getCount() == 0) {
		gumballMachine.setState(gumballMachine.getSoldOutState());
		} else {
			gumballMachine.releaseBall();
			if (gumballMachine.getCount() > 0) {
		gumballMachine.setState(gumballMachine.getNoQuarterState());
			} else {
            	System.out.println("Oops, out of gumballs!");
		gumballMachine.setState(gumballMachine.getSoldOutState());
			}
		}
	} 
	public String toString() {
		return "despensing two gumballs for your quarter, because YOU'RE A WINNER!";
	}
}

       Singleton Pattern
●	Chocolate
1)ChocolateBoiler.java
package headfirst.singleton.chocolate;
public class ChocolateBoiler {
	private boolean empty;
	private boolean boiled;
	private static ChocolateBoiler uniqueInstance;
	private ChocolateBoiler() {
		empty = true;
		boiled = false;
	}
	public static ChocolateBoiler getInstance() {
		if (uniqueInstance == null) {
	System.out.println("Creating unique instance of Chocolate Boiler");
			uniqueInstance = new ChocolateBoiler();
		}
		System.out.println("Returning instance of Chocolate Boiler");
		return uniqueInstance;
	}
	public void fill() {
		if (isEmpty()) {
			empty = false;
			boiled = false;
			// fill the boiler with a milk/chocolate mixture
		}
	}
	public void drain() {
		if (!isEmpty() && isBoiled()) {
			// drain the boiled milk and chocolate
			empty = true;
		}
	}
	public void boil() {
		if (!isEmpty() && !isBoiled()) {
			// bring the contents to a boil
			boiled = true;
		}
	}
	public boolean isEmpty() {
		return empty;
	}
    public boolean isBoiled() {
	return boiled;
	}
}
2)ChocolateController.java
package headfirst.singleton.chocolate;
public class ChocolateController {
	public static void main(String args[]) {
		ChocolateBoiler boiler = ChocolateBoiler.getInstance();
		boiler.fill();
		boiler.boil();
		boiler.drain();
		// will return the existing instance
		ChocolateBoiler boiler2 = ChocolateBoiler.getInstance();
	}
}
—---------------------------------------------------------------------
●	DCL
1)Singleton.java
package headfirst.singleton.dcl;
//
// Danger!  This implementation of Singleton not
// guaranteed to work prior to Java 5
//
public class Singleton {
	private volatile static Singleton uniqueInstance;
	private Singleton() {}
	public static Singleton getInstance() {
		if (uniqueInstance == null) {
			synchronized (Singleton.class) {
			if (uniqueInstance == null) {
					uniqueInstance = new Singleton();
				}
			}
		}
		return uniqueInstance;
	}
}
2)SingletonClient.java
package headfirst.singleton.dcl;
public class SingletonClient {
	public static void main(String[] args) {
		Singleton singleton = Singleton.getInstance();
	}
}
—-------------------------------------------------------------------
●	ThreadSafe
1)Singleton.java
package headfirst.singleton.threadsafe;
public class Singleton {
	private static Singleton uniqueInstance;
	// other useful instance variables here
	private Singleton() {}
	public static synchronized Singleton getInstance() {
		if (uniqueInstance == null) {
			uniqueInstance = new Singleton();
		}
		return uniqueInstance;
	}// other useful methods here     }
—--------------------------------------------------------------------
●	Classic
1)Singleton.java
package headfirst.singleton.classic;
// NOTE: This is not thread safe!
public class Singleton {
	private static Singleton uniqueInstance;
	// other useful instance variables here
	private Singleton() {}
	public static Singleton getInstance() {
		if (uniqueInstance == null) {
			uniqueInstance = new Singleton();
		}
		return uniqueInstance;
	}
	// other useful methods here
}
—----------------------------------------------------------------------
●	Stat
1)Singleton.java
package headfirst.singleton.stat;
public class Singleton {
	private static Singleton uniqueInstance = new Singleton();
	private Singleton() {}
	public static Singleton getInstance() {
		return uniqueInstance;

	}
}
2)SingletonClient.java
package headfirst.singleton.stat;
public class SingletonClient {
	public static void main(String[] args) {
		Singleton singleton = Singleton.getInstance();
	}
}
           Iterator Pattern
●	DinerMergerCafe
1)AlternatingDinerMenuIterator.java
package headfirst.iterator.dinermergercafe;
import java.util.Iterator;
import java.util.Calendar;
public class AlternatingDinerMenuIterator implements Iterator {
	MenuItem[] items;
	int position;
	public AlternatingDinerMenuIterator(MenuItem[] items) {
		this.items = items;
		Calendar rightNow = Calendar.getInstance();
		position = rightNow.DAY_OF_WEEK % 2;
	}
	public Object next() {
		MenuItem menuItem = items[position];
		position = position + 2;
		return menuItem;
	}
	public boolean hasNext() {
		if (position >= items.length || items[position] == null) {
			return false;
		} else {
			return true;
		}
	}
	public void remove() {
		throw new UnsupportedOperationException(
		"Alternating Diner Menu Iterator does not support remove()");
	}
}
2)CafeMenu.java
package headfirst.iterator.dinermergercafe;
import java.util.*;
public class CafeMenu implements Menu {
	Hashtable menuItems = new Hashtable();
	public CafeMenu() {
	addItem("Veggie Burger and Air Fries","Veggie burger on a whole wheat bun, lettuce, tomato, and fries",true, 3.99);
	addItem("Soup of the day","A cup of the soup of the day, with a side salad",false, 3.69);
	addItem("Burrito","A large burrito, with whole pinto beans, salsa, guacamole",true, 4.29);
	}
	public void addItem(String name, String description, 
	    boolean vegetarian, double price) 
	{
MenuItem menuItem = new MenuItem(name, description, vegetarian, price);
		menuItems.put(menuItem.getName(), menuItem);
	} 
	public Hashtable getItems() {
		return menuItems;
	}
	public Iterator createIterator() {
		return menuItems.values().iterator();
	}
}
3)DinerMenu.java
package headfirst.iterator.dinermergercafe;
import java.util.Iterator;
public class DinerMenu implements Menu {
	static final int MAX_ITEMS = 6;
	int numberOfItems = 0;
	MenuItem[] menuItems;
	public DinerMenu() {
		menuItems = new MenuItem[MAX_ITEMS];
	addItem("Vegetarian BLT","(Fakin') Bacon with lettuce & tomato on whole wheat", true, 2.99);
	addItem("BLT","Bacon with lettuce & tomato on whole wheat", false, 2.99);
	addItem("Soup of the day","Soup of the day, with a side of potato salad", false, 3.29);
	addItem("Hotdog","A hot dog, with saurkraut, relish, onions, topped with cheese",false, 3.05);
	addItem("Steamed Veggies and Brown Rice","A medly of steamed vegetables over brown rice", true, 3.99);
	addItem("Pasta","Spaghetti with Marinara Sauce, and a slice of sourdough bread",true, 3.89);
	} 
	public void addItem(String name, String description, 
	                     boolean vegetarian, double price) 
	{
MenuItem menuItem = new MenuItem(name, description, vegetarian, price);
		if (numberOfItems >= MAX_ITEMS) {
	System.err.println("Sorry, menu is full!  Can't add item to menu");
		} else {
			menuItems[numberOfItems] = menuItem;
			numberOfItems = numberOfItems + 1;
		}
	}
	public MenuItem[] getMenuItems() {
		return menuItems;
	}
	public Iterator createIterator() {
		return new DinerMenuIterator(menuItems);
		//return new AlternatingDinerMenuIterator(menuItems);
	}
	// other menu methods here
}
4)DinerMenuIterator.java
package headfirst.iterator.dinermergercafe;
import java.util.Iterator;
public class DinerMenuIterator implements Iterator {
	MenuItem[] list;
	int position = 0;
	public DinerMenuIterator(MenuItem[] list) {
		this.list = list;
	}
public Object next() {
		MenuItem menuItem = list[position];
		position = position + 1;
		return menuItem;
	} 
	public boolean hasNext() {
		if (position >= list.length || list[position] == null) {
			return false;
		} else {
			return true;
		}
	}
	public void remove() {
		if (position <= 0) {
			throw new IllegalStateException
	("You can't remove an item until you've done at least one next()");
		}
		if (list[position-1] != null) {
			for (int i = position-1; i < (list.length-1); i++) {
				list[i] = list[i+1];
			}
			list[list.length-1] = null;
		}
	}
}
5)Menu.java
package headfirst.iterator.dinermergercafe;
import java.util.Iterator;
public interface Menu {
public Iterator createIterator();
}
6)MenuItem.java
package headfirst.iterator.dinermergercafe;
public class MenuItem {
	String name;
	String description;
	boolean vegetarian;
	double price;
	public MenuItem(String name, String description, 
	                boolean vegetarian,double price) 
	{
		this.name = name;
		this.description = description;
		this.vegetarian = vegetarian;
		this.price = price;
	}
	public String getName() {
		return name;
	}
	public String getDescription() {
		return description;
	}
	public double getPrice() {
		return price;
	}
	public boolean isVegetarian() {
		return vegetarian;
	}  }
7)MenuTestDrive.java
package headfirst.iterator.dinermergercafe;
import java.util.*;
public class MenuTestDrive {
	public static void main(String args[]) {
		PancakeHouseMenu pancakeHouseMenu = new PancakeHouseMenu();
		DinerMenu dinerMenu = new DinerMenu();
		CafeMenu cafeMenu = new CafeMenu();
		Waitress waitress = new Waitress(pancakeHouseMenu, dinerMenu, cafeMenu);
		waitress.printMenu();
		waitress.printVegetarianMenu();
	System.out.println("\nCustomer asks, is the Hotdog vegetarian?");
		System.out.print("Waitress says: ");
		if (waitress.isItemVegetarian("Hotdog")) {
			System.out.println("Yes");
		} else {
			System.out.println("No");
		}
	System.out.println("\nCustomer asks, are the Waffles vegetarian?");
		System.out.print("Waitress says: ");
		if (waitress.isItemVegetarian("Waffles")) {
			System.out.println("Yes");
		} else {
			System.out.println("No");
		}
	}
}
8)PancakehouseMenu.java
package headfirst.iterator.dinermergercafe;
import java.util.ArrayList;
import java.util.Iterator;
public class PancakeHouseMenu implements Menu {
	ArrayList menuItems;
	public PancakeHouseMenu() {
		menuItems = new ArrayList();
		addItem("K&B's Pancake Breakfast", "Pancakes with scrambled eggs, and toast",true,2.99);
		addItem("Regular Pancake Breakfast","Pancakes with fried eggs, sausage",false,2.99);
		addItem("Blueberry Pancakes","Pancakes made with fresh blueberries, and blueberry syrup",true,	3.49);
		addItem("Waffles","Waffles, with your choice of blueberries or strawberries",true,3.59);
	}
	public void addItem(String name, String description,
	                    boolean vegetarian, double price)
	{
		MenuItem menuItem = new MenuItem(name, description, vegetarian, price);
		menuItems.add(menuItem);
	}
	public ArrayList getMenuItems() {
		return menuItems;
	}
	public Iterator createIterator() {
		return menuItems.iterator();
	}
	// other menu methods here
}
9)Waitress.java
package headfirst.iterator.dinermergercafe;
import java.util.Iterator;
public class Waitress {
	Menu pancakeHouseMenu;
	Menu dinerMenu;
	Menu cafeMenu;
public Waitress(Menu pancakeHouseMenu, Menu dinerMenu, Menu cafeMenu) {
		this.pancakeHouseMenu = pancakeHouseMenu;
		this.dinerMenu = dinerMenu;
		this.cafeMenu = cafeMenu;
	} 
	public void printMenu() {
		Iterator pancakeIterator = pancakeHouseMenu.createIterator();
		Iterator dinerIterator = dinerMenu.createIterator();
		Iterator cafeIterator = cafeMenu.createIterator();
		System.out.println("MENU\n----\nBREAKFAST");
		printMenu(pancakeIterator);
		System.out.println("\nLUNCH");
		printMenu(dinerIterator);
		System.out.println("\nDINNER");
		printMenu(cafeIterator);
	}
	private void printMenu(Iterator iterator) {
		while (iterator.hasNext()) {
			MenuItem menuItem = (MenuItem)iterator.next();
			System.out.print(menuItem.getName() + ", ");
			System.out.print(menuItem.getPrice() + " -- ");
			System.out.println(menuItem.getDescription());
		}
	} 
	public void printVegetarianMenu() {
		System.out.println("\nVEGETARIAN MENU\n---------------");
		printVegetarianMenu(pancakeHouseMenu.createIterator());
		printVegetarianMenu(dinerMenu.createIterator());
		printVegetarianMenu(cafeMenu.createIterator());
	}
	public boolean isItemVegetarian(String name) {
		Iterator pancakeIterator = pancakeHouseMenu.createIterator();
		if (isVegetarian(name, pancakeIterator)) {
			return true;
		}
		Iterator dinerIterator = dinerMenu.createIterator();
		if (isVegetarian(name, dinerIterator)) {
			return true;
		}
		Iterator cafeIterator = cafeMenu.createIterator();
		if (isVegetarian(name, cafeIterator)) {
			return true;
		}
		return false;
	}
	private void printVegetarianMenu(Iterator iterator) {
		while (iterator.hasNext()) {
			MenuItem menuItem = (MenuItem)iterator.next();
			if (menuItem.isVegetarian()) {
				System.out.print(menuItem.getName() + ", ");
				System.out.print(menuItem.getPrice() + " -- ");
				System.out.println(menuItem.getDescription());
			}
		}
	}
	private boolean isVegetarian(String name, Iterator iterator) {
		while (iterator.hasNext()) {
			MenuItem menuItem = (MenuItem)iterator.next();
			if (menuItem.getName().equals(name)) {
				if (menuItem.isVegetarian()) {
					return true;
				}
			}
		}
		return false;
	}
}
//^^ WaitressCafeMain
//^^ WaitressCafe
—---------------------------------------------------------------------
●	Transition
1)Menu.java
package headfirst.iterator.transition;
import java.util.Iterator;
public interface Menu {
	public Iterator createIterator();
}
2)MenuItem.java
package headfirst.iterator.transition;
public class MenuItem {
	String name;
	String description;
	boolean vegetarian;
	double price; 
	public MenuItem(String name, String description, 
	                boolean vegetarian,double price) 
	{
		this.name = name;
		this.description = description;
		this.vegetarian = vegetarian;
		this.price = price;
	}
	public String getName() {
		return name;
	}
	public String getDescription() {
		return description;
	}
	public double getPrice() {
		return price;
	}
	public boolean isVegetarian() {
		return vegetarian;
	}
}
3)Waitress.java
package headfirst.iterator.transition;
import java.util.*;  
public class Waitress {
	ArrayList menus;  
	public Waitress(ArrayList menus) {
		this.menus = menus;
	}
	public void printMenu() {
		Iterator menuIterator = menus.iterator();
		while(menuIterator.hasNext()) {
			Menu menu = (Menu)menuIterator.next();
			printMenu(menu.createIterator());
		}
	}
	void printMenu(Iterator iterator) {
		while (iterator.hasNext()) {
			MenuItem menuItem = (MenuItem)iterator.next();
			System.out.print(menuItem.getName() + ", ");
			System.out.print(menuItem.getPrice() + " -- ");
			System.out.println(menuItem.getDescription());
		}
	}
}
—----------------------------------------------------------------------
●	DinerMerger1
1)AlternatingDinerMenuIterator.java
package headfirst.iterator.dinermergeri;
import java.util.Iterator;
import java.util.Calendar;
public class AlternatingDinerMenuIterator implements Iterator {
	MenuItem[] items;
	int position;

	public AlternatingDinerMenuIterator(MenuItem[] items) {
		this.items = items;
		Calendar rightNow = Calendar.getInstance();
		position = rightNow.DAY_OF_WEEK % 2;
	}
	public Object next() {
		MenuItem menuItem = items[position];
		position = position + 2;
		return menuItem;
	}
	public boolean hasNext() {
		if (position >= items.length || items[position] == null) {
			return false;
		} else {
			return true;
		}
	}
	public void remove() {
		throw new UnsupportedOperationException(
		"Alternating Diner Menu Iterator does not support remove()");
	}
}
2)DinerMenu.java
package headfirst.iterator.dinermergeri;
import java.util.Iterator;
public class DinerMenu implements Menu {
	static final int MAX_ITEMS = 6;
	int numberOfItems = 0;
	MenuItem[] menuItems;
	public DinerMenu() {
		menuItems = new MenuItem[MAX_ITEMS];
		addItem("Vegetarian BLT","(Fakin') Bacon with lettuce & tomato on whole wheat", true, 2.99);
		addItem("BLT","Bacon with lettuce & tomato on whole wheat", false, 2.99);
		addItem("Soup of the day","Soup of the day, with a side of potato salad", false, 3.29);
		addItem("Hotdog","A hot dog, with saurkraut, relish, onions, topped with cheese",false, 3.05);
		addItem("Steamed Veggies and Brown Rice","Steamed vegetables over brown rice", true, 3.99);
		addItem("Pasta","Spaghetti with Marinara Sauce, and a slice of sourdough bread",true, 3.89);
	}
	public void addItem(String name, String description, 
	                     boolean vegetarian, double price) 
	{
		MenuItem menuItem = new MenuItem(name, description, vegetarian, price);
		if (numberOfItems >= MAX_ITEMS) {
	System.err.println("Sorry, menu is full!  Can't add item to menu");
		} else {
			menuItems[numberOfItems] = menuItem;
			numberOfItems = numberOfItems + 1;
		}
	}
	public MenuItem[] getMenuItems() {
		return menuItems;
	}
	public Iterator createIterator() {
		return new DinerMenuIterator(menuItems);
		//return new AlternatingDinerMenuIterator(menuItems);
	}
	// other menu methods here
}
3)DinerMenuIterator.java
package headfirst.iterator.dinermergeri; 
import java.util.Iterator;
public class DinerMenuIterator implements Iterator {
	MenuItem[] list;
	int position = 0;
	public DinerMenuIterator(MenuItem[] list) {
		this.list = list;
	}
	public Object next() {
		MenuItem menuItem = list[position];
		position = position + 1;
		return menuItem;
	}
	public boolean hasNext() {
		if (position >= list.length || list[position] == null) {
			return false;
		} else {
			return true;
		}
	}
	public void remove() {
		if (position <= 0) {
			throw new IllegalStateException
	("You can't remove an item until you've done at least one next()");
		}
		if (list[position-1] != null) {
			for (int i = position-1; i < (list.length-1); i++) {
				list[i] = list[i+1];
			}
			list[list.length-1] = null;
		}
	}
}
4)Menu.java
package headfirst.iterator.dinermergeri;
import java.util.Iterator;
public interface Menu {
	public Iterator createIterator();
}
5)MenuItem.java
package headfirst.iterator.dinermergeri;
public class MenuItem {
	String name;
	String description;
	boolean vegetarian;
	double price;
	public MenuItem(String name,String description, 
	                boolean vegetarian,double price) 
	{
		this.name = name;
		this.description = description;
		this.vegetarian = vegetarian;
		this.price = price;
	}
	public String getName() {
		return name;
	}
	public String getDescription() {
		return description;
	}
	public double getPrice() {
		return price;
	}
	public boolean isVegetarian() {
		return vegetarian;
	}
}
6)MenuTestDrive.java
package headfirst.iterator.dinermergeri;
import java.util.*;
public class MenuTestDrive {
	public static void main(String args[]) {
		PancakeHouseMenu pancakeHouseMenu = new PancakeHouseMenu();
		DinerMenu dinerMenu = new DinerMenu();
	Waitress waitress = new Waitress(pancakeHouseMenu, dinerMenu);
		waitress.printMenu();
		waitress.printVegetarianMenu();
	System.out.println("\nCustomer asks, is the Hotdog vegetarian?");
		System.out.print("Waitress says: ");
		if (waitress.isItemVegetarian("Hotdog")) {
			System.out.println("Yes");
		} else {
			System.out.println("No");
		}
	System.out.println("\nCustomer asks, are the Waffles vegetarian?");
		System.out.print("Waitress says: ");
		if (waitress.isItemVegetarian("Waffles")) {
			System.out.println("Yes");
		} else {
			System.out.println("No");
		}
	}
}
7)PancakeHouseMenu.java
package headfirst.iterator.dinermergeri;
import java.util.ArrayList;
import java.util.Iterator;
public class PancakeHouseMenu implements Menu {
	ArrayList menuItems;
	public PancakeHouseMenu() {
		menuItems = new ArrayList();
		addItem("K&B's Pancake Breakfast", "Pancakes with scrambled eggs, and toast",true,2.99);
		addItem("Regular Pancake Breakfast","Pancakes with fried eggs, sausage",false,2.99);
		addItem("Blueberry Pancakes","Pancakes made with fresh blueberries, and blueberry syrup",true,	3.49);
		addItem("Waffles","Waffles, with your choice of blueberries or strawberries",true,3.59);
	}
	public void addItem(String name, String description,
	                    boolean vegetarian, double price)
	{
		MenuItem menuItem = new MenuItem(name, description, vegetarian, price);
		menuItems.add(menuItem);
	}
	public ArrayList getMenuItems() {
		return menuItems;
	}
	public Iterator createIterator() {
		return menuItems.iterator();
	}
	// other menu methods here
}
8)Waitress.java
package headfirst.iterator.dinermergeri;
import java.util.Iterator;
public class Waitress {
	Menu pancakeHouseMenu;
	Menu dinerMenu;
	public Waitress(Menu pancakeHouseMenu, Menu dinerMenu) {
		this.pancakeHouseMenu = pancakeHouseMenu;
		this.dinerMenu = dinerMenu;
	}
	public void printMenu() {
		Iterator pancakeIterator = pancakeHouseMenu.createIterator();
		Iterator dinerIterator = dinerMenu.createIterator();

		System.out.println("MENU\n----\nBREAKFAST");
		printMenu(pancakeIterator);
		System.out.println("\nLUNCH");
		printMenu(dinerIterator);
	}
	private void printMenu(Iterator iterator) {
		while (iterator.hasNext()) {
			MenuItem menuItem = (MenuItem)iterator.next();
			System.out.print(menuItem.getName() + ", ");
			System.out.print(menuItem.getPrice() + " -- ");
			System.out.println(menuItem.getDescription());
		}
	}
	public void printVegetarianMenu() {
		System.out.println("\nVEGETARIAN MENU\n----\nBREAKFAST");
		printVegetarianMenu(pancakeHouseMenu.createIterator());
		System.out.println("\nLUNCH");
		printVegetarianMenu(dinerMenu.createIterator());
	}
	public boolean isItemVegetarian(String name) {
		Iterator pancakeIterator = pancakeHouseMenu.createIterator();
		if (isVegetarian(name, pancakeIterator)) {
			return true;
		}
		Iterator dinerIterator = dinerMenu.createIterator();
		if (isVegetarian(name, dinerIterator)) {
			return true;
		}
		return false;
	}
	private void printVegetarianMenu(Iterator iterator) {
		while (iterator.hasNext()) {
			MenuItem menuItem = (MenuItem)iterator.next();
			if (menuItem.isVegetarian()) {
				System.out.print(menuItem.getName());
				System.out.println("\t\t" + menuItem.getPrice());
			System.out.println("\t" + menuItem.getDescription());
			}
		}
	}
private boolean isVegetarian(String name, Iterator iterator) {
		while (iterator.hasNext()) {
			MenuItem menuItem = (MenuItem)iterator.next();
			if (menuItem.getName().equals(name)) {
				if (menuItem.isVegetarian()) {
					return true;
				}
			}
		}
		return false;
	}
}
—-----------------------------------------------------------------------
●	Transition1
1)Menu.java
//package headfirst.iterator.transition;
import java.util.Iterator;
public interface Menu {
	public Iterator createIterator();   }
2)MenuItem.java
//package headfirst.iterator.transition;
public class MenuItem {
	String name;
	String description;
	boolean vegetarian;
	double price;
	public MenuItem(String name,String description, 
	                boolean vegetarian,double price) 
	{
		this.name = name;
		this.description = description;
		this.vegetarian = vegetarian;
		this.price = price;
	}
	public String getName() {
		return name;
	}
	public String getDescription() {
		return description;
	}
	public double getPrice() {
		return price;
	}
	public boolean isVegetarian() {
		return vegetarian;
	}
}

3)Waitress.java
//package headfirst.iterator.transition;
import java.util.*;   
public class Waitress {
	ArrayList menus;
	public Waitress(ArrayList menus) {
		this.menus = menus;
	}
	public void printMenu() {
		Iterator menuIterator = menus.iterator();
		while(menuIterator.hasNext()) {
			Menu menu = (Menu)menuIterator.next();
			printMenu(menu.createIterator());
		}
	}
	void printMenu(Iterator iterator) {
		while (iterator.hasNext()) {
			MenuItem menuItem = (MenuItem)iterator.next();
			System.out.print(menuItem.getName() + ", ");
			System.out.print(menuItem.getPrice() + " -- ");
			System.out.println(menuItem.getDescription());
		}
	}
} 

  			Observer Pattern
●	Weather
1)CurrentConditionsDisplay.java
package headfirst.observer.weather;
public class CurrentConditionsDisplay implements Observer,DisplayElement {
	private float temperature;
	private float humidity;
	private Subject weatherData;
	public CurrentConditionsDisplay(Subject weatherData) {
		this.weatherData = weatherData;
		weatherData.registerObserver(this);
	}
	public void update(float temperature, float humidity, float pressure) {
		this.temperature = temperature;
		this.humidity = humidity;
		display();
	}
	public void display() {
		System.out.println("Current conditions: " + temperature 
			+ "F degrees and " + humidity + "% humidity");
	}
}
2)DisplayElement.java
package headfirst.observer.weather;
public interface DisplayElement {
	public void display();
}
3)ForcastDisplay.java
package headfirst.observer.weather;
import java.util.*;
public class ForecastDisplay implements n, DisplayElement {
	private float currentPressure = 29.92f;  
	private float lastPressure;
	private WeatherData weatherData;
	public ForecastDisplay(WeatherData weatherData) {
		this.weatherData = weatherData;
		weatherData.registerObserver(this);
	}
	public void update(float temp, float humidity, float pressure) {
                lastPressure = currentPressure;
		currentPressure = pressure;
		display();
	}
	public void display() {
		System.out.print("Forecast: ");
		if (currentPressure > lastPressure) {
			System.out.println("Improving weather on the way!");
		} else if (currentPressure == lastPressure) {
			System.out.println("More of the same");
		} else if (currentPressure < lastPressure) {
			System.out.println("Watch out for cooler, rainy weather");
		}
	}
}
4)HeatIndexDisplay.java
package headfirst.observer.weather;
public class HeatIndexDisplay implements Observer, DisplayElement {
	float heatIndex = 0.0f;
	private WeatherData weatherData;
	public HeatIndexDisplay(WeatherData weatherData) {
		this.weatherData = weatherData;
		weatherData.registerObserver(this);
	}
	public void update(float t, float rh, float pressure) {
		heatIndex = computeHeatIndex(t, rh);
		display();
	}
	private float computeHeatIndex(float t, float rh) {
		float index = (float)((16.923 + (0.185212 * t) + (5.37941 *           rh) - (0.100254 * t * rh) 
			+ (0.00941695 * (t * t)) + (0.00728898 * (rh * rh)) 
			+ (0.000345372 * (t * t * rh)) - (0.000814971 * (t * rh * rh)) +
			(0.0000102102 * (t * t * rh * rh)) - (0.000038646 * (t * t * t)) + (0.0000291583 * 
			(rh * rh * rh)) + (0.00000142721 * (t * t * t * rh)) + 
			(0.000000197483 * (t * rh * rh * rh)) - (0.0000000218429 * (t * t * t * rh * rh)) +
			0.000000000843296 * (t * t * rh * rh * rh)) -
			(0.0000000000481975 * (t * t * t * rh * rh * rh)));
		return index;
	}
	public void display() {
		System.out.println("Heat index is " + heatIndex);
	}
}
5)Observer.java
package headfirst.observer.weather;
public interface Observer {
	public void update(float temp, float humidity, float pressure);
}
6)StatisticsDisplay.java
package headfirst.observer.weather;
import java.util.*;
public class StatisticsDisplay implements Observer, DisplayElement {
	private float maxTemp = 0.0f;
	private float minTemp = 200;
	private float tempSum= 0.0f;
	private int numReadings;
	private WeatherData weatherData;
	public StatisticsDisplay(WeatherData weatherData) {
		this.weatherData = weatherData;
		weatherData.registerObserver(this);
	}
	public void update(float temp, float humidity, float pressure) {
		tempSum += temp;
		numReadings++;
		if (temp > maxTemp) {
			maxTemp = temp;
		}
		if (temp < minTemp) {
			minTemp = temp;
		}
		display();
	}
	public void display() {
System.out.println("Avg/Max/Min temperature = " + (tempSum / numReadings)
			+ "/" + maxTemp + "/" + minTemp);
	}
}
7)Subject.java
package headfirst.observer.weather;
public interface Subject {
	public void registerObserver(Observer o);
	public void removeObserver(Observer o);
	public void notifyObservers();
}
8)WeatherData.java
package headfirst.observer.weather;
import java.util.*;
public class WeatherData implements Subject {
	private ArrayList observers;
	private float temperature;
	private float humidity;
	private float pressure;
	public WeatherData() {
		observers = new ArrayList();
	}
	public void registerObserver(Observer o) {
		observers.add(o);
	}
	public void removeObserver(Observer o) {
		int i = observers.indexOf(o);
		if (i >= 0) {
			observers.remove(i);
		}
	}
	public void notifyObservers() {
		for (int i = 0; i < observers.size(); i++) {
			Observer observer = (Observer)observers.get(i);
			observer.update(temperature, humidity, pressure);
		}
	}
	public void measurementsChanged() {
		notifyObservers();
	}
	public void setMeasurements(float temperature, float humidity, float pressure) {
		this.temperature = temperature;
		this.humidity = humidity;
		this.pressure = pressure;
		measurementsChanged();
	}
	public float getTemperature() {
		return temperature;
	}
	public float getHumidity() {
		return humidity;
	}
	public float getPressure() {
		return pressure;
	}
}
9)WeatherStation.java
package headfirst.observer.weather;
import java.util.*;
public class WeatherStation {
	public static void main(String[] args) {
		WeatherData weatherData = new WeatherData();
		CurrentConditionsDisplay currentDisplay = 
			new CurrentConditionsDisplay(weatherData);
		StatisticsDisplay statisticsDisplay = new StatisticsDisplay(weatherData);
		ForecastDisplay forecastDisplay = new ForecastDisplay(weatherData);
		weatherData.setMeasurements(80, 65, 30.4f);
		weatherData.setMeasurements(82, 70, 29.2f);
		weatherData.setMeasurements(78, 90, 29.2f);
	}
}
10)WeatherStationHeatIndex.java
package headfirst.observer.weather;
import java.util.*;
public class WeatherStationHeatIndex {
	public static void main(String[] args) {
		WeatherData weatherData = new WeatherData();
		CurrentConditionsDisplay currentDisplay = new CurrentConditionsDisplay(weatherData);
		StatisticsDisplay statisticsDisplay = new StatisticsDisplay(weatherData);
		ForecastDisplay forecastDisplay = new ForecastDisplay(weatherData);
		HeatIndexDisplay heatIndexDisplay = new HeatIndexDisplay(weatherData);
		weatherData.setMeasurements(80, 65, 30.4f);
		weatherData.setMeasurements(82, 70, 29.2f);
		weatherData.setMeasurements(78, 90, 29.2f);
	}
}
—-----------------------------------------------------------------------

Factory Pattern
●	PizzaFm
1)ChicagoPizzaStore.java
package headfirst.factory.pizzafm;
public class ChicagoPizzaStore extends PizzaStore {
	Pizza createPizza(String item) {
        	if (item.equals("cheese")) {
            		return new ChicagoStyleCheesePizza();
        	} else if (item.equals("veggie")) {
        	    	return new ChicagoStyleVeggiePizza();
        	} else if (item.equals("clam")) {
        	    	return new ChicagoStyleClamPizza();
        	} else if (item.equals("pepperoni")) {
            		return new ChicagoStylePepperoniPizza();
        	} else return null;
	}
}
2)ChicagoStyleCheesePizza.java
package headfirst.factory.pizzafm;
public class ChicagoStyleCheesePizza extends Pizza {
	public ChicagoStyleCheesePizza() { 
		name = "Chicago Style Deep Dish Cheese Pizza";
		dough = "Extra Thick Crust Dough";
		sauce = "Plum Tomato Sauce";
		toppings.add("Shredded Mozzarella Cheese");
	}
	void cut() {
		System.out.println("Cutting the pizza into square slices");
	}
}
3)ChicagoStyleClamPizza.java
package headfirst.factory.pizzafm;
public class ChicagoStyleClamPizza extends Pizza {
	public ChicagoStyleClamPizza() {
		name = "Chicago Style Clam Pizza";
		dough = "Extra Thick Crust Dough";
		sauce = "Plum Tomato Sauce";
		toppings.add("Shredded Mozzarella Cheese");
		toppings.add("Frozen Clams from Chesapeake Bay");
	}
	void cut() {
		System.out.println("Cutting the pizza into square slices");
	}
}
4)ChicagoStylePepperoniPizza.java
package headfirst.factory.pizzafm;
public class ChicagoStylePepperoniPizza extends Pizza {
	public ChicagoStylePepperoniPizza() {
		name = "Chicago Style Pepperoni Pizza";
		dough = "Extra Thick Crust Dough";
		sauce = "Plum Tomato Sauce";
		toppings.add("Shredded Mozzarella Cheese");
		toppings.add("Black Olives");
		toppings.add("Spinach");
		toppings.add("Eggplant");
		toppings.add("Sliced Pepperoni");
	}
	void cut() {
		System.out.println("Cutting the pizza into square slices");
	}
}
5)ChicagoStyleVeggiePizza.java
package headfirst.factory.pizzafm;
public class ChicagoStyleVeggiePizza extends Pizza {
	public ChicagoStyleVeggiePizza() {
		name = "Chicago Deep Dish Veggie Pizza";
		dough = "Extra Thick Crust Dough";
		sauce = "Plum Tomato Sauce";
		toppings.add("Shredded Mozzarella Cheese");
		toppings.add("Black Olives");
		toppings.add("Spinach");
		toppings.add("Eggplant");
	}
	void cut() {
		System.out.println("Cutting the pizza into square slices");
	}
}
6)DependentPizzaStore.java
package headfirst.factory.pizzafm;
public class DependentPizzaStore {
	public Pizza createPizza(String style, String type) {
		Pizza pizza = null;
		if (style.equals("NY")) {
			if (type.equals("cheese")) {
				pizza = new NYStyleCheesePizza();
			} else if (type.equals("veggie")) {
				pizza = new NYStyleVeggiePizza();
			} else if (type.equals("clam")) {
				pizza = new NYStyleClamPizza();
			} else if (type.equals("pepperoni")) {
				pizza = new NYStylePepperoniPizza();
			}
		} else if (style.equals("Chicago")) {
			if (type.equals("cheese")) {
				pizza = new ChicagoStyleCheesePizza();
			} else if (type.equals("veggie")) {
				pizza = new ChicagoStyleVeggiePizza();
			} else if (type.equals("clam")) {
				pizza = new ChicagoStyleClamPizza();
			} else if (type.equals("pepperoni")) {
				pizza = new ChicagoStylePepperoniPizza();
			}
		} else {
			System.out.println("Error: invalid type of pizza");
			return null;
		}
		pizza.prepare();
		pizza.bake();
		pizza.cut();
		pizza.box();
		return pizza;
	}
}
7)NYPizzaStore.java
package headfirst.factory.pizzafm;
public class NYPizzaStore extends PizzaStore {
	Pizza createPizza(String item) {
		if (item.equals("cheese")) {
			return new NYStyleCheesePizza();
		} else if (item.equals("veggie")) {
			return new NYStyleVeggiePizza();
		} else if (item.equals("clam")) {
			return new NYStyleClamPizza();
		} else if (item.equals("pepperoni")) {
			return new NYStylePepperoniPizza();
		} else return null;
	}
}
8)NYStyleCheesePizza.java
package headfirst.factory.pizzafm;
public class NYStyleCheesePizza extends Pizza {
	public NYStyleCheesePizza() { 
		name = "NY Style Sauce and Cheese Pizza";
		dough = "Thin Crust Dough";
		sauce = "Marinara Sauce";
		toppings.add("Grated Reggiano Cheese");
	}
}
9)NYStyleClamPizza.java
package headfirst.factory.pizzafm;
public class NYStyleClamPizza extends Pizza {
	public NYStyleClamPizza() {
		name = "NY Style Clam Pizza";
		dough = "Thin Crust Dough";
		sauce = "Marinara Sauce";
		toppings.add("Grated Reggiano Cheese");
		toppings.add("Fresh Clams from Long Island Sound");
	}
}
10)NYStylePepperoniPizza.java
package headfirst.factory.pizzafm;
public class NYStylePepperoniPizza extends Pizza {
	public NYStylePepperoniPizza() {
		name = "NY Style Pepperoni Pizza";
		dough = "Thin Crust Dough";
		sauce = "Marinara Sauce";
		toppings.add("Grated Reggiano Cheese");
		toppings.add("Sliced Pepperoni");
		toppings.add("Garlic");
		toppings.add("Onion");
		toppings.add("Mushrooms");
		toppings.add("Red Pepper");
	}
}
11)NYStyleVeggiePizza.java
package headfirst.factory.pizzafm;
public class NYStyleVeggiePizza extends Pizza {
	public NYStyleVeggiePizza() {
		name = "NY Style Veggie Pizza";
		dough = "Thin Crust Dough";
		sauce = "Marinara Sauce";
		toppings.add("Grated Reggiano Cheese");
		toppings.add("Garlic");
		toppings.add("Onion");
		toppings.add("Mushrooms");
		toppings.add("Red Pepper");
	}
}
12)Pizza.java
package headfirst.factory.pizzafm;
import java.util.ArrayList;
public abstract class Pizza {
	String name;
	String dough;
	String sauce;
	ArrayList toppings = new ArrayList();
	void prepare() {
		System.out.println("Preparing " + name);
		System.out.println("Tossing dough...");
		System.out.println("Adding sauce...");
		System.out.println("Adding toppings: ");
		for (int i = 0; i < toppings.size(); i++) {
			System.out.println("   " + toppings.get(i));
		}
	}
	void bake() {
		System.out.println("Bake for 25 minutes at 350");
	}
	void cut() {
		System.out.println("Cutting the pizza into diagonal slices");
	}
	void box() {
		System.out.println("Place pizza in official PizzaStore box");
	}
 
	public String getName() {
		return name;
	}
	public String toString() {
		StringBuffer display = new StringBuffer();
		display.append("---- " + name + " ----\n");
		display.append(dough + "\n");
		display.append(sauce + "\n");
		for (int i = 0; i < toppings.size(); i++) {
			display.append((String )toppings.get(i) + "\n");
		}
		return display.toString();
	}
}
13)PizzaStore.java
package headfirst.factory.pizzafm;
public abstract class PizzaStore {
	abstract Pizza createPizza(String item);
	public Pizza orderPizza(String type) {
		Pizza pizza = createPizza(type);
	System.out.println("--- Making a " + pizza.getName() + " ---");
		pizza.prepare();
		pizza.bake();
		pizza.cut();
		pizza.box();
		return pizza;
	}
}
14)PizzaTestDrive.java
package headfirst.factory.pizzafm;
public class PizzaTestDrive {
	public static void main(String[] args) {
		PizzaStore nyStore = new NYPizzaStore();
		PizzaStore chicagoStore = new ChicagoPizzaStore();
		Pizza pizza = nyStore.orderPizza("cheese");
	System.out.println("Ethan ordered a " + pizza.getName() + "\n");
		pizza = chicagoStore.orderPizza("cheese");
	System.out.println("Joel ordered a " + pizza.getName() + "\n");
		pizza = nyStore.orderPizza("clam");
	System.out.println("Ethan ordered a " + pizza.getName() + "\n"); 
		pizza = chicagoStore.orderPizza("clam");
	System.out.println("Joel ordered a " + pizza.getName() + "\n");
		pizza = nyStore.orderPizza("pepperoni");
	System.out.println("Ethan ordered a " + pizza.getName() + "\n");
		pizza = chicagoStore.orderPizza("pepperoni");
	System.out.println("Joel ordered a " + pizza.getName() + "\n");
		pizza = nyStore.orderPizza("veggie");
	System.out.println("Ethan ordered a " + pizza.getName() + "\n");
		pizza = chicagoStore.orderPizza("veggie");
	System.out.println("Joel ordered a " + pizza.getName() + "\n");
	}
}
—---------------------------------------------------------------------
●	Pizzas
1)CheesePizza.java
package headfirst.factory.pizzas;
public class CheesePizza extends Pizza {
	public CheesePizza() {
		name = "Cheese Pizza";
		dough = "Regular Crust";
		sauce = "Marinara Pizza Sauce";
		toppings.add("Fresh Mozzarella");
		toppings.add("Parmesan");
	}
}
2)ClamPizza.java
package headfirst.factory.pizzas;
public class ClamPizza extends Pizza {
	public ClamPizza() {
		name = "Clam Pizza";
		dough = "Thin crust";
		sauce = "White garlic sauce";
		toppings.add("Clams");
		toppings.add("Grated parmesan cheese");
	}
}
3)PepperoniPizza.java
package headfirst.factory.pizzas;
public class PepperoniPizza extends Pizza {
	public PepperoniPizza() {
		name = "Pepperoni Pizza";
		dough = "Crust";
		sauce = "Marinara sauce";
		toppings.add("Sliced Pepperoni");
		toppings.add("Sliced Onion");
		toppings.add("Grated parmesan cheese");
	}
}
4)Pizza.java
package headfirst.factory.pizzas;
import java.util.ArrayList;
abstract public class Pizza {
	String name;
	String dough;
	String sauce;
	ArrayList toppings = new ArrayList();
	public String getName() {
		return name;
	}
	public void prepare() {
		System.out.println("Preparing " + name);
	}
	public void bake() {
		System.out.println("Baking " + name);
	}
	public void cut() {
		System.out.println("Cutting " + name);
	}
	public void box() {
		System.out.println("Boxing " + name);
	}
	public String toString() {
		// code to display pizza name and ingredients
		StringBuffer display = new StringBuffer();
		display.append("---- " + name + " ----\n");
		display.append(dough + "\n");
		display.append(sauce + "\n");
		for (int i = 0; i < toppings.size(); i++) {
			display.append((String )toppings.get(i) + "\n");
		}
		return display.toString();
	}
}
5)PizzaStore.java
package headfirst.factory.pizzas;
public class PizzaStore {
	SimplePizzaFactory factory;
	public PizzaStore(SimplePizzaFactory factory) { 
		this.factory = factory;
	}
	public Pizza orderPizza(String type) {
		Pizza pizza;
		pizza = factory.createPizza(type);
		pizza.prepare();
		pizza.bake();
		pizza.cut();
		pizza.box();
		return pizza;
	}

}
6)PizzaTestDrive.java
package headfirst.factory.pizzas;
public class PizzaTestDrive {
	public static void main(String[] args) {
		SimplePizzaFactory factory = new SimplePizzaFactory();
		PizzaStore store = new PizzaStore(factory);
		Pizza pizza = store.orderPizza("cheese");
		System.out.println("We ordered a " + pizza.getName() + "\n");
		pizza = store.orderPizza("veggie");
		System.out.println("We ordered a " + pizza.getName() + "\n");
	}
}
7)SimplePizzaFactory.java
package headfirst.factory.pizzas;
public class SimplePizzaFactory {
	public Pizza createPizza(String type) {
		Pizza pizza = null;
		if (type.equals("cheese")) {
			pizza = new CheesePizza();
		} else if (type.equals("pepperoni")) {
			pizza = new PepperoniPizza();
		} else if (type.equals("clam")) {
			pizza = new ClamPizza();
		} else if (type.equals("veggie")) {
			pizza = new VeggiePizza();
		}
		return pizza;
	}
}
8)VeggiePizza.java
package headfirst.factory.pizzas;
public class VeggiePizza extends Pizza {
	public VeggiePizza() {
		name = "Veggie Pizza";
		dough = "Crust";
		sauce = "Marinara sauce";
		toppings.add("Shredded mozzarella");
		toppings.add("Grated parmesan");
		toppings.add("Diced onion");
		toppings.add("Sliced mushrooms");
		toppings.add("Sliced red pepper");
		toppings.add("Sliced black olives");
	}
}
•	SHAPE INTERFACE
•	Shape.java
•	
•	public interface Shape {
•	   void draw();
•	}
•	RoundedRectangle.java
•	public class RoundedRectangle implements Shape {
•	   @Override
•	   public void draw() {
•	      System.out.println("Inside RoundedRectangle::draw() method.");
•	   }
•	}
•	RoundedSquare.java
•	public class RoundedSquare implements Shape {
•	   @Override
•	   public void draw() {
•	      System.out.println("Inside RoundedSquare::draw() method.");
•	   }
•	}

Rectangle.java
public class Rectangle implements Shape {
   @Override
   public void draw() {
      System.out.println("Inside Rectangle::draw() method.");
   }
}
.
AbstractFactory.java
public abstract class AbstractFactory {
   abstract Shape getShape(String shapeType) ;
}
ShapeFactory.java
public class ShapeFactory extends AbstractFactory {
   @Override
   public Shape getShape(String shapeType){    
      if(shapeType.equalsIgnoreCase("RECTANGLE")){
         return new Rectangle();         
      }else if(shapeType.equalsIgnoreCase("SQUARE")){
         return new Square();
      }	 
      return null;
   }
}

RoundedShapeFactory.java
public class RoundedShapeFactory extends AbstractFactory {
   @Override
   public Shape getShape(String shapeType){    
      if(shapeType.equalsIgnoreCase("RECTANGLE")){
         return new RoundedRectangle();         
      }else if(shapeType.equalsIgnoreCase("SQUARE")){
         return new RoundedSquare();
      }	 
      return null;
   }
}

FactoryProducer.java
public class FactoryProducer {
   public static AbstractFactory getFactory(boolean rounded){   
      if(rounded){
         return new RoundedShapeFactory();         
      }else{
         return new ShapeFactory();
      }
   }
}

AbstractFactoryPatternDemo.java
public class AbstractFactoryPatternDemo {
   public static void main(String[] args) {
      //get shape factory
      AbstractFactory shapeFactory = FactoryProducer.getFactory(false);
      //get an object of Shape Rectangle
      Shape shape1 = shapeFactory.getShape("RECTANGLE");
      //call draw method of Shape Rectangle
      shape1.draw();
      //get an object of Shape Square 
      Shape shape2 = shapeFactory.getShape("SQUARE");
      //call draw method of Shape Square
      shape2.draw();
      //get shape factory
      AbstractFactory shapeFactory1 = FactoryProducer.getFactory(true);
      //get an object of Shape Rectangle
      Shape shape3 = shapeFactory1.getShape("RECTANGLE");
      //call draw method of Shape Rectangle
      shape3.draw();
      //get an object of Shape Square 
      Shape shape4 = shapeFactory1.getShape("SQUARE");
      //call draw method of Shape Square
      shape4.draw();
      
   }
}

Verify the output.
Inside Rectangle::draw() method.
Inside Square::draw() method.
Inside RoundedRectangle::draw() method.
Inside RoundedSquare::draw() method.


			Facade Pattern
●	HomeTheatre
1)Amplifier.java
package headfirst.facade.hometheater;
public class Amplifier {
	String description;
	Tuner tuner;
	DvdPlayer dvd;
	CdPlayer cd;
	public Amplifier(String description) {
		this.description = description;
	}
	public void on() {
		System.out.println(description + " on");
	}
	public void off() {
		System.out.println(description + " off");
	}
	public void setStereoSound() {
		System.out.println(description + " stereo mode on");
	}
	public void setSurroundSound() {
 System.out.println(description + " surround sound on (5 speakers, 1 subwoofer)");
	}
	public void setVolume(int level) {
	System.out.println(description + " setting volume to " + level);
	}
	public void setTuner(Tuner tuner) {
		System.out.println(description + " setting tuner to " + dvd);
		this.tuner = tuner;
	}
	public void setDvd(DvdPlayer dvd) {
	System.out.println(description + " setting DVD player to " + dvd);
		this.dvd = dvd;
	}
	public void setCd(CdPlayer cd) {
	System.out.println(description + " setting CD player to " + cd);
		this.cd = cd;
	}
	public String toString() {
		return description;
	}
}
2)CdPlayer.java
package headfirst.facade.hometheater;
public class CdPlayer {
	String description;
	int currentTrack;
	Amplifier amplifier;
	String title;
	public CdPlayer(String description, Amplifier amplifier) {
		this.description = description;
		this.amplifier = amplifier;
	}
	public void on() {
		System.out.println(description + " on");
	}
	public void off() {
		System.out.println(description + " off");
	}
	public void eject() {
		title = null;
		System.out.println(description + " eject");
	}
	public void play(String title) {
		this.title = title;
		currentTrack = 0;
	System.out.println(description + " playing \"" + title + "\"");
	}
	public void play(int track) {
		if (title == null) {
	System.out.println(description + " can't play track " + currentTrack + ", no cd inserted");
		} else {
			currentTrack = track;
	System.out.println(description + " playing track " + currentTrack);
		}
	}
	public void stop() {
		currentTrack = 0;
		System.out.println(description + " stopped");
	}
	public void pause() {
	System.out.println(description + " paused \"" + title + "\"");
	}
	public String toString() {
		return description;
	}
}
3)DvdPlayer.java
package headfirst.facade.hometheater;
public class DvdPlayer {
	String description;
	int currentTrack;
	Amplifier amplifier;
	String movie;
	public DvdPlayer(String description, Amplifier amplifier) {
		this.description = description;
		this.amplifier = amplifier;
	}
	public void on() {
		System.out.println(description + " on");
	}
	public void off() {
		System.out.println(description + " off");
	}
        public void eject() {
		movie = null;
                System.out.println(description + " eject");
        }
	public void play(String movie) {
		this.movie = movie;
		currentTrack = 0;
	System.out.println(description + " playing \"" + movie + "\"");
	}
	public void play(int track) {
		if (movie == null) {
			System.out.println(description + " can't play track " + track + " no dvd inserted");
		} else {
			currentTrack = track;
			System.out.println(description + " playing track " + currentTrack + " of \"" + movie + "\"");
		}
	}
	public void stop() {
		currentTrack = 0;
	System.out.println(description + " stopped \"" + movie + "\"");
	}
	public void pause() {
	System.out.println(description + " paused \"" + movie + "\"");
	}
	public void setTwoChannelAudio() {
		System.out.println(description + " set two channel audio");
	}
 
	public void setSurroundAudio() {
		System.out.println(description + " set surround audio");
	}
	public String toString() {
		return description;
	}
}
4)HomeTheatreFacade.java
package headfirst.facade.hometheater;
public class HomeTheaterFacade {
	Amplifier amp;
	Tuner tuner;
	DvdPlayer dvd;
	CdPlayer cd;
	Projector projector;
	TheaterLights lights;
	Screen screen;
	PopcornPopper popper;
	public HomeTheaterFacade(Amplifier amp, 
				 Tuner tuner, 
				 DvdPlayer dvd, 
				 CdPlayer cd, 
				 Projector projector, 
				 Screen screen,
				 TheaterLights lights,
				 PopcornPopper popper) {
		this.amp = amp;
		this.tuner = tuner;
		this.dvd = dvd;
		this.cd = cd;
		this.projector = projector;
		this.screen = screen;
		this.lights = lights;
		this.popper = popper;
	}
	public void watchMovie(String movie) {
		System.out.println("Get ready to watch a movie...");
		popper.on();
		popper.pop();
		lights.dim(10);
		screen.down();
		projector.on();
		projector.wideScreenMode();
		amp.on();
		amp.setDvd(dvd);
		amp.setSurroundSound();
		amp.setVolume(5);
		dvd.on();
		dvd.play(movie);
	}
	public void endMovie() {
		System.out.println("Shutting movie theater down...");
		popper.off();
		lights.on();
		screen.up();
		projector.off();
		amp.off();
		dvd.stop();
		dvd.eject();
		dvd.off();
	}
	public void listenToCd(String cdTitle) {
	System.out.println("Get ready for an audiopile experence...");
		lights.on();
		amp.on();
		amp.setVolume(5);
		amp.setCd(cd);
		amp.setStereoSound();
		cd.on();
		cd.play(cdTitle);
	}
	public void endCd() {
		System.out.println("Shutting down CD...");
		amp.off();
		amp.setCd(cd);
		cd.eject();
		cd.off();
	}
	public void listenToRadio(double frequency) {
		System.out.println("Tuning in the airwaves...");
		tuner.on();
		tuner.setFrequency(frequency);
		amp.on();
		amp.setVolume(5);
		amp.setTuner(tuner);
	}

	public void endRadio() {
		System.out.println("Shutting down the tuner...");
		tuner.off();
		amp.off();
	}
}
5)HomeTheatreTestDrive.java
package headfirst.facade.hometheater;
public class HomeTheaterTestDrive {
	public static void main(String[] args) {
		Amplifier amp = new Amplifier("Top-O-Line Amplifier");
		Tuner tuner = new Tuner("Top-O-Line AM/FM Tuner", amp);
		DvdPlayer dvd = new DvdPlayer("Top-O-Line DVD Player", amp);
		CdPlayer cd = new CdPlayer("Top-O-Line CD Player", amp);
	Projector projector = new Projector("Top-O-Line Projector", dvd);
	TheaterLights lights = new TheaterLights("Theater Ceiling Lights");
		Screen screen = new Screen("Theater Screen");
		PopcornPopper popper = new PopcornPopper("Popcorn Popper");
		HomeTheaterFacade homeTheater = 
				new HomeTheaterFacade(amp, tuner, dvd, cd, 
						projector, screen, lights, popper);
		homeTheater.watchMovie("Raiders of the Lost Ark");
		homeTheater.endMovie();
	}
}
6)PopcornPopper.java
package headfirst.facade.hometheater;
public class PopcornPopper {
	String description;
	public PopcornPopper(String description) {
		this.description = description;
	}
	public void on() {
		System.out.println(description + " on");
	}
	public void off() {
		System.out.println(description + " off");
	}
	public void pop() {
		System.out.println(description + " popping popcorn!");
	}
        public String toString() {
                return description;
        }
}
7)Projector.java
package headfirst.facade.hometheater;
public class Projector {
	String description;
	DvdPlayer dvdPlayer;
	public Projector(String description, DvdPlayer dvdPlayer) {
		this.description = description;
		this.dvdPlayer = dvdPlayer;
	}
	public void on() {
		System.out.println(description + " on");
	}
	public void off() {
		System.out.println(description + " off");
	}
	public void wideScreenMode() {
		System.out.println(description + " in widescreen mode (16x9 aspect ratio)");
	}
	public void tvMode() {
		System.out.println(description + " in tv mode (4x3 aspect ratio)");
	}
        public String toString() {
                return description;
        }
}
8)Screen.java
package headfirst.facade.hometheater;
public class Screen {
	String description;
	public Screen(String description) {
		this.description = description;
	}
	public void up() {
		System.out.println(description + " going up");
	}
	public void down() {
		System.out.println(description + " going down");
	}
        public String toString() {
                return description;
        }
}
9)TheatreLights.java
package headfirst.facade.hometheater;
public class TheaterLights {
	String description;
	public TheaterLights(String description) {
		this.description = description;
	}
	public void on() {
		System.out.println(description + " on");
	}
	public void off() {
		System.out.println(description + " off");
	}
	public void dim(int level) {
		System.out.println(description + " dimming to " + level  + "%");
	}
        public String toString() {
                return description;
        }
}
10)Tuner.java
package headfirst.facade.hometheater;
public class Tuner {
	String description;
	Amplifier amplifier;
	double frequency;
	public Tuner(String description, Amplifier amplifier) {
		this.description = description;
	}
	public void on() {
		System.out.println(description + " on");
	}
	public void off() {
		System.out.println(description + " off");
	}
	public void setFrequency(double frequency) {
System.out.println(description + " setting frequency to " + frequency);
		this.frequency = frequency;
	} 
	public void setAm() {
		System.out.println(description + " setting AM mode");
	}
	public void setFm() {
		System.out.println(description + " setting FM mode");
	}
        public String toString() {
                return description;
        }
}
Decorator Pattern
●	Io
1)InputTest.java
package headfirst.decorator.io;
import java.io.*;
public class InputTest {
	public static void main(String[] args) throws IOException {
		int c;
		try {
			InputStream in = 
				new LowerCaseInputStream(
					new BufferedInputStream(
						new FileInputStream("test.txt")));
			while((c = in.read()) >= 0) {
				System.out.print((char)c);
			}
			in.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
2)LowerCaseInputStream.java
package headfirst.decorator.io;
import java.io.*;
public class LowerCaseInputStream extends FilterInputStream {
	public LowerCaseInputStream(InputStream in) {
		super(in);
	}
	public int read() throws IOException {
		int c = super.read();
		return (c == -1 ? c : Character.toLowerCase((char)c));
	}	
	public int read(byte[] b, int offset, int len) throws IOException {
		int result = super.read(b, offset, len);
		for (int i = offset; i < offset+result; i++) {
			b[i] = (byte)Character.toLowerCase((char)b[i]);
		}
		return result;
	}
}
—----------------------------------------------------------------------
●	StarBuzz
1)Beverage.java
package headfirst.decorator.starbuzz;
public abstract class Beverage {
	String description = "Unknown Beverage";
	public String getDescription() {
		return description;
	}
	public abstract double cost();
}
2)CondimentDecorator.java
package headfirst.decorator.starbuzz;
public abstract class CondimentDecorator extends Beverage {
	public abstract String getDescription();
}
3)DarkRoast.java
package headfirst.decorator.starbuzz;
public class DarkRoast extends Beverage {
	public DarkRoast() {
		description = "Dark Roast Coffee";
	}
	public double cost() {
		return .99;
	}
}
4)Decaf.java
package headfirst.decorator.starbuzz;
public class Decaf extends Beverage {
	public Decaf() {
		description = "Decaf Coffee";
	}
	public double cost() {
		return 1.05;
	}
}
5)Espresso.java
package headfirst.decorator.starbuzz;
public class Espresso extends Beverage {
	public Espresso() {
		description = "Espresso";
	}
	public double cost() {
		return 1.99;
	}
}
6)HouseBlend.java
package headfirst.decorator.starbuzz;
public class HouseBlend extends Beverage {
	public HouseBlend() {
		description = "House Blend Coffee";
	}
	public double cost() {
		return .89;
	}
}
7)Milk.java
package headfirst.decorator.starbuzz;
public class Milk extends CondimentDecorator {
	Beverage beverage;
	public Milk(Beverage beverage) {
		this.beverage = beverage;
	}
	public String getDescription() {
		return beverage.getDescription() + ", Milk";
	}
	public double cost() {
		return .10 + beverage.cost();
	}
}
8)Mocha.java
package headfirst.decorator.starbuzz;
public class Mocha extends CondimentDecorator {
	Beverage beverage;
	public Mocha(Beverage beverage) {
		this.beverage = beverage;
	}
	public String getDescription() {
		return beverage.getDescription() + ", Mocha";
	}
	public double cost() {
		return .20 + beverage.cost();
	}
}
9)Soy.java
package headfirst.decorator.starbuzz;
public class Soy extends CondimentDecorator {
	Beverage beverage;
	public Soy(Beverage beverage) {
		this.beverage = beverage;
	}
	public String getDescription() {
		return beverage.getDescription() + ", Soy";
	}
	public double cost() {
		return .15 + beverage.cost();
	}
}
10)StarbuzzCoffee.java
package headfirst.decorator.starbuzz;
public class StarbuzzCoffee {
	public static void main(String args[]) {
		Beverage beverage = new Espresso();
System.out.println(beverage.getDescription() + " $" + beverage.cost());
		Beverage beverage2 = new DarkRoast();
		beverage2 = new Mocha(beverage2);
		beverage2 = new Mocha(beverage2);
		beverage2 = new Whip(beverage2);
System.out.println(beverage2.getDescription() + " $" +beverage2.cost());
		Beverage beverage3 = new HouseBlend();
		beverage3 = new Soy(beverage3);
		beverage3 = new Mocha(beverage3);
		beverage3 = new Whip(beverage3);
System.out.println(beverage3.getDescription() + " $" +beverage3.cost());
	}
}
11)Whip.java
package headfirst.decorator.starbuzz;
public class Whip extends CondimentDecorator {
	Beverage beverage;
	public Whip(Beverage beverage) {
		this.beverage = beverage;
	}
	public String getDescription() {
		return beverage.getDescription() + ", Whip";
	}
	public double cost() {
		return .10 + beverage.cost();
	}
}

—----------------------------------------------------------------------

Adapter Pattern
●	Ducks
1)Duck.java
package headfirst.adapter.ducks;
public interface Duck {
	public void quack();
	public void fly();
}
2)DuckAdapter.java
package headfirst.adapter.ducks;
import java.util.Random;
public class DuckAdapter implements Turkey {
	Duck duck;
	Random rand;
	public DuckAdapter(Duck duck) {
		this.duck = duck;
		rand = new Random();
	}
	public void gobble() {
		duck.quack();
	}
	public void fly() {
		if (rand.nextInt(5)  == 0) {
		     duck.fly();
		}
	}
}
3)DuckTestDrive.java
package headfirst.adapter.ducks;
public class DuckTestDrive {
	public static void main(String[] args) {
		MallardDuck duck = new MallardDuck();
		WildTurkey turkey = new WildTurkey();
		Duck turkeyAdapter = new TurkeyAdapter(turkey);
		System.out.println("The Turkey says...");
		turkey.gobble();
		turkey.fly();
		System.out.println("\nThe Duck says...");
		testDuck(duck); 
		System.out.println("\nThe TurkeyAdapter says...");
		testDuck(turkeyAdapter);
	}
 static void testDuck(Duck duck) {
		duck.quack();
		duck.fly();
	}
}
4)MallardDuck.java
package headfirst.adapter.ducks;
public class MallardDuck implements Duck {
	public void quack() {
		System.out.println("Quack");
	}
	public void fly() {
		System.out.println("I'm flying");
	}
}
5)Turkey.java
package headfirst.adapter.ducks;
public interface Turkey {
	public void gobble();
	public void fly();
}
6)TurkeyAdapter.java
package headfirst.adapter.ducks;
public class TurkeyAdapter implements Duck {
	Turkey turkey;
	public TurkeyAdapter(Turkey turkey) {
		this.turkey = turkey;
	}
	public void quack() {
		turkey.gobble();
	}
	public void fly() {
		for(int i=0; i < 5; i++) {
			turkey.fly();
		}
	}
}
7)TurkeyTestDrive.java
package headfirst.adapter.ducks;
public class TurkeyTestDrive {
	public static void main(String[] args) {
		MallardDuck duck = new MallardDuck();
		Turkey duckAdapter = new DuckAdapter(duck);
		for(int i=0;i<10;i++) {
			System.out.println("The DuckAdapter says...");
			duckAdapter.gobble();
			duckAdapter.fly();
		}
	}
}
8)WildTurkey.java
package headfirst.adapter.ducks;
public class WildTurkey implements Turkey {
	public void gobble() {
		System.out.println("Gobble gobble");
	}
	public void fly() {
		System.out.println("I'm flying a short distance");
	}
}
●	Iterenum
1)EI.java
package headfirst.adapter.iterenum;
import java.util.*;
public class EI {
	public static void main (String args[]) {
		Vector v = new Vector(Arrays.asList(args));
		Enumeration enumeration = v.elements();
		while (enumeration.hasMoreElements()) {
			System.out.println(enumeration.nextElement());
		}
		Iterator iterator = v.iterator();
		while (iterator.hasNext()) {
			System.out.println(iterator.next());
		}
	}
}
2)EnumerationIterator.java
package headfirst.adapter.iterenum;
import java.util.*;
public class EnumerationIterator implements Iterator {
	Enumeration enumeration;
	public EnumerationIterator(Enumeration enumeration) {
		this.enumeration = enumeration;
	}
	public boolean hasNext() {
		return enumeration.hasMoreElements();
	}
	public Object next() {
		return enumeration.nextElement();
	}
	public void remove() {
		throw new UnsupportedOperationException();
	}
}
3)EnumerationIteratorTestDrive.java
package headfirst.adapter.iterenum;
import java.util.*;
public class EnumerationIteratorTestDrive {
	public static void main (String args[]) {
		Vector v = new Vector(Arrays.asList(args));
		Iterator iterator = new EnumerationIterator(v.elements());
		while (iterator.hasNext()) {
			System.out.println(iterator.next());
		}
	}
}
4)IteratorEnumeration.java
package headfirst.adapter.iterenum;
import java.util.*;
public class IteratorEnumeration implements Enumeration {
	Iterator iterator;
	public IteratorEnumeration(Iterator iterator) {
		this.iterator = iterator;
	}
	public boolean hasMoreElements() {
		return iterator.hasNext();
	}
	public Object nextElement() {
		return iterator.next();
	}
}
5)IteratorEnumerationTestDrive.java
package headfirst.adapter.iterenum;
import java.util.*;
public class IteratorEnumerationTestDrive {
	public static void main (String args[]) {
		ArrayList l = new ArrayList(Arrays.asList(args));
	Enumeration enumeration = new IteratorEnumeration(l.iterator());
		while (enumeration.hasMoreElements()) {
			System.out.println(enumeration.nextElement());
		}
	}
}








--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
_____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************

P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
Write a Java Program to implement I/O Decorator for converting uppercase letters to 
lower case letters. 
import java.io.*; 
import java.util.*; 
 class LowerCaseInputStream extends FilterInputStream 
 { 
 public LowerCaseInputStream(InputStream in) { 
 super(in); 
 } 
 public int read() throws IOException { 
 int c = super.read(); 
 return (c == -1 ? c : Character.toLowerCase((char)c)); 
 } 
 public int read(byte[] b, int offset, int len) throws IOException { 
 int result = super.read(b, offset, len); 
 for (int i = offset; i < offset+result; i++) { 
 b[i] = (byte)Character.toLowerCase((char)b[i]); 
 } 
 return result; 
 } 
} 
public class Main { 
 public static void main(String[] args) throws IOException { 
 int c; 
 try { 
 InputStream in = 
 new LowerCaseInputStream( 
 new BufferedInputStream( 
 new FileInputStream("test.txt"))); 
 while((c = in.read()) >= 0) { 
 System.out.print((char)c); 
 } 
 in.close(); 
 } catch (IOException e) { 
 e.printStackTrace(); 
 } 
 } 
} 
Write a Java Program to implement Singleton pattern for multithreading. 
public class Main { 
 public static void main(String ar[]) { 
 Test1 t = new Test1(); 
 Test1 t2 = new Test1(); 
 Test1 t3 = new Test1(); 
 Thread tt = new Thread(t); 
 Thread tt2 = new Thread(t2); 
#DipaliMeher
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
 Thread tt3 = new Thread(t3); 
 Thread tt4 = new Thread(t); 
 Thread tt5 = new Thread(t); 
 tt.start(); 
 tt2.start(); 
 tt3.start(); 
 tt4.start(); 
 tt5.start(); 
 } 
} 
final class Test1 implements Runnable { 
 @Override 
 public void run() { 
 for (int i = 0; i < 5; i++) { 
 System.out.println(Thread.currentThread().getName() + " : " + 
Single.getInstance().hashCode()); 
 } 
 } 
} 
 
class Single { 
 private final static Single sing = new Single(); 
 private Single() { 
 } 
 public static Single getInstance() { 
 return sing; 
 } 
 } 
Write a JAVA Program to implement built-in support (java.util.Observable) Weather 
station with members temperature, humidity, pressure and methods 
mesurmentsChanged(), setMesurment(), getTemperature(), getHumidity(), 
getPressure() 
import java.util.Observable; 
import java.util.Observer; 
class CurrentConditionsDisplay implements Observer, DisplayElement { 
 Observable observable; 
 private float temperature; 
 private float humidity; 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
 public CurrentConditionsDisplay(Observable observable) { 
 this.observable = observable; 
 observable.addObserver(this); 
 } 
 public void update(Observable obs, Object arg) { 
 if (obs instanceof WeatherData) { 
 WeatherData weatherData = (WeatherData)obs; 
 this.temperature = weatherData.getTemperature(); 
 this.humidity = weatherData.getHumidity(); 
 display(); 
 } 
 } 
 public void display() { 
 System.out.println("Current conditions: " + temperature 
 + "F degrees and " + humidity + "% humidity"); 
 } 
} 
interface DisplayElement { 
 public void display(); 
} 
class ForecastDisplay implements Observer, DisplayElement { 
 private float currentPressure = 29.92f; 
 private float lastPressure; 
 public ForecastDisplay(Observable observable) { 
 observable.addObserver(this); 
 } 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
 
 public void update(Observable observable, Object arg) { 
 if (observable instanceof WeatherData) { 
 WeatherData weatherData = (WeatherData)observable; 
 lastPressure = currentPressure; 
 currentPressure = weatherData.getPressure(); 
 display(); 
 } 
 } 
 public void display() { 
 System.out.print("Forecast: "); 
 if (currentPressure > lastPressure) { 
 System.out.println("Improving weather on the way!"); 
 } else if (currentPressure == lastPressure) { 
 System.out.println("More of the same"); 
 } else if (currentPressure < lastPressure) { 
 System.out.println("Watch out for cooler, rainy weather"); 
 } 
 } 
} 
 class HeatIndexDisplay implements Observer, DisplayElement { 
 float heatIndex = 0.0f; 
 
 public HeatIndexDisplay(Observable observable) { 
 observable.addObserver(this); 
 } 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
 public void update(Observable observable, Object arg) { 
 if (observable instanceof WeatherData) { 
 WeatherData weatherData = (WeatherData)observable; 
 float t = weatherData.getTemperature(); 
 float rh = weatherData.getHumidity(); 
 heatIndex = (float) 
 ( 
 (16.923 + (0.185212 * t)) + 
 (5.37941 * rh) - 
 (0.100254 * t * rh) + 
 (0.00941695 * (t * t)) + 
 (0.00728898 * (rh * rh)) + 
 (0.000345372 * (t * t * rh)) - 
 (0.000814971 * (t * rh * rh)) + 
 (0.0000102102 * (t * t * rh * rh)) - 
 (0.000038646 * (t * t * t)) + 
 (0.0000291583 * (rh * rh * rh)) + 
 (0.00000142721 * (t * t * t * rh)) + 
 (0.000000197483 * (t * rh * rh * rh)) - 
 (0.0000000218429 * (t * t * t * rh * rh)) + 
 (0.000000000843296 * (t * t * rh * rh * rh)) - 
 (0.0000000000481975 * (t * t * t * rh * rh * rh))); 
 display(); 
 } 
 } 
 public void display() { 
 System.out.println("Heat index is " + heatIndex); 
 } 
} 
 class StatisticsDisplay implements Observer, DisplayElement { 
 private float maxTemp = 0.0f; 
 private float minTemp = 200; 
 private float tempSum= 0.0f; 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
 private int numReadings; 
 public StatisticsDisplay(Observable observable) { 
 observable.addObserver(this); 
 } 
 
 public void update(Observable observable, Object arg) { 
 if (observable instanceof WeatherData) { 
 WeatherData weatherData = (WeatherData)observable; 
 float temp = weatherData.getTemperature(); 
 tempSum += temp; 
 numReadings++; 
 if (temp > maxTemp) { 
 maxTemp = temp; 
 } 
 if (temp < minTemp) { 
 minTemp = temp; 
 } 
 display(); 
 } 
 } 
 public void display() { 
 System.out.println("Avg/Max/Min temperature = " + (tempSum / numReadings)+ "/" 
+ maxTemp + "/" + minTemp); 
 } 
} 
 
 class WeatherData extends Observable { 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
 private float temperature; 
 private float humidity; 
 private float pressure; 
 public WeatherData() { } 
 public void measurementsChanged() { 
 setChanged(); 
 notifyObservers(); 
 } 
 public void setMeasurements(float temperature, float humidity, float pressure) { 
 this.temperature = temperature; 
 this.humidity = humidity; 
 this.pressure = pressure; 
 measurementsChanged(); 
 } 
 public float getTemperature() { 
 return temperature; 
 } 
 public float getHumidity() { 
 return humidity; 
 } 
 
 public float getPressure() { 
 return pressure; 
 } 
} 
public class Main { 
 public static void main(String[] args) { 
 WeatherData weatherData = new WeatherData(); 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
 CurrentConditionsDisplay currentConditions = new 
CurrentConditionsDisplay(weatherData); 
 StatisticsDisplay statisticsDisplay = new 
StatisticsDisplay(weatherData); 
 ForecastDisplay forecastDisplay = new ForecastDisplay(weatherData); 
 weatherData.setMeasurements(80, 65, 30.4f); 
 weatherData.setMeasurements(82, 70, 29.2f); 
 weatherData.setMeasurements(78, 90, 29.2f); 
 } 
} 
Write a Java Program to implement Factory method for Pizza Store with createPizza(), 
orederPizza(), prepare(), Bake(), cut(), box(). Use this to create variety of pizza’s like 
NyStyleCheesePizza, ChicagoStyleCheesePizza etc. 
//program for ny and Chicago cheese pizza 
import java.util.ArrayList; 
class ChicagoPizzaStore extends PizzaStore 
 { 
 Pizza createPizza(String item) 
 { 
 if (item.equals("cheese")) 
 { 
 return new ChicagoStyleCheesePizza(); 
 } 
 else return null; 
 } 
} 
class ChicagoStyleCheesePizza extends Pizza 
 { 
 public ChicagoStyleCheesePizza() 
 { 
 name = "Chicago Style Deep Dish Cheese Pizza"; 
 dough = "Extra Thick Crust Dough"; 
 sauce = "Plum Tomato Sauce"; 
 toppings.add("Shredded Mozzarella Cheese"); 
 } 
 void cut() 
 { 
 System.out.println("Cutting the pizza into square slices"); 
 } 
} 
class DependentPizzaStore 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
{ public Pizza createPizza(String style, String type) 
 { Pizza pizza = null; 
 if (style.equals("NY")) 
 { 
 if (type.equals("cheese")) 
 { 
 pizza = new NYStyleCheesePizza(); 
 } 
 } 
 
 if (style.equals("Chicago")) 
 { 
 if (type.equals("cheese")) 
 { 
 pizza = new ChicagoStyleCheesePizza(); 
 } 
 } 
 
 else 
 { 
 System.out.println("Error: invalid type of pizza"); return null; 
 } 
 pizza.prepare(); 
 pizza.bake(); 
 pizza.cut(); 
 pizza.box(); 
 return pizza; 
 } 
} 
class NYPizzaStore extends PizzaStore 
 { 
 Pizza createPizza(String item) 
 { 
 if (item.equals("cheese")) 
 { 
 return new NYStyleCheesePizza(); 
 } 
 else return null; 
 } 
} 
class NYStyleCheesePizza extends Pizza 
{ 
 public NYStyleCheesePizza() 
 { 
 name = "NY Style Sauce and Cheese Pizza"; 
 dough = "Thin Crust Dough"; 
 sauce = "Marinara Sauce"; 
 toppings.add("Grated Reggiano Cheese"); 
 } 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
} 
abstract class Pizza 
{ 
 String name; 
 String dough; 
 String sauce; 
 ArrayList toppings = new ArrayList(); 
 void prepare() 
 { 
 System.out.println("Preparing " + name); 
 System.out.println("Tossing dough..."); 
 System.out.println("Adding sauce..."); 
 System.out.println("Adding toppings: "); 
 for (int i = 0; i < toppings.size(); i++) 
 { 
 System.out.println(" " + toppings.get(i)); 
 } 
 } 
 void bake() 
 { 
 System.out.println("Bake for 25 minutes at 350"); 
 } 
 void cut() 
 { 
 System.out.println("Cutting the pizza into diagonal slices"); 
 } 
 void box() 
 { 
 System.out.println("Place pizza in official PizzaStore box"); 
 } 
 public String getName() 
 { 
 return name; 
 } 
 public String toString() 
 { 
 StringBuffer display = new StringBuffer(); 
 display.append("---- " + name + " ----\n"); 
 display.append(dough + "\n"); 
 display.append(sauce + "\n"); 
 for (int i = 0; i < toppings.size(); i++) 
 { 
 display.append((String )toppings.get(i) + "\n"); 
 } 
 return display.toString(); 
 } 
} 
abstract class PizzaStore 
 { 
 abstract Pizza createPizza(String item); 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
 public Pizza orderPizza(String type) 
 { 
 Pizza pizza = createPizza(type); 
 System.out.println("--- Making a " + pizza.getName() + " ---"); 
 pizza.prepare(); 
 pizza.bake(); 
 pizza.cut(); 
 pizza.box(); 
 return pizza; 
 } 
 } 
public class Main 
{ 
 public static void main(String[] args) 
 { 
 PizzaStore nyStore = new NYPizzaStore(); 
 PizzaStore chicagoStore = new ChicagoPizzaStore(); 
 
 Pizza pizza = nyStore.orderPizza("cheese"); 
 
 System.out.println("Poonam ordered a " + pizza.getName() + "\n"); 
 pizza = chicagoStore.orderPizza("cheese"); 
 
 System.out.println("Kadambari ordered a " + pizza.getName() + "\n"); 
 pizza = nyStore.orderPizza("cheese"); 
 } 
} 
/* program for all pizza types*/ 
import java.util.ArrayList; 
class ChicagoPizzaStore extends PizzaStore 
 { 
 Pizza createPizza(String item) 
 { 
 if (item.equals("cheese")) 
 { 
 return new ChicagoStyleCheesePizza(); 
 } 
 else if (item.equals("veggie")) 
 { 
 return new ChicagoStyleVeggiePizza(); 
 } 
 else if (item.equals("clam")) 
 { 
 return new ChicagoStyleClamPizza(); 
 } 
 else if (item.equals("pepperoni")) 
 { 
 return new ChicagoStylePepperoniPizza(); 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
 } 
 else return null; 
 } 
} 
class ChicagoStyleCheesePizza extends Pizza 
 { 
 public ChicagoStyleCheesePizza() 
 { 
 name = "Chicago Style Deep Dish Cheese Pizza"; 
 dough = "Extra Thick Crust Dough"; 
 sauce = "Plum Tomato Sauce"; 
 toppings.add("Shredded Mozzarella Cheese"); 
 } 
 void cut() 
 { 
 System.out.println("Cutting the pizza into square slices"); 
 } 
} 
class ChicagoStyleClamPizza extends Pizza 
{ 
 public ChicagoStyleClamPizza() 
 { 
 name = "Chicago Style Clam Pizza"; 
 dough = "Extra Thick Crust Dough"; 
 sauce = "Plum Tomato Sauce"; 
 toppings.add("Shredded Mozzarella Cheese"); 
 toppings.add("Frozen Clams from Chesapeake Bay"); 
 } 
 void cut() 
 { 
 System.out.println("Cutting the pizza into square slices"); 
 } 
} 
class ChicagoStylePepperoniPizza extends Pizza 
{ 
 public ChicagoStylePepperoniPizza() 
 { 
 name = "Chicago Style Pepperoni Pizza"; 
 dough = "Extra Thick Crust Dough"; 
 sauce = "Plum Tomato Sauce"; 
 toppings.add("Shredded Mozzarella Cheese"); 
 toppings.add("Black Olives"); 
 toppings.add("Spinach"); 
 toppings.add("Eggplant"); 
 toppings.add("Sliced Pepperoni"); 
 } 
 void cut() 
 { 
 System.out.println("Cutting the pizza into square slices"); 
 } 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
} 
class ChicagoStyleVeggiePizza extends Pizza 
{ 
 public ChicagoStyleVeggiePizza() 
 { 
 name = "Chicago Deep Dish Veggie Pizza"; 
 dough = "Extra Thick Crust Dough"; 
 sauce = "Plum Tomato Sauce"; 
 toppings.add("Shredded Mozzarella Cheese"); 
 toppings.add("Black Olives"); 
 toppings.add("Spinach"); 
 toppings.add("Eggplant"); 
 } 
 void cut() 
 { 
 System.out.println("Cutting the pizza into square slices"); 
 } 
} 
class DependentPizzaStore 
{ public Pizza createPizza(String style, String type) 
 { Pizza pizza = null; 
 if (style.equals("NY")) 
 { 
 if (type.equals("cheese")) 
 { 
 pizza = new NYStyleCheesePizza(); 
 } 
 else if (type.equals("veggie")) 
 { 
 pizza = new NYStyleVeggiePizza(); 
 } 
 else if (type.equals("clam")) 
 { 
 pizza = new NYStyleClamPizza(); 
 } 
 else if (type.equals("pepperoni")) 
 { 
 pizza = new NYStylePepperoniPizza(); 
 } 
 } 
 else if (style.equals("Chicago")) 
 { 
 if (type.equals("cheese")) 
 { 
 pizza = new ChicagoStyleCheesePizza(); 
 } 
 else if (type.equals("veggie")) 
 { 
 pizza = new ChicagoStyleVeggiePizza(); 
 } 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
 else if (type.equals("clam")) 
 { 
 pizza = new ChicagoStyleClamPizza(); 
 } 
 else if (type.equals("pepperoni")) 
 { 
 pizza = new ChicagoStylePepperoniPizza(); 
 } 
 } 
 else 
 { 
 System.out.println("Error: invalid type of pizza"); return null; 
 } 
 pizza.prepare(); 
 pizza.bake(); 
 pizza.cut(); 
 pizza.box(); 
 return pizza; 
 } 
} 
class NYPizzaStore extends PizzaStore 
 { 
 Pizza createPizza(String item) 
 { 
 if (item.equals("cheese")) 
 { 
 return new NYStyleCheesePizza(); 
 } 
 else if (item.equals("veggie")) 
 { 
 return new NYStyleVeggiePizza(); 
 } 
 else if (item.equals("clam")) 
 { 
 return new NYStyleClamPizza(); 
 } 
 else if (item.equals("pepperoni")) 
 { 
 return new NYStylePepperoniPizza(); 
 } 
 else return null; 
 } 
} 
class NYStyleCheesePizza extends Pizza 
{ 
 public NYStyleCheesePizza() 
 { 
 name = "NY Style Sauce and Cheese Pizza"; 
 dough = "Thin Crust Dough"; 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
 sauce = "Marinara Sauce"; 
 toppings.add("Grated Reggiano Cheese"); 
 } 
} 
class NYStyleClamPizza extends Pizza 
 { 
 public NYStyleClamPizza() 
 { 
 name = "NY Style Clam Pizza"; 
 dough = "Thin Crust Dough"; 
 sauce = "Marinara Sauce"; 
 toppings.add("Grated Reggiano Cheese"); 
 toppings.add("Fresh Clams from Long Island Sound"); 
 } 
} 
class NYStylePepperoniPizza extends Pizza 
{ 
 public NYStylePepperoniPizza() 
 { 
 name = "NY Style Pepperoni Pizza"; 
 dough = "Thin Crust Dough"; 
 sauce = "Marinara Sauce"; 
 toppings.add("Grated Reggiano Cheese"); 
 toppings.add("Sliced Pepperoni"); 
 toppings.add("Garlic"); 
 toppings.add("Onion"); 
 toppings.add("Mushrooms"); 
 toppings.add("Red Pepper"); 
 } 
} 
class NYStyleVeggiePizza extends Pizza 
{ 
public NYStyleVeggiePizza() 
 { 
 name = "NY Style Veggie Pizza"; 
 dough = "Thin Crust Dough"; 
 sauce = "Marinara Sauce"; 
 toppings.add("Grated Reggiano Cheese"); 
 toppings.add("Garlic"); 
 toppings.add("Onion"); 
 toppings.add("Mushrooms"); 
 toppings.add("Red Pepper"); 
 } 
} 
abstract class Pizza 
{ 
 String name; 
 String dough; 
 String sauce; 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
 ArrayList toppings = new ArrayList(); 
 void prepare() 
 { 
 System.out.println("Preparing " + name); 
 System.out.println("Tossing dough..."); 
 System.out.println("Adding sauce..."); 
 System.out.println("Adding toppings: "); 
 for (int i = 0; i < toppings.size(); i++) 
 { 
 System.out.println(" " + toppings.get(i)); 
 } 
 } 
 void bake() 
 { 
 System.out.println("Bake for 25 minutes at 350"); 
 } 
 void cut() 
 { 
 System.out.println("Cutting the pizza into diagonal slices"); 
 } 
 void box() 
 { 
 System.out.println("Place pizza in official PizzaStore box"); 
 } 
 public String getName() 
 { 
 return name; 
 } 
 public String toString() 
 { 
 StringBuffer display = new StringBuffer(); 
 display.append("---- " + name + " ----\n"); 
 display.append(dough + "\n"); 
 display.append(sauce + "\n"); 
 for (int i = 0; i < toppings.size(); i++) 
 { 
 display.append((String )toppings.get(i) + "\n"); 
 } 
 return display.toString(); 
 } 
} 
abstract class PizzaStore 
 { 
 abstract Pizza createPizza(String item); 
 public Pizza orderPizza(String type) 
 { 
 Pizza pizza = createPizza(type); 
 System.out.println("--- Making a " + pizza.getName() + " ---"); 
 pizza.prepare(); 
 pizza.bake(); 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
 pizza.cut(); 
 pizza.box(); 
 return pizza; 
 } 
 } 
public class Main 
{ 
 public static void main(String[] args) 
 { 
 PizzaStore nyStore = new NYPizzaStore(); 
 PizzaStore chicagoStore = new ChicagoPizzaStore(); 
 Pizza pizza = nyStore.orderPizza("cheese"); 
 System.out.println("Ethan ordered a " + pizza.getName() + "\n"); 
 pizza = chicagoStore.orderPizza("cheese"); 
 System.out.println("Joel ordered a " + pizza.getName() + "\n"); 
 pizza = nyStore.orderPizza("clam"); 
 System.out.println("Ethan ordered a " + pizza.getName() + "\n"); 
 pizza = chicagoStore.orderPizza("clam"); 
 System.out.println("Joel ordered a " + pizza.getName() + "\n"); 
 pizza = nyStore.orderPizza("pepperoni"); 
 System.out.println("Ethan ordered a " + pizza.getName() + "\n"); 
 pizza = chicagoStore.orderPizza("pepperoni"); 
 System.out.println("Joel ordered a " + pizza.getName() + "\n"); 
 pizza = nyStore.orderPizza("veggie"); 
 System.out.println("Ethan ordered a " + pizza.getName() + "\n"); 
 pizza = chicagoStore.orderPizza("veggie"); 
 System.out.println("Joel ordered a " + 
pizza.getName() + "\n"); 
 } 
} 
Write a Java Program to implement Adapter pattern for Enumeration iterator 
import java.util.*; 
 class EnumerationIterator implements Iterator { 
 Enumeration enumeration; 
 
 public EnumerationIterator(Enumeration enumeration) { 
 this.enumeration = enumeration; 
 } 
 
 public boolean hasNext() { 
 return enumeration.hasMoreElements(); 
 } 
 
 public Object next() { 
 return enumeration.nextElement(); 
 } 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
 
 public void remove() { 
 throw new UnsupportedOperationException(); 
 } 
} 
public class Main { 
 public static void main (String args[]) { 
 Vector v = new Vector(Arrays.asList(args)); 
 Iterator iterator = new EnumerationIterator(v.elements()); 
 while (iterator.hasNext()) { 
 System.out.println(iterator.next()); 
 } 
 } 
} 
Write a Java Program to implement command pattern to test Remote Control 
interface Command { 
 public void execute(); 
} 
class Light { 
 public void on(){ 
 System.out.println("Light is on"); 
 } 
 public void off() 
 { 
 System.out.println("Light is off"); 
 } 
} 
 class LightOnCommand implements Command { 
 Light l1; 
 
 public LightOnCommand(Light a) { 
 this.l1 = a; 
 } 
 
 public void execute() { 
 l1.on(); 
 } 
 
} 
 class LightOffCommand implements Command { 
Light l1; 
public LightOffCommand(Light a) { 
this.l1 = a; 
} 
public void execute() { 
l1.off(); 
} 
} 
 class SimpleRemoteControl { 
 Command slot; 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
 
 public SimpleRemoteControl() {} 
 
 public void setCommand(Command command) { 
 slot = command; 
 } 
 
 public void buttonWasPressed() { 
 slot.execute(); 
 } 
 
} 
public class Main { 
 public static void main(String[] args) { 
 SimpleRemoteControl r1 = new SimpleRemoteControl(); 
 Light l1 = new Light(); 
 
LightOnCommand lo = new LightOnCommand(l1); 
 r1.setCommand(lo); 
 r1.buttonWasPressed(); 
LightOffCommand lO = new LightOffCommand(l1); 
r1.setCommand(lO); 
r1.buttonWasPressed(); 
 
 } 
} 
Write a Java Program to implement undo command to test Ceiling fan. 
interface Command { 
 public void execute(); 
} 
class CeilingFan { 
 public void on(){ 
 System.out.println("Ceiling Fan is on"); 
 } 
 public void off() 
 { 
 System.out.println("Ceiling Fan is off"); 
 } 
} 
 class CeilingFanOnCommand implements Command { 
 CeilingFan c; 
 
 public CeilingFanOnCommand(CeilingFan l) { 
 this.c = l; 
 } 
 
 public void execute() { 
 c.on(); 
 } 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
 
} 
 class CeilingFanOffCommand implements Command { 
CeilingFan c; 
public CeilingFanOffCommand(CeilingFan l) { 
this.c = l; 
} 
public void execute() { 
c.off(); 
} 
} 
 class SimpleRemoteControl { 
 Command slot; 
 
 public SimpleRemoteControl() {} 
 
 public void setCommand(Command command) { 
 slot = command; 
 } 
 
 public void buttonWasPressed() { 
 slot.execute(); 
 } 
 
} 
public class Main { 
 public static void main(String[] args) { 
 SimpleRemoteControl remote = new SimpleRemoteControl(); 
 CeilingFan ceilingFan=new CeilingFan(); 
 CeilingFanOnCommand ceilingFanOn =new CeilingFanOnCommand(ceilingFan); 
 remote.setCommand(ceilingFanOn); 
 remote.buttonWasPressed(); 
 
CeilingFanOffCommand ceilingFanOff =new CeilingFanOffCommand(ceilingFan); 
 remote.setCommand(ceilingFanOff); 
 remote.buttonWasPressed(); 
 
 
 } 
} 
Write a Java Program to implement Command Design Pattern for Command Interface 
with execute() . Use this to create variety of commands for LightOnCommand, 
LightOffCommand, GarageDoorUpCommand, StereoOnWithCDCommand. 
interface Command { 
 public void execute(); 
} 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
class Stereo { 
 public void On(){ 
 System.out.println("Stereo is on"); 
 } 
} 
class GarageDoor { 
 public void Up(){ 
 System.out.println("Garage Door is Up"); 
 } 
} 
 class GarageDoorUpCommand implements Command { 
 GarageDoor c; 
 
 public GarageDoorUpCommand(GarageDoor l) { 
 this.c = l; 
 } 
 
 public void execute() { 
 c.Up(); 
 } 
 
} 
class Light { 
 public void on(){ 
 System.out.println("Light is on"); 
 } 
 public void off() 
 { 
 System.out.println("Light is off"); 
 } 
} 
 class LightOnCommand implements Command { 
 Light light; 
 
 public LightOnCommand(Light light) { 
this.light = light; 
 } 
 
 public void execute() { 
 light.on(); 
 } 
 
} 
 class LightOffCommand implements Command { 
Light light; 
public LightOffCommand(Light light) { 
this.light = light; 
} 
public void execute() { 
light.off(); 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
} 
} 
class StereoOn implements Command { 
Stereo s; 
public StereoOn(Stereo l) { 
this.s = l; 
} 
public void execute() { 
s.On(); 
} 
} 
 class SimpleRemoteControl { 
 Command slot; 
 
 public SimpleRemoteControl() {} 
 
 public void setCommand(Command command) { 
 slot = command; 
 } 
 
 public void buttonWasPressed() { 
 slot.execute(); 
 } 
 
} 
public class Main { 
 public static void main(String[] args) { 
SimpleRemoteControl remote = new SimpleRemoteControl(); 
Light light = new Light(); 
LightOnCommand lightOn = new LightOnCommand(light); 
remote.setCommand(lightOn); 
remote.buttonWasPressed(); 
LightOffCommand lightOff = new LightOffCommand(light); 
remote.setCommand(lightOff); 
remote.buttonWasPressed(); 
GarageDoor garageDoor = new GarageDoor(); 
GarageDoorUpCommand garageDoorUp = new GarageDoorUpCommand(garageDoor); 
 remote.setCommand(garageDoorUp); 
remote.buttonWasPressed(); 
 
 Stereo s1=new Stereo(); 
 StereoOn s2 =new StereoOn(s1); 
remote.setCommand(s2); 
remote.buttonWasPressed(); 
 
 } 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
} 
Write a Java Program to implement State Pattern for Gumball Machine. Create instance 
variable that holds current state from there, we just need to handle all actions, 
behaviors and state transition that can happen 
interface State { 
 
 public void insertQuarter(); 
 public void ejectQuarter(); 
 public void turnCrank(); 
 public void dispense(); 
 
 public void refill(); 
} 
 class NoQuarterState implements State { 
 GumballMachine gumballMachine; 
 
 public NoQuarterState(GumballMachine gumballMachine) { 
 this.gumballMachine = gumballMachine; 
 } 
 
 public void insertQuarter() { 
 System.out.println("You inserted a quarter"); 
 gumballMachine.setState(gumballMachine.getHasQuarterState()); 
 } 
 
 public void ejectQuarter() { 
 System.out.println("You haven't inserted a quarter"); 
 } 
 
 public void turnCrank() { 
 System.out.println("You turned, but there's no quarter"); 
 } 
 
 public void dispense() { 
 System.out.println("You need to pay first"); 
 } 
 
 public void refill() { } 
 
 public String toString() { 
 return "waiting for quarter"; 
 } 
} 
 class GumballMachine { 
 
 State soldOutState; 
 State noQuarterState; 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
 State hasQuarterState; 
 State soldState; 
 
 State state; 
 int count = 0; 
 
 public GumballMachine(int numberGumballs) { 
 soldOutState = new SoldOutState(this); 
 noQuarterState = new NoQuarterState(this); 
 hasQuarterState = new HasQuarterState(this); 
 soldState = new SoldState(this); 
 this.count = numberGumballs; 
 if (numberGumballs > 0) { 
 state = noQuarterState; 
 } else { 
 state = soldOutState; 
 } 
 } 
 
 public void insertQuarter() { 
 state.insertQuarter(); 
 } 
 
 public void ejectQuarter() { 
 state.ejectQuarter(); 
 } 
 
 public void turnCrank() { 
 state.turnCrank(); 
 state.dispense(); 
 } 
 
 void releaseBall() { 
 System.out.println("A gumball comes rolling out the slot..."); 
 if (count != 0) { 
 count = count - 1; 
 } 
 } 
 
 int getCount() { 
 return count; 
 } 
 
 void refill(int count) { 
 this.count += count; 
 System.out.println("The gumball machine was just refilled; it's new count 
is: " + this.count); 
 state.refill(); 
 } 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
 void setState(State state) { 
 this.state = state; 
 } 
 public State getState() { 
 return state; 
 } 
 public State getSoldOutState() { 
 return soldOutState; 
 } 
 public State getNoQuarterState() { 
 return noQuarterState; 
 } 
 public State getHasQuarterState() { 
 return hasQuarterState; 
 } 
 public State getSoldState() { 
 return soldState; 
 } 
 
 public String toString() { 
 StringBuffer result = new StringBuffer(); 
 result.append("\nMighty Gumball, Inc."); 
 result.append("\nJava-enabled Standing Gumball Model #2004"); 
 result.append("\nInventory: " + count + " gumball"); 
 if (count != 1) { 
 result.append("s"); 
 } 
 result.append("\n"); 
 result.append("Machine is " + state + "\n"); 
 return result.toString(); 
 } 
} 
 class HasQuarterState implements State { 
 GumballMachine gumballMachine; 
 
 public HasQuarterState(GumballMachine gumballMachine) { 
 this.gumballMachine = gumballMachine; 
 } 
 
 public void insertQuarter() { 
 System.out.println("You can't insert another quarter"); 
 } 
 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
 public void ejectQuarter() { 
 System.out.println("Quarter returned"); 
 gumballMachine.setState(gumballMachine.getNoQuarterState()); 
 } 
 
 public void turnCrank() { 
 System.out.println("You turned..."); 
 gumballMachine.setState(gumballMachine.getSoldState()); 
 } 
 public void dispense() { 
 System.out.println("No gumball dispensed"); 
 } 
 
 public void refill() { } 
 
 public String toString() { 
 return "waiting for turn of crank"; 
 } 
} 
 class SoldState implements State { 
 
 GumballMachine gumballMachine; 
 
 public SoldState(GumballMachine gumballMachine) { 
 this.gumballMachine = gumballMachine; 
 } 
 
 public void insertQuarter() { 
 System.out.println("Please wait, we're already giving you a gumball"); 
 } 
 
 public void ejectQuarter() { 
 System.out.println("Sorry, you already turned the crank"); 
 } 
 
 public void turnCrank() { 
 System.out.println("Turning twice doesn't get you another gumball!"); 
 } 
 
 public void dispense() { 
 gumballMachine.releaseBall(); 
 if (gumballMachine.getCount() > 0) { 
 gumballMachine.setState(gumballMachine.getNoQuarterState()); 
 } else { 
 System.out.println("Oops, out of gumballs!"); 
 gumballMachine.setState(gumballMachine.getSoldOutState()); 
 } 
 } 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
 
 public void refill() { } 
 
 public String toString() { 
 return "dispensing a gumball"; 
 } 
} 
 class SoldOutState implements State { 
 GumballMachine gumballMachine; 
 
 public SoldOutState(GumballMachine gumballMachine) { 
 this.gumballMachine = gumballMachine; 
 } 
 
 public void insertQuarter() { 
 System.out.println("You can't insert a quarter, the machine is sold out"); 
 } 
 
 public void ejectQuarter() { 
 System.out.println("You can't eject, you haven't inserted a quarter yet"); 
 } 
 
 public void turnCrank() { 
 System.out.println("You turned, but there are no gumballs"); 
 } 
 public void dispense() { 
 System.out.println("No gumball dispensed"); 
 } 
 
 public void refill() { 
 gumballMachine.setState(gumballMachine.getNoQuarterState()); 
 } 
 
 public String toString() { 
 return "sold out"; 
 } 
 
} 
public class Main { 
 public static void main(String[] args) { 
 GumballMachine gumballMachine = new GumballMachine(2); 
 System.out.println(gumballMachine); 
 gumballMachine.insertQuarter(); 
 gumballMachine.turnCrank(); 
 System.out.println(gumballMachine); 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
 gumballMachine.insertQuarter(); 
 gumballMachine.turnCrank(); 
 gumballMachine.insertQuarter(); 
 gumballMachine.turnCrank(); 
 
 gumballMachine.refill(5); 
 gumballMachine.insertQuarter(); 
 gumballMachine.turnCrank(); 
 System.out.println(gumballMachine); 
 } 
} 
 
Design simple HR Application using Spring Framework 
https://github.com/sefauncu/spring-mvc-hrapplication/blob/master/SimpleHRApplication/.project 
Write a Java Program to implement Strategy Pattern for Duck Behavior. Create instance 
variable that holds current state of Duck from there, we just need to handle all Flying 
Behaviors and Quack Behavior 
 abstract class Duck { 
 FlyBehaviour flyBehaviour; 
 QuackBehaviour quackBehaviour; 
 
 public Duck() { 
 } 
 public abstract void display(); 
 public void performFly() { 
 flyBehaviour.fly(); 
 } 
 public void performQuack() { 
 quackBehaviour.quack(); 
 } 
 public void swim() { 
 System.out.println("All ducks float even decoys"); 
 } 
 public void setFlyBehaviour(FlyBehaviour fb) { 
 flyBehaviour = fb; 
 } 
 public void setQuackBehaviour(QuackBehaviour qb) { 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
 QuackBehaviour q; 
 } 
} 
 class MallardDuck extends Duck { 
 public MallardDuck() { 
 quackBehaviour = new Quack(); 
 flyBehaviour = new FlyWithWings(); 
 } 
 public void display() { 
 System.out.println("I'm a real Mallard duck"); 
 } 
} 
 interface FlyBehaviour { 
 public void fly(); 
} 
 interface QuackBehaviour { 
 public void quack() { 
 System.out.println("Quack"); 
 } 
} 
 class Quack implements QuackBehaviour { 
 public void quack() { 
 System.out.println("Quack"); 
 } 
} 
 class FlyWithWings implements FlyBehaviour { 
 public void fly() { 
 System.out.println("I'm flying!!"); 
 } 
} 
public class Main { 
 public static void main(String[] args) { 
 Duck mallard = new MallardDuck(); 
 mallard.performQuack(); 
 mallard.performFly(); 
 } 
} 
/*Simple Programme*/ 
interface DuckB 
{ 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
 public void oper(); 
} 
class Fly implements DuckB 
{ 
 public void oper() 
 { 
 System.out.println("Duck Flies"); 
 } 
} 
 class Quack implements DuckB 
{ 
 public void oper() 
 { 
 System.out.println("Duck Sounds Quack Quack"); 
 } 
} 
class Context 
{ 
 private DuckB s1; 
 public Context(DuckB p) 
 { 
 this.s1=p; 
 } 
 public void est() 
 { 
 s1.oper(); 
 } 
} 
public class Main 
{ 
public static void main(String[] args) { 
Context c1=new Context(new Fly()); 
System.out.println("Duck Behaviour"); 
c1.est(); 
c1=new Context(new Quack()); 
System.out.println("Duck Behaviour "); 
c1.est(); 
 } 
} 
Write a java program to implement Adapter pattern to design Heart Model to Beat 
Model 
interface BeatModelInterface { 
void initialize(); 
void on(); 
void off(); 
void setBPM(int bpm); 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
int getBPM(); 
void registerObserver(BeatObserver o); 
void removeObserver(BeatObserver o); 
void registerObserver(BPMObserver o); 
void removeObserver(BPMObserver o); 
} 
 class BeatModel implements BeatModelInterface, MetaEventListener { 
Sequencer sequencer; 
ArrayList beatObservers = new ArrayList(); 
ArrayList bpmObservers = new ArrayList(); 
int bpm = 90; 
// other instance variables here 
public void initialize() { 
setUpMidi(); 
buildTrackAndStart(); 
} 
public void on() { 
sequencer.start(); 
setBPM(90); 
} 
public void off() { 
setBPM(0); 
sequencer.stop(); 
} 
public void setBPM(int bpm) { 
this.bpm = bpm; 
sequencer.setTempoInBPM(getBPM()); 
notifyBPMObservers(); 
} 
public int getBPM() { 
return bpm; 
} 
void beatEvent() { 
notifyBeatObservers(); 
} 
// Code to register and notify observers 
// Lots of MIDI code to handle the beat 
} 
 class DJView implements ActionListener, BeatObserver, BPMObserver { 
BeatModelInterface model; 
ControllerInterface controller; 
JFrame viewFrame; 
JPanel viewPanel; 
BeatBar beatBar; 
JLabel bpmOutputLabel; 
public DJView(ControllerInterface controller, BeatModelInterface model) { 
this.controller = controller; 
this.model = model; 
model.registerObserver((BeatObserver)this); 
model.registerObserver((BPMObserver)this); 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
} 
public void createView() { 
// Create all Swing components here 
} 
public void updateBPM() { 
int bpm = model.getBPM(); 
if (bpm == 0) { 
bpmOutputLabel.setText("offline"); 
} else { 
bpmOutputLabel.setText("Current BPM: " + model.getBPM()); 
} 
} 
public void updateBeat() { 
beatBar.setValue(100); 
} 
} 
 interface ControllerInterface { 
void start(); 
void stop(); 
void increaseBPM(); 
void decreaseBPM(); 
void setBPM(int bpm); 
} 
 class BeatController implements ControllerInterface { 
BeatModelInterface model; 
DJView view; 
public BeatController(BeatModelInterface model) { 
this.model = model; 
view = new DJView(this, model); 
view.createView(); 
view.createControls(); 
view.disableStopMenuItem(); 
view.enableStartMenuItem(); 
model.initialize(); 
} 
public void start() { 
model.on(); 
view.disableStartMenuItem(); 
view.enableStopMenuItem(); 
} 
public void stop() { 
model.off(); 
view.disableStopMenuItem(); 
view.enableStartMenuItem(); 
} 
public void increaseBPM() { 
int bpm = model.getBPM(); 
model.setBPM(bpm + 1); 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
} 
public void decreaseBPM() { 
int bpm = model.getBPM(); 
model.setBPM(bpm - 1); 
} 
public void setBPM(int bpm) { 
model.setBPM(bpm); 
} 
} 
public class Main { 
public static void main (String[] args) { 
BeatModelInterface model = new BeatModel(); 
ControllerInterface controller = new BeatController(model); 
} 
} 
Write a Java Program to implement Decorator Pattern for interface Car to define the 
assemble() method and then decorate it to Sports car and Luxury Car 
 interface Car { 
public void assemble(); 
} 
 class BasicCar implements Car { 
 @Override 
public void assemble() { 
System.out.print("Basic Car."); 
} 
} 
 class CarDecorator implements Car { 
protected Car car; 
public CarDecorator(Car c){ 
this.car=c; 
} 
@Override 
public void assemble() { 
this.car.assemble(); 
} 
} 
class SportsCar extends CarDecorator { 
public SportsCar(Car c) { 
super(c); 
} 
@Override 
public void assemble(){ 
car.assemble(); 
System.out.print(" Adding features of Sports Car."); 
} 
} 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
class LuxuryCar extends CarDecorator { 
public LuxuryCar(Car c) { 
super(c); 
} 
public void assemble(){ 
car.assemble(); 
System.out.print(" Adding features of Luxury Car."); 
} 
} 
public class Main { 
public static void main(String[] args) { 
Car s1 = new SportsCar(new BasicCar()); 
s1.assemble(); 
Car s2 = new LuxuryCar(new BasicCar()); 
s2.assemble(); 
} 
} 
Write a Java Program to implement an Adapter design pattern in mobile charger. Define 
two classes – Volt (to measure volts) and Socket (producing constant volts of 120V). 
Build an adapter that can produce 3 volts, 12 volts and default 120 volts. Implements 
Adapter pattern using Class Adapter 
class Volt { 
 private int volts; 
 public Volt(int v) { this.volts=v; } 
 public int getVolts() { return volts; } 
 public void setVolts(int volts) { this.volts = volts; } 
} 
 class Socket { 
 public Volt getVolt(){ return new Volt(120); } 
} 
 interface SocketAdapter { 
 public Volt get120Volt(); 
 public Volt get12Volt(); 
 public Volt get3Volt(); 
} 
 class SocketClassAdapterImpl extends Socket implements SocketAdapter { 
 @Override 
 public Volt get120Volt() { 
 return getVolt(); 
 } 
 @Override 
 public Volt get12Volt() { 
 Volt v = getVolt(); 
 return convertVolt(v,10); 
 } 
 @Override 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
 public Volt get3Volt() { 
 Volt v = getVolt(); 
 return convertVolt(v,40); 
 } 
 private Volt convertVolt(Volt v, int i) { 
 return new Volt(v.getVolts()/i); 
 } 
} 
 class SocketObjectAdapterImpl implements SocketAdapter { 
 // using composition for adapter pattern 
 private Socket sock = new Socket(); 
 @Override 
 public Volt get120Volt() { 
 return sock.getVolt(); 
 } 
 @Override 
 public Volt get12Volt() { 
 Volt v = sock.getVolt(); 
 return convertVolt(v,10); 
 } 
 @Override 
 public Volt get3Volt() { 
 Volt v = sock.getVolt(); 
 return convertVolt(v,40); 
 } 
 private Volt convertVolt(Volt v, int i) { 
 return new Volt(v.getVolts()/i); 
 } 
} 
public class Main { 
 public static void main(String[] args) { 
 testClassAdapter(); 
 testObjectAdapter(); 
 } 
 private static void testObjectAdapter() { 
 SocketAdapter sockAdapter = new SocketObjectAdapterImpl(); 
 Volt v3 = getVolt(sockAdapter,3); 
 Volt v12 = getVolt(sockAdapter,12); 
 Volt v120 = getVolt(sockAdapter,120); 
 System.out.println("v3 volts using Object Adapter="+v3.getVolts()); 
 System.out.println("v12 volts using Object Adapter="+v12.getVolts()); 
 System.out.println("v120 volts using Object Adapter="+v120.getVolts()); 
 } 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
 private static void testClassAdapter() { 
 SocketAdapter sockAdapter = new SocketClassAdapterImpl(); 
 Volt v3 = getVolt(sockAdapter,3); 
 Volt v12 = getVolt(sockAdapter,12); 
 Volt v120 = getVolt(sockAdapter,120); 
 System.out.println("v3 volts using Class Adapter="+v3.getVolts()); 
 System.out.println("v12 volts using Class Adapter="+v12.getVolts()); 
 System.out.println("v120 volts using Class Adapter="+v120.getVolts()); 
 } 
 private static Volt getVolt(SocketAdapter sockAdapter, int i) { 
 switch (i){ 
 case 3: return sockAdapter.get3Volt(); 
 case 12: return sockAdapter.get12Volt(); 
 case 120: return sockAdapter.get120Volt(); 
 default: return sockAdapter.get120Volt(); 
 } 
 } 
} 
Write a Java Program to implement Facade Design Pattern for HomeTheater 
package headfirst.facade.hometheater; 
 class Amplifier { 
 String description; 
 //Tuner tuner; 
 DvdPlayer dvd; 
 CdPlayer cd; 
 
 public Amplifier(String description) { 
 this.description = description; 
 } 
 
 public void on() { 
 System.out.println(description + " on"); 
 } 
 
 public void off() { 
 System.out.println(description + " off"); 
 } 
 
 public void setStereoSound() { 
 System.out.println(description + " stereo mode on"); 
 } 
 
 public void setSurroundSound() { 
 System.out.println(description + " surround sound on (5 speakers, 1 subwoofer)"); 
 } 
 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
 public void setVolume(int level) { 
 System.out.println(description + " setting volume to " + level); 
 } 
 public void setTuner(Tuner tuner) { 
 System.out.println(description + " setting tuner to " + dvd); 
 this.tuner = tuner; 
 } 
 
 public void setDvd(DvdPlayer dvd) { 
 System.out.println(description + " setting DVD player to " + dvd); 
 this.dvd = dvd; 
 } 
 
 public void setCd(CdPlayer cd) { 
 System.out.println(description + " setting CD player to " + cd); 
 this.cd = cd; 
 } 
 
 public String toString() { 
 return description; 
 } 
} 
 class CdPlayer { 
 String description; 
 int currentTrack; 
 Amplifier amplifier; 
 String title; 
 
 public CdPlayer(String description, Amplifier amplifier) { 
 this.description = description; 
 this.amplifier = amplifier; 
 } 
 
 public void on() { 
 System.out.println(description + " on"); 
 } 
 
 public void off() { 
 System.out.println(description + " off"); 
 } 
 public void eject() { 
 title = null; 
 System.out.println(description + " eject"); 
 } 
 
 public void play(String title) { 
 this.title = title; 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
 currentTrack = 0; 
 System.out.println(description + " playing \"" + title + "\""); 
 } 
 public void play(int track) { 
 if (title == null) { 
 System.out.println(description + " can't play track " + currentTrack + 
 ", no cd inserted"); 
 } else { 
 currentTrack = track; 
 System.out.println(description + " playing track " + currentTrack); 
 } 
 } 
 public void stop() { 
 currentTrack = 0; 
 System.out.println(description + " stopped"); 
 } 
 
 public void pause() { 
 System.out.println(description + " paused \"" + title + "\""); 
 } 
 
 public String toString() { 
 return description; 
 } 
} 
class DvdPlayer { 
 String description; 
 int currentTrack; 
 Amplifier amplifier; 
 String movie; 
 
 public DvdPlayer(String description, Amplifier amplifier) { 
 this.description = description; 
 this.amplifier = amplifier; 
 } 
 
 public void on() { 
 System.out.println(description + " on"); 
 } 
 
 public void off() { 
 System.out.println(description + " off"); 
 } 
 public void eject() { 
 movie = null; 
 System.out.println(description + " eject"); 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
 } 
 
 public void play(String movie) { 
 this.movie = movie; 
 currentTrack = 0; 
 System.out.println(description + " playing \"" + movie + "\""); 
 } 
 public void play(int track) { 
 if (movie == null) { 
 System.out.println(description + " can't play track " + track + " no dvd inserted"); 
 } else { 
 currentTrack = track; 
 System.out.println(description + " playing track " + currentTrack + " of \"" + movie + 
"\""); 
 } 
 } 
 public void stop() { 
 currentTrack = 0; 
 System.out.println(description + " stopped \"" + movie + "\""); 
 } 
 
 public void pause() { 
 System.out.println(description + " paused \"" + movie + "\""); 
 } 
 public void setTwoChannelAudio() { 
 System.out.println(description + " set two channel audio"); 
 } 
 
 public void setSurroundAudio() { 
 System.out.println(description + " set surround audio"); 
 } 
 
 public String toString() { 
 return description; 
 } 
} 
 class Projector { 
 String description; 
 DvdPlayer dvdPlayer; 
 
 public Projector(String description, DvdPlayer dvdPlayer) { 
 this.description = description; 
 this.dvdPlayer = dvdPlayer; 
 } 
 
 public void on() { 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
 System.out.println(description + " on"); 
 } 
 
 public void off() { 
 System.out.println(description + " off"); 
 } 
 public void wideScreenMode() { 
 System.out.println(description + " in widescreen mode (16x9 aspect ratio)"); 
 } 
 public void tvMode() { 
 System.out.println(description + " in tv mode (4x3 aspect ratio)"); 
 } 
 
 public String toString() { 
 return description; 
 } 
} 
 class TheaterLights { 
 String description; 
 
 public TheaterLights(String description) { 
 this.description = description; 
 } 
 
 public void on() { 
 System.out.println(description + " on"); 
 } 
 
 public void off() { 
 System.out.println(description + " off"); 
 } 
 
 public void dim(int level) { 
 System.out.println(description + " dimming to " + level + "%"); 
 } 
 
 public String toString() { 
 return description; 
 } 
} 
class Screen { 
 String description; 
 
 public Screen(String description) { 
 this.description = description; 
 } 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
 
 public void up() { 
 System.out.println(description + " going up"); 
 } 
 
 public void down() { 
 System.out.println(description + " going down"); 
 } 
 
 public String toString() { 
 return description; 
 } 
} 
 class PopcornPopper { 
 String description; 
 
 public PopcornPopper(String description) { 
 this.description = description; 
 } 
 
 public void on() { 
 System.out.println(description + " on"); 
 } 
 
 public void off() { 
 System.out.println(description + " off"); 
 } 
 public void pop() { 
 System.out.println(description + " popping popcorn!"); 
 } 
 
 
 public String toString() { 
 return description; 
 } 
} 
 class HomeTheaterFacade { 
 Amplifier amp; 
 Tuner tuner; 
 DvdPlayer dvd; 
 CdPlayer cd; 
 Projector projector; 
 TheaterLights lights; 
 Screen screen; 
 PopcornPopper popper; 
 
 public HomeTheaterFacade(Amplifier amp, 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
 Tuner tuner, 
 DvdPlayer dvd, 
 CdPlayer cd, 
 Projector projector, 
 Screen screen, 
 TheaterLights lights, 
 PopcornPopper popper) { 
 
 this.amp = amp; 
 this.tuner = tuner; 
 this.dvd = dvd; 
 this.cd = cd; 
 this.projector = projector; 
 this.screen = screen; 
 this.lights = lights; 
 this.popper = popper; 
 } 
 
 public void watchMovie(String movie) { 
 System.out.println("Get ready to watch a movie..."); 
 popper.on(); 
 popper.pop(); 
 lights.dim(10); 
 screen.down(); 
 projector.on(); 
 projector.wideScreenMode(); 
 amp.on(); 
 amp.setDvd(dvd); 
 amp.setSurroundSound(); 
 amp.setVolume(5); 
 dvd.on(); 
 dvd.play(movie); 
 } 
 
 
 public void endMovie() { 
 System.out.println("Shutting movie theater down..."); 
 popper.off(); 
 lights.on(); 
 screen.up(); 
 projector.off(); 
 amp.off(); 
 dvd.stop(); 
 dvd.eject(); 
 dvd.off(); 
 } 
public void listenToCd(String cdTitle) { 
System.out.println("Get ready for an audiopile experence..."); 
 lights.on(); 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
 amp.on(); 
 amp.setVolume(5); 
 amp.setCd(cd); 
 amp.setStereoSound(); 
 cd.on(); 
 cd.play(cdTitle); 
 } 
 public void endCd() { 
 System.out.println("Shutting down CD..."); 
 amp.off(); 
 amp.setCd(cd); 
 cd.eject(); 
 cd.off(); 
 } 
 public void listenToRadio(double frequency) { 
 System.out.println("Tuning in the airwaves..."); 
 tuner.on(); 
 tuner.setFrequency(frequency); 
 amp.on(); 
 amp.setVolume(5); 
 amp.setTuner(tuner); 
 } 
 public void endRadio() { 
 System.out.println("Shutting down the tuner..."); 
 tuner.off(); 
 amp.off(); 
 } 
} 
public class Main { 
 public static void main(String[] args) { 
 Amplifier amp = new Amplifier("Top-O-Line Amplifier"); 
 Tuner tuner = new Tuner("Top-O-Line AM/FM Tuner", amp); 
 DvdPlayer dvd = new DvdPlayer("Top-O-Line DVD Player", amp); 
 CdPlayer cd = new CdPlayer("Top-O-Line CD Player", amp); 
 Projector projector = new Projector("Top-O-Line Projector", dvd); 
 TheaterLights lights = new TheaterLights("Theater Ceiling Lights"); 
 Screen screen = new Screen("Theater Screen"); 
 PopcornPopper popper = new PopcornPopper("Popcorn Popper"); 
 
 HomeTheaterFacade homeTheater = 
 new HomeTheaterFacade(amp, dvd, cd, 
 projector, screen, lights, popper); 
 
 homeTheater.watchMovie("Raiders of the Lost Ark"); 
 homeTheater.endMovie(); 
 } 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
} 
Write a Java Program to implement Observer Design Pattern for number conversion. 
Accept a number in Decimal form and represent it in Hexadecimal, Octal and Binary. 
Change the Number and it reflects in other forms also 
import java.util.ArrayList; 
import java.util.List; 
class Subject 
{ 
 private List<Observer>observers=new ArrayList<Observer>(); 
 private int state; 
 public int getState() 
 { 
 return state; 
 } 
 public void setState(int s) 
 { 
 this.state=s; 
 notifyAllObservers(); 
 } 
 
 public void attach (Observer o1) 
 { 
 observers.add(o1); 
 } 
 public void notifyAllObservers() 
 { 
 for(Observer o1: observers) 
 { 
 o1.update(); 
 } 
 } 
} 
abstract class Observer 
{ 
protected Subject s1; 
public abstract void update(); 
} 
class BinaryObserver extends Observer 
 { 
 public BinaryObserver(Subject s) 
 { 
 this.s1=s; 
 this.s1.attach(this); 
 } 
 public void update() 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
 { 
 System.out.println("Binary String:" +Integer.toBinaryString(s1.getState())); 
 } 
} 
class OctalObserver extends Observer 
 { 
 public OctalObserver(Subject s) 
 { 
 this.s1=s; 
 this.s1.attach(this); 
 } 
 public void update() 
 { 
 System.out.println("Octal String:" +Integer.toOctalString(s1.getState())); 
 } 
} 
class HexaObserver extends Observer 
 { 
 public HexaObserver(Subject s) 
 { 
 this.s1=s; 
 this.s1.attach(this); 
 } 
 public void update() 
 { 
 System.out.println("Heaxdeciamal String:" +Integer.toHexString(s1.getState())); 
 } 
} 
public class Main 
{ 
 public static void main(String [] args) 
 { 
 Subject s1=new Subject(); 
 new BinaryObserver(s1); 
 new OctalObserver(s1); 
 new HexaObserver(s1); 
 System.out.println("First state Change:15"); 
 s1.setState(15); 
 System.out.println("Second state Change:10"); 
 s1.setState(10); 
 } 
} 
Write a Java Program to implement Abstract Factory Pattern for Shape interface 
interface Shape 
{ 
void draw(); 
} 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
class RoundedRectangle implements Shape 
{ 
 public void draw() 
 { 
 System.out.println(" Inside RR"); 
 } 
} 
class RoundedSquare implements Shape 
{ 
 public void draw() 
 { 
 System.out.println(" Inside RS"); 
 } 
} 
class Rectangle implements Shape 
{ 
 public void draw() 
 { 
 System.out.println(" Inside Simple R"); 
 } 
} 
class Square implements Shape 
{ 
 public void draw() 
 { 
 System.out.println(" Inside Simple Sq"); 
 } 
} 
abstract class AbstractFactory 
{ 
 abstract Shape getShape( String st); 
} 
class ShapeFactory extends AbstractFactory 
{ 
 public Shape getShape( String st) 
 { 
 if(st.equalsIgnoreCase("Rectangle")) 
 { return new Rectangle();} 
 else if(st.equalsIgnoreCase("Square")) 
 { return new Square();} 
 return null; 
 } 
} 
class RoundedShapeFactory extends AbstractFactory 
{ 
 public Shape getShape( String st) 
P. E. Society’s 
Modern College of Arts, Science and Commerce, Ganeshkhind, Pune 16 
Class: MSc(Computer Science) Sem III 
Subject: Design Patterns 
Collection of Programmes by Dr. Dipali Meher 
#DipaliMeher
 { 
 if(st.equalsIgnoreCase("Rectangle")) 
 { return new RoundedRectangle();} 
 else if(st.equalsIgnoreCase("Square")) 
 { return new RoundedSquare();} 
 return null; 
 } 
} 
class FactoryProducer 
{ 
 public static AbstractFactory getFactory(boolean rounded) 
 { 
 if (rounded) 
 { return new RoundedShapeFactory();} 
 else 
 { return new ShapeFactory();} 
 } 
} 
public class Main 
{ 
 public static void main(String[]args) 
 { 
 AbstractFactory shapeFactory=FactoryProducer.getFactory(false); 
 Shape shape1=shapeFactory.getShape("Rectangle"); 
 shape1.draw(); 
 Shape shape2=shapeFactory.getShape("SQuare"); 
 shape2.draw(); 
 
 AbstractFactory shapeFactory1=FactoryProducer.getFactory(true); 
 Shape shape3=shapeFactory1.getShape("REctangle"); 
 shape3.draw(); 
 
 Shape shape4=shapeFactory1.getShape("square"); 
 shape4.draw(); 
 } 
} 
Write a Java Program to implement Iterator Pattern for Designing Menu like Breakfast, 
Lunch or Dinner Menu 
https://medium.com/@priya104/the-iterator-pattern-cb48a63e72b1 
Reference: 
https://fjp.at/design-patterns/singleton











































