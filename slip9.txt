Savitribai Phule Pune University
S.Y.M.Sc(Comp. Sci.) Practical Examination 
Practical Paper(CSUP235) on Software Architecture and Design Patterns,Machine Learning and 
Web Frameworks
Duration : 3 Hours Maximum Marks: 70 
----------------------------------------------------------------------------------------------------------------------------------------------
9
Q.1 Design simple HR Application using Spring Framework [20 M]
Q 2. Write a python program to implement Linear SVM. [20 M]
Q. 3 Create a node.js file that Select all records from the "customers" table, and display the 
result object on console. [20 M]
Q.4 Viva 

-------------------------------------------------------------------------------------------------------------------------------------------------------------

Q1--------

<?xml version="1.0" encoding="UTF-8"?>
<projectDescription>
	<name>SimpleHRApplication</name>
	<comment></comment>
	<projects>
	</projects>
	<buildSpec>
		<buildCommand>
			<name>org.eclipse.jdt.core.javabuilder</name>
			<arguments>
			</arguments>
		</buildCommand>
		<buildCommand>
			<name>org.eclipse.wst.common.project.facet.core.builder</name>
			<arguments>
			</arguments>
		</buildCommand>
		<buildCommand>
			<name>org.eclipse.wst.validation.validationbuilder</name>
			<arguments>
			</arguments>
		</buildCommand>
		<buildCommand>
			<name>org.eclipse.m2e.core.maven2Builder</name>
			<arguments>
			</arguments>
		</buildCommand>
	</buildSpec>
	<natures>
		<nature>org.eclipse.m2e.core.maven2Nature</nature>
		<nature>org.eclipse.jem.workbench.JavaEMFNature</nature>
		<nature>org.eclipse.wst.common.modulecore.ModuleCoreNature</nature>
		<nature>org.eclipse.wst.common.project.facet.core.nature</nature>
		<nature>org.eclipse.jdt.core.javanature</nature>
		<nature>org.eclipse.wst.jsdt.core.jsNature</nature>
	</natures>
</projectDescription>


----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Q2-------

Write a python program to implement Linear SVM.
import numpy as np
import matplotlib.pyplot as plt
from sklearn import svm,datasets

iris=datasets.load_iris()

X=iris.data[:,:2]
y=iris.target

C=1.0

svc=svm.SVC(kernel='linear',C=1).fit(X,y)

x_min, x_max =X[:,0].min() -1, X[:,0].max()+1
y_min, y_max =X[:,1].min() -1, X[:,0].max()+1
h=(x_max / x_min)/100
xx,yy =np.meshgrid(np.arange(x_min, x_max,h),
                   np.arange(y_min,y_max,h))

plt.subplot(1,1,1)


Z=svc.predict(np.c_[xx.ravel(), yy.ravel()])
Z=Z.reshape(xx.shape)
plt.contourf(xx,yy,Z,cmap = plt.cm.Paired,aplha=0.8)
plt.scatter(X[:,0],X[:,1],c=y, cmap=plt.cm.Paired)
plt.xlabel('Sepal length')
plt.xlabel('Sepal width')
plt.xlim(xx.min(),xx.max())
plt.title('SVC with linear kernel')
plt.show()


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Q3---------

Create a node.js file that Select all records from the "customers" table, and display the result 
object on console. 
var mysql = require('mysql'); 
var con = mysql.createConnection({ 
 host: "localhost", 
 user: "root", 
 password: "password", 
 database: "db"
}); 
con.connect(function(err) { 
 if (err) throw err; 
 console.log("Connected!"); 
 var sql = "select * from customer"; 
 con.query(sql, function (err, result,fields){ 
 if (err) throw err; 
 console.log(result); 
 }); 
}); 




