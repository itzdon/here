Savitribai Phule Pune University
S.Y.M.Sc(Comp. Sci.) Practical Examination 
Practical Paper(CSUP235) on Software Architecture and Design Patterns,Machine Learning and 
Web Frameworks
Duration : 3 Hours Maximum Marks: 70 
----------------------------------------------------------------------------------------------------------------------------------------------
14
Q.1 Write a Java Program to implement Command Design Pattern for Command Interface 
 with execute() . Use this to create variety of commands for LightOnCommand, 
LightOffCommand, GarageDoorUpCommand, StereoOnWithCDComman. [20 M]
 
Q.2. Write a python program to find all null values in a given dataset and remove them.
[20 M]
Q.3 Write node js script to interact with the filesystem, and serve a web page from a file .
 [20 M] 
Q.4 Viva

-------------------------------------------------------------------------------------------------------------------------------------------------------------

Q1-------

Command Pattern
‚óè	Remote
1)CeilingFan.java
package headfirst.command.remote;
public class CeilingFan {
	String location = "";
	int level;
	public static final int HIGH = 2;
	public static final int MEDIUM = 1;
	public static final int LOW = 0;
	public CeilingFan(String location) {
		this.location = location;
	}
	public void high() {
		// turns the ceiling fan on to high
		level = HIGH;
		System.out.println(location + " ceiling fan is on high");
 
	} 
	public void medium() {
		// turns the ceiling fan on to medium
		level = MEDIUM;
		System.out.println(location + " ceiling fan is on medium");
	}
	public void low() {
		// turns the ceiling fan on to low
		level = LOW;
		System.out.println(location + " ceiling fan is on low");
	}
 public void off() {
		// turns the ceiling fan off
		level = 0;
		System.out.println(location + " ceiling fan is off");
	}
	public int getSpeed() {
		return level;
	}
}
2)CeilingFanOffCommand.java
package headfirst.command.remote;
public class CeilingFanOffCommand implements Command {
	CeilingFan ceilingFan;
	public CeilingFanOffCommand(CeilingFan ceilingFan) {
		this.ceilingFan = ceilingFan;
	}
	public void execute() {
		ceilingFan.off();
	}
}
3)CeilingFanOnCommand.java
package headfirst.command.remote;
public class CeilingFanOnCommand implements Command {
	CeilingFan ceilingFan;
	public CeilingFanOnCommand(CeilingFan ceilingFan) {
		this.ceilingFan = ceilingFan;
	}
	public void execute() {
		ceilingFan.high();
	}
}
4)Command.java
package headfirst.command.remote;
public interface Command {
	public void execute();
}
5)GarageDoor.java
package headfirst.command.remote;
public class GarageDoor {
	String location;
	public GarageDoor(String location) {
		this.location = location;
	}
	public void up() {
		System.out.println(location + " garage Door is Up");
	}
	public void down() {
		System.out.println(location + " garage Door is Down");
	}
	public void stop() {
		System.out.println(location + " garage Door is Stopped");
	}
	public void lightOn() {
		System.out.println(location + " garage light is on");
	}
	public void lightOff() {
		System.out.println(location + " garage light is off");
	}
}
6)GarageDoorDownCommand.java
package headfirst.command.remote;
public class GarageDoorDownCommand implements Command {
	GarageDoor garageDoor;
	public GarageDoorDownCommand(GarageDoor garageDoor) {
		this.garageDoor = garageDoor;
	}
	public void execute() {
		garageDoor.up();
	}
}
7)GarageDoorUpCommand.java
package headfirst.command.remote;
public class GarageDoorUpCommand implements Command {
	GarageDoor garageDoor;
	public GarageDoorUpCommand(GarageDoor garageDoor) {
		this.garageDoor = garageDoor;
	}
	public void execute() {
		garageDoor.up();
	}
}
8)Hottub.java
package headfirst.command.remote;
public class Hottub {
	boolean on;
	int temperature;
	public Hottub() {
	}
	public void on() {
		on = true;
	}
	public void off() {
		on = false;
	}
	public void bubblesOn() {
		if (on) {
			System.out.println("Hottub is bubbling!");
		}
	}
	public void bubblesOff() {
		if (on) {
			System.out.println("Hottub is not bubbling");
		}
	}
	public void jetsOn() {
		if (on) {
			System.out.println("Hottub jets are on");
		}
	}
	public void jetsOff() {
		if (on) {
			System.out.println("Hottub jets are off");
		}
	}
	public void setTemperature(int temperature) {
		this.temperature = temperature;
	}
	public void heat() {
		temperature = 105;
	System.out.println("Hottub is heating to a steaming 105 degrees");
	}
	public void cool() {
		temperature = 98;
		System.out.println("Hottub is cooling to 98 degrees");
	}
}
9)HottubOffCommand.java
package headfirst.command.remote;
public class HottubOffCommand implements Command {
	Hottub hottub;
	public HottubOffCommand(Hottub hottub) {
		this.hottub = hottub;
	}
	public void execute() {
		hottub.cool();
		hottub.off();
	}
}
10)HottubOnCommand.java
package headfirst.command.remote;
public class HottubOnCommand implements Command {
	Hottub hottub;
	public HottubOnCommand(Hottub hottub) {
		this.hottub = hottub;
	}
	public void execute() {
		hottub.on();
		hottub.heat();
		hottub.bubblesOn();
	}
}
11)Light.java
package headfirst.command.remote;
public class Light {
	String location = "";
	public Light(String location) {
		this.location = location;
	}
	public void on() {
		System.out.println(location + " light is on");
	}
public void off() {
		System.out.println(location + " light is off");
	}
}
12)LightOffCommand.java
package headfirst.command.remote;
public class LightOffCommand implements Command {
	Light light;
	public LightOffCommand(Light light) {
		this.light = light;
	}
	public void execute() {
		light.off();
	}
}
13)LightOnCommand.java
package headfirst.command.remote;
public class LightOnCommand implements Command {
	Light light;
	public LightOnCommand(Light light) {
		this.light = light;
	}
	public void execute() {
		light.on();
	}
}
14)LivingroomLightOffCommand.java
package headfirst.command.remote;
public class LivingroomLightOffCommand implements Command {
	Light light;
	public LivingroomLightOffCommand(Light light) {
		this.light = light;
	}
	public void execute() {
		light.off();
	}
}
15)LivingroomLightOnCommand.java
package headfirst.command.remote;
public class LivingroomLightOnCommand implements Command {
	Light light;
	public LivingroomLightOnCommand(Light light) {
		this.light = light;
	}
	public void execute() {
		light.on();
	}
}
16)NoCommand.java
package headfirst.command.remote;
public class NoCommand implements Command {
	public void execute() { }
}
17)RemoteControl.java
package headfirst.command.remote;
import java.util.*;
//
// This is the invoker
//
public class RemoteControl {
	Command[] onCommands;
	Command[] offCommands;
	public RemoteControl() {
		onCommands = new Command[7];
		offCommands = new Command[7];
		Command noCommand = new NoCommand();
		for (int i = 0; i < 7; i++) {
			onCommands[i] = noCommand;
			offCommands[i] = noCommand;
		}
	}
	public void setCommand(int slot, Command onCommand, Command offCommand) {
		onCommands[slot] = onCommand;
		offCommands[slot] = offCommand;
	}
	public void onButtonWasPushed(int slot) {
		onCommands[slot].execute();
	}
	public void offButtonWasPushed(int slot) {
		offCommands[slot].execute();
	}
	public String toString() {
		StringBuffer stringBuff = new StringBuffer();
		stringBuff.append("\n------ Remote Control -------\n");
		for (int i = 0; i < onCommands.length; i++) {
	stringBuff.append("[slot " + i + "] " + onCommands[i].getClass().getName()
				+ "    " + offCommands[i].getClass().getName() + "\n");
		}
		return stringBuff.toString();
	}
}
18)RemoteLoader.java
package headfirst.command.remote;
public class RemoteLoader {
	public static void main(String[] args) {
		RemoteControl remoteControl = new RemoteControl();
		Light livingRoomLight = new Light("Living Room");
		Light kitchenLight = new Light("Kitchen");
		CeilingFan ceilingFan= new CeilingFan("Living Room");
		GarageDoor garageDoor = new GarageDoor("");
		Stereo stereo = new Stereo("Living Room");  
LightOnCommand livingRoomLightOn =new LightOnCommand(livingRoomLight);
LightOffCommand livingRoomLightOff =new LightOffCommand(livingRoomLight);
LightOnCommand kitchenLightOn =new LightOnCommand(kitchenLight);
LightOffCommand kitchenLightOff =new LightOffCommand(kitchenLight);
CeilingFanOnCommand ceilingFanOn =new CeilingFanOnCommand(ceilingFan);
CeilingFanOffCommand ceilingFanOff =new CeilingFanOffCommand(ceilingFan);
GarageDoorUpCommand garageDoorUp =new GarageDoorUpCommand(garageDoor);
GarageDoorDownCommand garageDoorDown =new GarageDoorDownCommand(garageDoor);
StereoOnWithCDCommand stereoOnWithCD =new StereoOnWithCDCommand(stereo);
StereoOffCommand  stereoOff =new StereoOffCommand(stereo);
	remoteControl.setCommand(0, livingRoomLightOn, livingRoomLightOff);
		remoteControl.setCommand(1, kitchenLightOn, kitchenLightOff);
		remoteControl.setCommand(2, ceilingFanOn, ceilingFanOff);
		remoteControl.setCommand(3, stereoOnWithCD, stereoOff);
		System.out.println(remoteControl);
		remoteControl.onButtonWasPushed(0);
		remoteControl.offButtonWasPushed(0);
		remoteControl.onButtonWasPushed(1);
		remoteControl.offButtonWasPushed(1);
		remoteControl.onButtonWasPushed(2);
		remoteControl.offButtonWasPushed(2);
		remoteControl.onButtonWasPushed(3);
		remoteControl.offButtonWasPushed(3);
	}
}
19)Stereo.java
package headfirst.command.remote;
public class Stereo {
	String location;
	public Stereo(String location) {
		this.location = location;
	}
	public void on() {
		System.out.println(location + " stereo is on");
	}
	public void off() {
		System.out.println(location + " stereo is off");
	}
	public void setCD() {
		System.out.println(location + " stereo is set for CD input");
	}
	public void setDVD() {
	System.out.println(location + " stereo is set for DVD input");
	}
	public void setRadio() {
		System.out.println(location + " stereo is set for Radio");
	}
	public void setVolume(int volume) {
		// code to set the volume
		// valid range: 1-11 (after all 11 is better than 10, right?)
	System.out.println(location + " Stereo volume set to " + volume);
	}
}
20)StereoOffCommand.java
package headfirst.command.remote;
public class StereoOffCommand implements Command {
	Stereo stereo;
	public StereoOffCommand(Stereo stereo) {
		this.stereo = stereo;
	}
	public void execute() {
		stereo.off();
	}
}
21)StereoOnWithCDCommand.java
package headfirst.command.remote;
public class StereoOnWithCDCommand implements Command {
	Stereo stereo;
	public StereoOnWithCDCommand(Stereo stereo) {
		this.stereo = stereo;
	}
	public void execute() {
		stereo.on();
		stereo.setCD();
		stereo.setVolume(11);
	}
}
22)TV.java
package headfirst.command.remote;
public class TV {
	String location;
	int channel;
	public TV(String location) {
		this.location = location;
	}
	public void on() {
		System.out.println("TV is on");
	}
	public void off() {
		System.out.println("TV is off");
	}
	public void setInputChannel() {
		this.channel = 3;
		System.out.println("Channel is set for VCR");
	}
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Q2---------

Write a python program to find all null values in a given dataset and remove them.
Firstly Create CSV File
ST_NUM		ST_NAME		NUM_BEDROOMS		OWN_OCCUPIED
104		PUTNAM			3			Y
197		LEXINGTON		3			N
		LEXINGTON		N/A			N
201		BERKELEY			1			12	
203		BERKELEY			3			Y
207		BERKELEY			NA			Y
NA		WASHINGTON		2			
213		TREMONT			--			Y
215		TREMONT			NA			Y

import pandas as pd
import numpy as np
df=pd.read_csv("nullvalues.csv")
df
print(df.head())
print(df['ST_NUM'])

print(df['ST_NUM'])
print(df['ST_NUM'].isnull())

print(df['NUM_BEDROOMS'])
print(df['NUM_BEDROOMS'].isnull())

missing_values = ["n/a", "na", "--"]
df = pd.read_csv("nullvalues.csv", na_values = missing_values)

print(df['OWN_OCCUPIED'])
print(df['OWN_OCCUPIED'].isnull())

print(df.isnull().sum())

(df['ST_NUM'].fillna(125,inplace=True))

df

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Q3--------------

Write node js script to interact with the filesystem, and serve a web page from a file 
ÔÉ†Q14.html 
<html>
<body>
<h1>My Header</h1>
<p>My paragraph.</p>
</body>
</html>
ÔÉ†Q14.js 
var http = require('http'); 
var fs = require('fs'); 
http.createServer(function (req, res) { 
 fs.readFile('Q14.html', function(err, data) { 
 res.writeHead(200, {'Content-Type': 'text/html'}); 
 res.write(data); 
 return res.end(); 
 }); 
}).listen(8080); 



